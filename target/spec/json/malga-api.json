{
  "openapi" : "3.0.1",
  "servers" : [ {
    "url" : "https://api.malga.io",
    "description" : "Production"
  } ],
  "info" : {
    "version" : "0.5",
    "title" : "Malga API Documentation",
    "description" : "# Authentication\n\nMalga’s API services are protected through access keys. "
  },
  "tags" : [ {
    "name" : "Client-token",
    "description" : "You can create temporary public keys to access the API with limited scope and expiration time."
  }, {
    "name" : "Tokens",
    "description" : "**Parameters’ details of the card token's request"
  }, {
    "name" : "Cards",
    "description" : "**Attributues of a card object**\n\n<SchemaDefinition schemaRef=\"#/components/schemas/Card\"  />\n"
  }, {
    "name" : "Customers",
    "description" : "\nThrough the customer’s API you can create, edit, list, and delete shopper’s data for use in card tokenization services, PIX charges, Invoices (payment slips), use in anti-fraud and recurrence engine analysis."
  }, {
    "name" : "Sessions",
    "description" : "\nUsing sessions API it's possible to create an order, with items, payment methods and more, that can be payed through an endpoint or integrated to MalgaCheckout."
  }, {
    "name" : "Charges",
    "description" : "\nTo implement a charge, you must create a charge object. You can retrieve details of individual transactions, or list all the charges made at a given merchant. ChargeResponses are identified by a 'unique' id."
  }, {
    "name" : "Webhooks",
    "description" : "\nMalga uses the webhooks service to notify your system about events occurring in our platform. Through webhooks you can update your system whenever an important event happens, such as updating the status of charges to confirm or cancel a certain payment."
  }, {
    "name" : "Merchants",
    "description" : "\nThrough the merchant’s APIs, it is possible to create and configure sub-accounts on Malga. A sub account, or merchant, is a registry of a commercial business you have with one of Malga's integrated payment providers. "
  }],
  "x-tagGroups" : [ {
    "name" : "API Key",
    "tags" : [ "Client-token" ]
  }, {
    "name" : "Cards",
    "tags" : [ "Tokens", "Cards" ]
  }, {
    "name" : "Payments",
    "tags" : [ "Customers", "Charges", "Sessions" ]
  }, {
    "name" : "Notification and events",
    "tags" : [ "Webhooks" ]
  }, {
    "name" : "Providers",
    "tags" : [ "Merchants" ]
  }],
  "paths" : {
    "/v1/auth" : {
      "post" : {
        "tags" : [ "Client-token" ],
        "summary" : "Create public key for client-side integration",
        "operationId" : "create_auth_token",
        "requestBody" : {
          "description" : "Creat authentication token",
          "required" : true,
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/AuthRequest"
              },
              "example" : {
                "$ref" : "#/components/examples/AuthRequest/value"
              }
            }
          }
        },
        "responses" : {
          "201" : {
            "description" : "Created",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/AuthResponse"
                },
                "example" : {
                  "$ref" : "#/components/examples/AuthResponse/value"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v1/tokens" : {
      "post" : {
        "tags" : [ "Tokens" ],
        "summary" : "Create new card token",
        "operationId" : "create_token",
        "requestBody" : {
          "description" : "Tokenize credit card",
          "required" : true,
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/TokenRequest"
              },
              "example" : {
                "$ref" : "#/components/examples/TokenRequest/value"
              }
            }
          }
        },
        "responses" : {
          "201" : {
            "description" : "Created",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TokenResponse"
                },
                "example" : {
                  "$ref" : "#/components/examples/TokenResponse/value"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v1/cards" : {
      "post" : {
        "tags" : [ "Cards" ],
        "summary" : "Create a new card from card token",
        "operationId" : "saveCard",
        "requestBody" : {
          "description" : "Create credit card",
          "required" : true,
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/CardRequest"
              },
              "example" : {
                "$ref" : "#/components/examples/CardRequest/value"
              }
            }
          }
        },
        "responses" : {
          "201" : {
            "description" : "Created",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/CardResponse"
                },
                "example" : {
                  "$ref" : "#/components/examples/CardResponse/value"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      },
      "get" : {
        "tags" : [ "Cards" ],
        "summary" : "List cards",
        "operationId" : "getCards",
        "parameters" : [ {
          "in" : "query",
          "name" : "page",
          "schema" : {
            "type" : "string"
          },
          "required" : false,
          "description" : "page number"
        }, {
          "in" : "query",
          "name" : "limit",
          "schema" : {
            "type" : "string"
          },
          "required" : false,
          "description" : "total itens per page"
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/CardList"
                },
                "example" : {
                  "$ref" : "#/components/examples/CardList/value"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v1/cards/{id}" : {
      "get" : {
        "tags" : [ "Cards" ],
        "summary" : "Get card details",
        "operationId" : "getCardById",
        "parameters" : [ {
          "in" : "path",
          "name" : "id",
          "schema" : {
            "type" : "string"
          },
          "required" : true,
          "description" : "Card ID"
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/CardResponse"
                },
                "example" : {
                  "$ref" : "#/components/examples/CardResponse/value"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v1/charges" : {
      "post" : {
        "tags" : [ "Charges" ],
        "summary" : "Create new charge",
        "operationId" : "charge",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/ChargeRequest"
              },
              "examples" : {
                "card" : {
                  "summary" : "Credit card example",
                  "value" : null,
                  "$ref" : "#/components/examples/ChargeCardRequest/value"
                },
                "pix" : {
                  "summary" : "PIX example",
                  "value" : null,
                  "$ref" : "#/components/examples/ChargePixRequest/value"
                },
                "boleto" : {
                  "summary" : "Boleto example",
                  "value" : null,
                  "$ref" : "#/components/examples/ChargeBoletoRequest/value"
                }
              }
            }
          }
        },
        "responses" : {
          "201" : {
            "description" : "Created",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ChargeResponse"
                },
                "examples" : {
                  "card" : {
                    "summary" : "Credit card charge example",
                    "value" : {
                      "$ref" : "#/components/examples/ChargeCardResponse"
                    }
                  },
                  "pix" : {
                    "summary" : "PIX charge example",
                    "value" : {
                      "$ref" : "#/components/examples/ChargePixResponse/value"
                    }
                  },
                  "boleto" : {
                    "summary" : "Boleto charge example",
                    "value" : {
                      "$ref" : "#/components/examples/ChargeBoletoResponse/value"
                    }
                  }
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      },
      "get" : {
        "tags" : [ "Charges" ],
        "summary" : "List charges",
        "operationId" : "getCharge",
        "parameters" : [ {
          "in" : "query",
          "name" : "page",
          "schema" : {
            "type" : "string"
          },
          "required" : false,
          "description" : "page number"
        }, {
          "in" : "query",
          "name" : "limit",
          "schema" : {
            "type" : "string"
          },
          "required" : false,
          "description" : "total itens per page"
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ChargeList"
                },
                "example" : {
                  "$ref" : "#/components/examples/ChargeList/value"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v1/charges/{id}" : {
      "get" : {
        "tags" : [ "Charges" ],
        "summary" : "Get charge details",
        "operationId" : "getChargeByid",
        "parameters" : [ {
          "in" : "path",
          "name" : "id",
          "schema" : {
            "type" : "string"
          },
          "required" : true,
          "description" : "Charge ID"
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ChargeResponse"
                },
                "example" : {
                  "$ref" : "#/components/examples/ChargeCardResponse/value"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      },
      "post" : {
        "tags" : [ "Charges" ],
        "summary" : "Change the status of a charge in the sandbox environment",
        "operationId" : "changeStatusTransaction",
        "parameters" : [ {
          "in" : "path",
          "name" : "id",
          "schema" : {
            "type" : "string",
            "format" : "uuid"
          },
          "required" : true,
          "description" : "id of the charge you want to change in the sandbox"
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/UpdateChargeStatusRequest"
              },
              "example" : {
                "status" : "charged_back"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ChargeResponse"
                },
                "example" : {
                  "$ref" : "#/components/examples/ChargeCardResponse/value"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v1/charges/{id}/capture" : {
      "post" : {
        "tags" : [ "Charges" ],
        "summary" : "Capture pre-authorized charge",
        "operationId" : "captureCharge",
        "parameters" : [ {
          "in" : "path",
          "name" : "id",
          "schema" : {
            "type" : "string"
          },
          "required" : true,
          "description" : "pre-authorized ChargeResponse ID"
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/CaptureRequest"
              },
              "example" : {
                "amount" : 150
              }
            }
          }
        },
        "responses" : {
          "201" : {
            "description" : "Created",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ChargeResponse"
                },
                "example" : {
                  "$ref" : "#/components/examples/ChargeCardResponse/value"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v1/charges/{id}/void" : {
      "post" : {
        "tags" : [ "Charges" ],
        "summary" : "Refund authorized charge",
        "operationId" : "refundCharge",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/VoidRequest"
              },
              "example" : {
                "amount" : 150
              }
            }
          }
        },
        "parameters" : [ {
          "in" : "path",
          "name" : "id",
          "schema" : {
            "type" : "string"
          },
          "required" : true,
          "description" : "Charge ID"
        } ],
        "responses" : {
          "201" : {
            "description" : "Created",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ChargeResponse"
                },
                "example" : {
                  "$ref" : "#/components/examples/ChargeCardResponse/value"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v1/sessions" : {
      "post" : {
        "summary" : "Create new session",
        "operationId" : "createSession",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/SessionRequest"
              },
              "example" : {
                "$ref" : "#/components/examples/SessionRequest/value"
              }
            }
          }
        },
        "responses" : {
          "201" : {
            "description" : "Created",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SessionResponse"
                },
                "example" : {
                  "$ref" : "#/components/examples/SessionResponse/value"
                }
              }
            }
          }
        },
        "tags" : [ "Sessions" ]
      }
    },
    "/v1/sessions/{id}" : {
      "get" : {
        "summary" : "Get session details",
        "operationId" : "getSession",
        "parameters" : [ {
          "name" : "id",
          "required" : true,
          "description" : "Session ID",
          "in" : "path",
          "schema" : {
            "type" : "string",
            "format" : "uuid"
          }
        } ],
        "responses" : {
          "201" : {
            "description" : "Created",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SessionResponse"
                },
                "example" : {
                  "$ref" : "#/components/examples/SessionResponse/value"
                }
              }
            }
          }
        },
        "tags" : [ "Sessions" ]
      },
      "patch" : {
        "summary" : "Update session status",
        "operationId" : "patchSession",
        "parameters" : [ {
          "name" : "id",
          "required" : true,
          "description" : "Session ID",
          "in" : "path",
          "schema" : {
            "type" : "string",
            "format" : "uuid"
          }
        } ],
        "responses" : {
          "201" : {
            "description" : "Created",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SessionResponse"
                },
                "example" : {
                  "$ref" : "#/components/examples/SessionResponse/value"
                }
              }
            }
          }
        },
        "tags" : [ "Sessions" ]
      }
    },
    "/v1/sessions/{id}/charge" : {
      "post" : {
        "summary" : "Pay session",
        "operationId" : "paySession",
        "parameters" : [ {
          "name" : "id",
          "required" : true,
          "description" : "Session ID",
          "in" : "path",
          "schema" : {
            "type" : "string",
            "format" : "uuid"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/SessionChargeRequest"
              },
              "examples" : {
                "card" : {
                  "summary" : "Credit card example",
                  "value" : null,
                  "$ref" : "#/components/examples/ChargeCardRequest/value"
                },
                "pix" : {
                  "summary" : "PIX example",
                  "value" : null,
                  "$ref" : "#/components/examples/ChargePixRequest/value"
                },
                "boleto" : {
                  "summary" : "Boleto example",
                  "value" : null,
                  "$ref" : "#/components/examples/ChargeBoletoRequest/value"
                }
              }
            }
          }
        },
        "responses" : {
          "201" : {
            "description" : "Created",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SessionChargeResponse"
                },
                "examples" : {
                  "card" : {
                    "summary" : "Credit card example",
                    "value" : null,
                    "$ref" : "#/components/examples/SessionChargeCardResponse/value"
                  },
                  "pix" : {
                    "summary" : "PIX example",
                    "value" : null,
                    "$ref" : "#/components/examples/SessionChargePixResponse/value"
                  },
                  "boleto" : {
                    "summary" : "Boleto example",
                    "value" : null,
                    "$ref" : "#/components/examples/SessionChargeBoletoResponse/value"
                  }
                }
              }
            }
          }
        },
        "tags" : [ "Sessions" ]
      }
    },
    "/v1/sessions/{id}/cancel" : {
      "post" : {
        "summary" : "Cancel session",
        "operationId" : "cancelSession",
        "parameters" : [ {
          "name" : "id",
          "required" : true,
          "description" : "Session ID",
          "in" : "path",
          "schema" : {
            "type" : "string",
            "format" : "uuid"
          }
        } ],
        "responses" : {
          "201" : {
            "description" : "Created",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/CancelSessionResponse"
                },
                "example" : {
                  "$ref" : "#/components/examples/CancelSessionResponse/value"
                }
              }
            }
          }
        },
        "tags" : [ "Sessions" ]
      }
    },
    "/v1/sessions/{id}/history" : {
      "get" : {
        "summary" : "Recover session history",
        "operationId" : "getSessionHistory",
        "parameters" : [ {
          "name" : "id",
          "required" : true,
          "description" : "Session ID",
          "in" : "path",
          "schema" : {
            "type" : "string",
            "format" : "uuid"
          }
        } ],
        "responses" : {
          "201" : {
            "description" : "Created",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SessionHistoryResponse"
                }
              }
            }
          }
        },
        "tags" : [ "Sessions" ]
      }
    },
    "/v1/sessions/{id}/link" : {
      "get" : {
        "summary" : "Recover session with company settings",
        "operationId" : "getSessionWithSettings",
        "parameters" : [ {
          "name" : "id",
          "required" : true,
          "description" : "Session ID",
          "in" : "path",
          "schema" : {
            "type" : "string",
            "format" : "uuid"
          }
        } ],
        "responses" : {
          "201" : {
            "description" : "Created",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SessionSettingsResponse"
                }
              }
            }
          }
        },
        "tags" : [ "Sessions" ]
      }
    },
    "/v1/merchants" : {
      "post" : {
        "summary" : "Create new merchant",
        "operationId" : "createMerchant",
        "parameters" : [ ],
        "requestBody" : {
          "required" : true,
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/MerchantRequest"
              },
              "example" : {
                "$ref" : "#/components/examples/MerchantRequest/value"
              }
            }
          }
        },
        "responses" : {
          "201" : {
            "description" : "Created",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/MerchantResponse"
                },
                "example" : {
                  "$ref" : "#/components/examples/MerchantResponse/value"
                }
              }
            }
          }
        },
        "tags" : [ "Merchants" ]
      },
      "get" : {
        "summary" : "List merchants",
        "operationId" : "listMerchants",
        "parameters" : [ {
          "in" : "query",
          "name" : "page",
          "schema" : {
            "type" : "string"
          },
          "required" : false,
          "description" : "page number"
        }, {
          "in" : "query",
          "name" : "limit",
          "schema" : {
            "type" : "string"
          },
          "required" : false,
          "description" : "total itens per page"
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/MerchantList"
                },
                "example" : {
                  "$ref" : "#/components/examples/MerchantList/value"
                }
              }
            }
          }
        },
        "tags" : [ "Merchants" ]
      }
    },
    "/v1/merchants/{id}" : {
      "get" : {
        "operationId" : "getMerchantById",
        "summary" : "Get merchant details",
        "parameters" : [ {
          "name" : "id",
          "required" : true,
          "description" : "Merchant ID",
          "in" : "path",
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/MerchantResponse"
                },
                "example" : {
                  "$ref" : "#/components/examples/MerchantResponse/value"
                }
              }
            }
          }
        },
        "tags" : [ "Merchants" ]
      },
      "delete" : {
        "summary" : "Delete merchant",
        "operationId" : "deleteMerchant",
        "parameters" : [ {
          "name" : "id",
          "required" : true,
          "in" : "path",
          "description" : "Merchant ID",
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "204" : {
            "description" : ""
          }
        },
        "tags" : [ "Merchants" ]
      }
    },
    "/v1/customers" : {
      "post" : {
        "summary" : "Create new customer",
        "operationId" : "createCustomer",
        "parameters" : [ ],
        "requestBody" : {
          "required" : true,
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/CustomerRequest"
              },
              "example" : {
                "$ref" : "#/components/examples/CustomerRequest/value"
              }
            }
          }
        },
        "responses" : {
          "201" : {
            "description" : "Created."
          }
        },
        "tags" : [ "Customers" ]
      },
      "get" : {
        "summary" : "List customers",
        "operationId" : "ListCustomers",
        "parameters" : [ {
          "in" : "query",
          "name" : "page",
          "schema" : {
            "type" : "string"
          },
          "required" : false,
          "description" : "page number"
        }, {
          "in" : "query",
          "name" : "limit",
          "schema" : {
            "type" : "string"
          },
          "required" : false,
          "description" : "total itens per page"
        }, {
          "in" : "query",
          "name" : "sort",
          "schema" : {
            "type" : "string",
            "enum" : [ "ASC", "DESC" ]
          },
          "required" : false,
          "description" : "ordering of items"
        }, {
          "in" : "query",
          "name" : "id",
          "schema" : {
            "type" : "string"
          },
          "required" : false,
          "description" : "customer identifier"
        }, {
          "in" : "query",
          "name" : "document.type",
          "schema" : {
            "type" : "string"
          },
          "required" : false,
          "description" : "document type"
        }, {
          "in" : "query",
          "name" : "document.number",
          "schema" : {
            "type" : "string"
          },
          "required" : false,
          "description" : "document number"
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/CustomerList"
                },
                "example" : {
                  "$ref" : "#/components/examples/CustomerList/value"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "tags" : [ "Customers" ]
      }
    },
    "/v1/customers/{id}" : {
      "get" : {
        "summary" : "Get customer details",
        "operationId" : "getCustomer",
        "parameters" : [ {
          "name" : "id",
          "required" : true,
          "description" : "Customer ID",
          "in" : "path",
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/CustomerResponse"
                },
                "example" : {
                  "$ref" : "#/components/examples/CustomerResponse/value"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "tags" : [ "Customers" ]
      },
      "delete" : {
        "operationId" : "deleteCustomer",
        "summary" : "Delete customer",
        "parameters" : [ {
          "name" : "id",
          "required" : true,
          "in" : "path",
          "description" : "Custome ID",
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : ""
          }
        },
        "tags" : [ "Customers" ]
      },
      "patch" : {
        "operationId" : "updateCustomer",
        "summary" : "Update customer",
        "parameters" : [ {
          "name" : "id",
          "required" : true,
          "in" : "path",
          "description" : "Customer ID",
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "required" : true,
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/UpdateCustomerRequest"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "The record has been successfully updated."
          }
        },
        "tags" : [ "Customers" ]
      }
    },
    "/v1/customers/{customer_id}/cards" : {
      "post" : {
        "operationId" : "linkCard",
        "summary" : "Add credit card to customers",
        "parameters" : [ {
          "name" : "customer_id",
          "required" : true,
          "description" : "Customer ID",
          "in" : "path",
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "required" : true,
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/LinkCardRequest"
              },
              "example" : {
                "$ref" : "#/components/examples/LinkCardRequest/value"
              }
            }
          }
        },
        "responses" : {
          "204" : {
            "description" : "The card has been linked successfully."
          }
        },
        "tags" : [ "Customers" ]
      },
      "get" : {
        "summary" : "List customer cards",
        "operationId" : "getCustomerCards",
        "parameters" : [ {
          "name" : "customer_id",
          "required" : true,
          "in" : "path",
          "description" : "Customer ID",
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/CustomerCardList"
                },
                "example" : {
                  "$ref" : "#/components/examples/CustomerCardList/value"
                }
              }
            }
          }
        },
        "tags" : [ "Customers" ]
      }
    },
    "/v1/webhooks" : {
      "post" : {
        "summary" : "Create new webhook",
        "operationId" : "createWebhook",
        "parameters" : [ ],
        "requestBody" : {
          "required" : true,
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/WebhookRequest"
              },
              "example" : {
                "$ref" : "#/components/examples/WebhookRequest/value"
              }
            }
          }
        },
        "responses" : {
          "201" : {
            "description" : "Created.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/WebhookResponse"
                },
                "example" : {
                  "$ref" : "#/components/examples/WebhookResponse/value"
                }
              }
            }
          }
        },
        "tags" : [ "Webhooks" ]
      },
      "get" : {
        "summary" : "List webhooks",
        "operationId" : "ListWebhooks",
        "parameters" : [ {
          "in" : "query",
          "name" : "page",
          "schema" : {
            "type" : "string"
          },
          "required" : false,
          "description" : "page number"
        }, {
          "in" : "query",
          "name" : "limit",
          "schema" : {
            "type" : "string"
          },
          "required" : false,
          "description" : "total itens per page"
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/WebhookList"
                },
                "example" : {
                  "$ref" : "#/components/examples/WebhookList/value"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "tags" : [ "Webhooks" ]
      }
    },
    "/v1/webhooks/{id}" : {
      "get" : {
        "summary" : "Get webhook details",
        "operationId" : "getWebhook",
        "parameters" : [ {
          "name" : "id",
          "required" : true,
          "description" : "Webhook ID",
          "in" : "path",
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/WebhookResponse"
                },
                "example" : {
                  "$ref" : "#/components/examples/WebhookResponse/value"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "tags" : [ "Webhooks" ]
      },
      "delete" : {
        "operationId" : "deleteWebhook",
        "summary" : "Delete webhook",
        "parameters" : [ {
          "name" : "id",
          "required" : true,
          "in" : "path",
          "description" : "Webhook ID",
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : ""
          }
        },
        "tags" : [ "Webhooks" ]
      },
      "patch" : {
        "operationId" : "updateWebhook",
        "summary" : "Update webhook",
        "parameters" : [ {
          "name" : "id",
          "required" : true,
          "in" : "path",
          "description" : "Webhook ID",
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "required" : true,
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/WebhookRequest"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "The record has been successfully updated."
          }
        },
        "tags" : [ "Webhooks" ]
      }
    }
  },
  "security" : [ {
    "X-Client-ID" : [ ],
    "X-Api-Key" : [ ]
  } ],
  "components" : {
    "securitySchemes" : {
      "X-Client-ID" : {
        "type" : "apiKey",
        "in" : "header",
        "name" : "X-Client-Id"
      },
      "X-Api-Key" : {
        "type" : "apiKey",
        "in" : "header",
        "name" : "X-Api-Key"
      }
    },
    "schemas" : {
      "PaymentMethodCard" : {
        "type" : "object",
        "properties" : {
          "paymentType" : {
            "type" : "string",
            "enum" : [ "credit", "debit" ],
            "description" : "Credit/Debit card charge method"
          },
          "installments" : {
            "type" : "integer",
            "description" : "Installments quantity for credit payments"
          }
        },
        "required" : [ "paymentType" ]
      },
      "PaymentMethodPix" : {
        "properties" : {
          "paymentType" : {
            "type" : "string",
            "enum" : [ "pix" ],
            "description" : "Pix charge, the source must be a valid customer"
          },
          "expiresIn" : {
            "type" : "number",
            "description" : "Time in seconds that defines the validity of the charge"
          }
        },
        "required" : [ "paymentType", "expiresIn" ]
      },
      "SessionPaymentMethodCard" : {
        "type" : "object",
        "properties" : {
          "paymentType" : {
            "type" : "string",
            "enum" : [ "credit", "debit" ],
            "description" : "Credit/Debit card charge method"
          },
          "installments" : {
            "type" : "integer",
            "description" : "Installments quantity for credit payments"
          }
        },
        "required" : [ "paymentType" ]
      },
      "SessionPaymentMethodPix" : {
        "properties" : {
          "paymentType" : {
            "type" : "string",
            "enum" : [ "pix" ],
            "description" : "Pix charge, the source must be a valid customer"
          },
          "expiresIn" : {
            "type" : "number",
            "description" : "Time in seconds that defines the validity of the charge"
          }
        },
        "required" : [ "paymentType", "expiresIn" ]
      },
      "SessionChargeResponse" : {
        "properties" : {
          "id" : {
            "type" : "string",
            "description" : "ChargeResponse ID"
          },
          "clientId" : {
            "type" : "string",
            "format" : "uuid",
            "description" : "Client identification on Malga"
          },
          "merchantId" : {
            "type" : "string",
            "format" : "uuid",
            "description" : "Merchant identification used in charge"
          },
          "description" : {
            "type" : "string",
            "description" : "Short description"
          },
          "orderId" : {
            "type" : "string",
            "description" : "Unique identification of order in your side to help future conciliation"
          },
          "createdAt" : {
            "type" : "string",
            "description" : "Created date"
          },
          "amount" : {
            "type" : "integer",
            "description" : "Transaction amount in cents, example 100 to charge R$ 1.00"
          },
          "originalAmount" : {
            "type" : "integer",
            "description" : "Transaction original amount in cents, example 100 to charge R$ 1.00"
          },
          "currency" : {
            "type" : "string",
            "description" : "Currency code to be used in charge, ISO 4217 format (see table of types)",
            "default" : "BRL"
          },
          "statementDescriptor" : {
            "type" : "string",
            "description" : "Description to be displayed on the buyer's bank statement"
          },
          "status" : {
            "type" : "string",
            "enum" : [ "created", "paid", "canceled", "voided" ],
            "description" : "Session status"
          },
          "paymentMethod" : {
            "oneOf" : [ {
              "$ref" : "#/components/schemas/PaymentMethodCard"
            }, {
              "$ref" : "#/components/schemas/PaymentMethodPixResponse"
            }, {
              "$ref" : "#/components/schemas/PaymentMethodBoletoResponse"
            } ]
          },
          "paymentSource" : {
            "oneOf" : [ {
              "$ref" : "#/components/schemas/SourceTypeCard"
            }, {
              "$ref" : "#/components/schemas/SourceTypeToken"
            }, {
              "$ref" : "#/components/schemas/SourceTypeCustomer"
            } ]
          },
          "transactionRequests" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/TransactionRequest"
            }
          }
        }
      },
      "SessionChargeRequest" : {
        "properties" : {
          "customerId" : {
            "type" : "string",
            "format" : "uuid",
            "description" : "Customer identification"
          },
          "paymentMethod" : {
            "description" : "Payment method to be used",
            "oneOf" : [ {
              "$ref" : "#/components/schemas/SessionPaymentMethodCard"
            }, {
              "$ref" : "#/components/schemas/SessionPaymentMethodPix"
            }, {
              "$ref" : "#/components/schemas/SessionPaymentMethodBoleto"
            } ]
          },
          "paymentSource" : {
            "oneOf" : [ {
              "$ref" : "#/components/schemas/SessionSourceTypeCard"
            }, {
              "$ref" : "#/components/schemas/SessionSourceTypeCardOneShot"
            }, {
              "$ref" : "#/components/schemas/SessionSourceTypeToken"
            }, {
              "$ref" : "#/components/schemas/SessionSourceTypeCustomer"
            }, {
              "$ref" : "#/components/schemas/SessionSourceTypeCustomerOneShot"
            } ]
          },
          "fraudAnalysis" : {
            "description" : "Additional parameters for fraud analysis, required by provider's anti-fraud",
            "allOf" : [ {
              "$ref" : "#/components/schemas/FraudAnalysisRequest"
            } ]
          },
          "splitRules" : {
            "description" : "Additional parameters for transacting with Split",
            "allOf" : [ {
              "$ref" : "#/components/schemas/SplitRules"
            } ]
          }
        },
        "required" : [ "paymentMethod", "paymentSource" ]
      },
      "UpdateSessionResponse" : {
        "properties" : {
          "id" : {
            "type" : "string",
            "description" : "Session ID"
          },
          "isActive" : {
            "type" : "boolean",
            "description" : "Whether the session is active"
          }
        }
      },
      "CancelSessionResponse" : {
        "properties" : {
          "id" : {
            "type" : "string",
            "description" : "Session ID"
          },
          "status" : {
            "type" : "string",
            "enum" : [ "created", "paid", "canceled", "voided" ],
            "description" : "Session status"
          }
        }
      },
      "SessionRequest" : {
        "properties" : {
          "orderId" : {
            "type" : "string",
            "description" : "Unique identification of order in your side to help future conciliation"
          },
          "amount" : {
            "type" : "integer",
            "description" : "Transaction amount in cents, example 100 to charge R$ 1.00"
          },
          "currency" : {
            "type" : "string",
            "default" : "BRL",
            "description" : "Currency code to be used in charge, ISO 4217 format (see table of types)"
          },
          "isActive" : {
            "type" : "boolean",
            "description" : "Whether the session is active"
          },
          "capture" : {
            "type" : "boolean",
            "description" : "Whether the transaction should be captured automatically"
          },
          "merchantId" : {
            "type" : "string",
            "description" : "Merchant identification used in charge"
          },
          "dueDate" : {
            "type" : "string",
            "description" : "Session expiration date"
          },
          "name" : {
            "type" : "string",
            "description" : "Session name"
          },
          "description" : {
            "type" : "string",
            "description" : "Session description"
          },
          "statementDescriptor" : {
            "type" : "string",
            "description" : "Description to be displayed on the buyer's bank statement"
          },
          "createLink" : {
            "type" : "boolean",
            "description" : "Whether the session has a Payment Link"
          },
          "paymentMethods" : {
            "description" : "Payment methods available on this session",
            "anyOf" : [ {
              "$ref" : "#/components/schemas/SessionPaymentMethodCard"
            }, {
              "$ref" : "#/components/schemas/SessionPaymentMethodPix"
            }, {
              "$ref" : "#/components/schemas/SessionPaymentMethodBoleto"
            } ]
          },
          "items" : {
            "type" : "array",
            "description" : "Order items",
            "items" : {
              "$ref" : "#/components/schemas/SessionItemObject"
            }
          }
        },
        "required" : [ "amount", "name", "merchantId", "dueDate", "paymentMethods", "items" ]
      },
      "SessionResponse" : {
        "properties" : {
          "id" : {
            "type" : "string",
            "description" : "Session ID"
          },
          "name" : {
            "type" : "string",
            "description" : "Session name"
          },
          "status" : {
            "type" : "string",
            "enum" : [ "created", "paid", "canceled", "voided" ],
            "description" : "Session status"
          },
          "isActive" : {
            "type" : "boolean",
            "description" : "Whether the session is active"
          },
          "clientId" : {
            "type" : "string",
            "description" : "Client identification on Malga"
          },
          "orderId" : {
            "type" : "string",
            "description" : "Unique identification of order in your side to help future conciliation"
          },
          "amount" : {
            "type" : "integer",
            "description" : "Transaction amount in cents, example 100 to charge R$ 1.00"
          },
          "currency" : {
            "type" : "string",
            "description" : "Currency code to be used in charge, ISO 4217 format (see table of types)"
          },
          "capture" : {
            "type" : "boolean",
            "description" : "Whether the transaction should be captured automatically"
          },
          "merchantId" : {
            "type" : "string",
            "description" : "Merchant identification used in charge"
          },
          "dueDate" : {
            "type" : "string",
            "description" : "Session expiration date"
          },
          "description" : {
            "type" : "string",
            "description" : "Session description"
          },
          "statementDescriptor" : {
            "type" : "string",
            "description" : "Description to be displayed on the buyer's bank statement"
          },
          "items" : {
            "type" : "array",
            "description" : "Order items",
            "items" : {
              "$ref" : "#/components/schemas/SessionItemObject"
            }
          },
          "paymentLink" : {
            "type" : "string",
            "description" : "Link to access Payment Link of this session"
          },
          "paymentMethods" : {
            "type" : "array",
            "description" : "Payment methods available on this session",
            "anyOf" : [ {
              "$ref" : "#/components/schemas/SessionPaymentMethodCard"
            }, {
              "$ref" : "#/components/schemas/SessionPaymentMethodPixResponse"
            }, {
              "$ref" : "#/components/schemas/SessionPaymentMethodBoletoResponse"
            } ]
          },
          "createdAt" : {
            "type" : "string",
            "description" : "Created date"
          },
          "updatedAt" : {
            "type" : "string",
            "description" : "Updated date"
          },
          "publicKey" : {
            "type" : "string",
            "description" : "Access key with limited scope, must be used to pay the session"
          }
        }
      },
      "SessionItemObject" : {
        "properties" : {
          "name" : {
            "type" : "string",
            "description" : "Session item name"
          },
          "description" : {
            "type" : "string",
            "description" : "Session item description"
          },
          "unitPrice" : {
            "type" : "number",
            "description" : "Item unit amount in cents, example 100 to charge R$ 1.00"
          },
          "quantity" : {
            "type" : "number",
            "description" : "Item quantity"
          },
          "tangible" : {
            "type" : "boolean",
            "description" : "Whether the item is tangible"
          }
        }
      },
      "SessionHistoryResponse" : {
        "type" : "array",
        "items" : {
          "$ref" : "#/components/schemas/SessionHistoryItem"
        }
      },
      "SessionHistoryItem" : {
        "type" : "object",
        "properties" : {
          "status" : {
            "type" : "string",
            "enum" : [ "created", "paid", "canceled", "voided" ],
            "description" : "Status da sessão"
          },
          "id" : {
            "type" : "string",
            "description" : "Session ID"
          },
          "createdAt" : {
            "type" : "string",
            "description" : "Created date"
          },
          "updatedAt" : {
            "type" : "string",
            "description" : "Updated date"
          }
        }
      },
      "SessionSettingsResponse" : {
        "properties" : {
          "id" : {
            "type" : "string",
            "description" : "Session ID"
          },
          "name" : {
            "type" : "string",
            "description" : "Session name"
          },
          "status" : {
            "type" : "string",
            "enum" : [ "created", "paid", "canceled", "voided" ],
            "description" : "Session status"
          },
          "isActive" : {
            "type" : "boolean",
            "description" : "Whether the session is active"
          },
          "clientId" : {
            "type" : "string",
            "description" : "Client identification on Malga"
          },
          "orderId" : {
            "type" : "string",
            "description" : "Unique identification of order in your side to help future conciliation"
          },
          "amount" : {
            "type" : "integer",
            "description" : "Transaction amount in cents, example 100 to charge R$ 1.00"
          },
          "currency" : {
            "type" : "string",
            "description" : "Currency code to be used in charge, ISO 4217 format (see table of types)"
          },
          "capture" : {
            "type" : "boolean",
            "description" : "Whether the transaction should be captured automatically"
          },
          "merchantId" : {
            "type" : "string",
            "description" : "Merchant identification used in charge"
          },
          "dueDate" : {
            "type" : "string",
            "description" : "Session expiration date"
          },
          "description" : {
            "type" : "string",
            "description" : "Session description"
          },
          "statementDescriptor" : {
            "type" : "string",
            "description" : "Description to be displayed on the buyer's bank statement"
          },
          "items" : {
            "type" : "array",
            "description" : "Order items",
            "items" : {
              "$ref" : "#/components/schemas/SessionItemObject"
            }
          },
          "paymentLink" : {
            "type" : "string",
            "description" : "Link to access Payment Link of this session"
          },
          "paymentMethods" : {
            "type" : "array",
            "description" : "Payment methods available on this session",
            "anyOf" : [ {
              "$ref" : "#/components/schemas/SessionPaymentMethodCard"
            }, {
              "$ref" : "#/components/schemas/SessionPaymentMethodPixResponse"
            }, {
              "$ref" : "#/components/schemas/SessionPaymentMethodBoletoResponse"
            } ]
          },
          "createdAt" : {
            "type" : "string",
            "description" : "Created date"
          },
          "updatedAt" : {
            "type" : "string",
            "description" : "Updated date"
          },
          "publicKey" : {
            "type" : "string",
            "description" : "Access key with limited scope, must be used to pay the session"
          },
          "settings" : {
            "type" : "object",
            "description" : "Company settings",
            "$ref" : "#/components/schemas/UserSettings"
          }
        }
      },
      "UserSettings" : {
        "properties" : {
          "id" : {
            "type" : "string",
            "format" : "uuid",
            "description" : "Company settings ID"
          },
          "email" : {
            "type" : "string",
            "format" : "email",
            "description" : "Company e-mail"
          },
          "phone" : {
            "type" : "string",
            "format" : "phone",
            "description" : "Company phone"
          },
          "statementDescription" : {
            "type" : "string",
            "description" : "Description to be displayed on buyer's invoice"
          },
          "logo" : {
            "type" : "string",
            "format" : "uri",
            "description" : "Company logo URL"
          },
          "mainColor" : {
            "type" : "string",
            "description" : "Main color"
          },
          "secondaryColor" : {
            "type" : "string",
            "description" : "Secondary color"
          },
          "attentionColor" : {
            "type" : "string",
            "description" : "Attention color"
          },
          "errorColor" : {
            "type" : "string",
            "description" : "Error message color"
          },
          "successColor" : {
            "type" : "string",
            "description" : "Success message color"
          },
          "backgroundColor" : {
            "type" : "string",
            "description" : "Background color"
          },
          "companyName" : {
            "type" : "string",
            "description" : "Company name"
          },
          "clientId" : {
            "type" : "string",
            "description" : "Client identification on Malga"
          },
          "documentNumber" : {
            "type" : "string",
            "description" : "Document number registered on company account"
          },
          "language" : {
            "type" : "string",
            "description" : "Default company language"
          }
        }
      },
      "TokenResponse" : {
        "properties" : {
          "id" : {
            "type" : "string",
            "description" : "Token id"
          },
          "clientId" : {
            "type" : "string",
            "description" : "client identification on Malga"
          },
          "createdAt" : {
            "type" : "string",
            "description" : "Token created date"
          },
          "updatedAt" : {
            "type" : "string",
            "description" : "Token updated date"
          }
        }
      },
      "ChargeResponse" : {
        "properties" : {
          "id" : {
            "type" : "string",
            "description" : "Charge ID"
          },
          "clientId" : {
            "type" : "string",
            "description" : "client identification on Malga"
          },
          "merchantId" : {
            "type" : "string",
            "description" : "merchant identification used in charge"
          },
          "customerId" : {
            "type" : "string",
            "description" : "customer identification"
          },
          "description" : {
            "type" : "string",
            "description" : "short description"
          },
          "amount" : {
            "type" : "integer",
            "description" : "transaction amount in cents, example 100 to charge R$ 1.00"
          },
          "originalAmount" : {
            "type" : "integer",
            "description" : "transaction orignal amount in cents, example 100 to charge R$ 1.00"
          },
          "currency" : {
            "type" : "string",
            "description" : "currency code to be used in charge, ISO 4217 format (see table of types).",
            "default" : "BRL"
          },
          "statementDescriptor" : {
            "type" : "string",
            "description" : "description to be displayed on the buyer's bank statement"
          },
          "capture" : {
            "type" : "boolean",
            "description" : "whether the transaction should be captured automatically"
          },
          "status" : {
            "type" : "string",
            "description" : "charge status on Malga",
            "enum" : [ "pending", "pre_authorized", "authorized", "failed", "canceled", "voided", "refund_pending", "charged_back" ]
          },
          "orderId" : {
            "type" : "string",
            "description" : "Unique identification of order in your side to help future conciliation"
          },
          "paymentMethod" : {
            "oneOf" : [ {
              "$ref" : "#/components/schemas/PaymentMethodCard"
            }, {
              "$ref" : "#/components/schemas/PaymentMethodPixResponse"
            }, {
              "$ref" : "#/components/schemas/PaymentMethodBoletoResponse"
            } ]
          },
          "paymentSource" : {
            "oneOf" : [ {
              "$ref" : "#/components/schemas/SourceTypeCard"
            }, {
              "$ref" : "#/components/schemas/SourceTypeCardOneShot"
            }, {
              "$ref" : "#/components/schemas/SourceTypeToken"
            }, {
              "$ref" : "#/components/schemas/SourceTypeCustomer"
            } ]
          },
          "createdAt" : {
            "type" : "string",
            "description" : "Created date"
          },
          "updatedAt" : {
            "type" : "string",
            "description" : "Updated date"
          },
          "fraudAnalysisMetadata" : {
            "description" : "Additional parameters for fraud analysis",
            "allOf" : [ {
              "$ref" : "#/components/schemas/FraudAnalysisMetadata"
            } ]
          },
          "transactionRequests" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/TransactionRequest"
            }
          }
        }
      },
      "TransactionRequest" : {
        "properties" : {
          "id" : {
            "type" : "string",
            "description" : "unique identification of request on the provider"
          },
          "providerId" : {
            "type" : "string",
            "description" : "provider identification related to your merchant id"
          },
          "providerType" : {
            "type" : "string",
            "description" : "provider code, see table of supported providers"
          },
          "idempotencyKey" : {
            "type" : "string",
            "description" : "unique identification automatically created by Malga for each request, used to assure idempotency and avoid duplicity, could be used to get transactions in the provider's API or dashboard."
          },
          "authorizationNsu" : {
            "type" : "string",
            "description" : "authorization number retunred by provider",
            "deprecated" : true
          },
          "transactionId" : {
            "type" : "string",
            "description" : "unique identification of transaction on provider, could be used to get transaction in the provider's API."
          },
          "requestType" : {
            "type" : "string",
            "enum" : [ "pending", "authorization", "pre_authorization", "void", "capture", "probe", "charge_back", "zero_dollar", "anti_fraud" ],
            "description" : "type of request performed on provider"
          },
          "requestStatus" : {
            "type" : "string",
            "enum" : [ "running", "failed", "success", "timeout", "internal_error", "processing" ],
            "description" : "status of request processing"
          },
          "amount" : {
            "type" : "integer",
            "description" : "transaction request amount sent to provider, for partial capture/refund the amount could be different from original transaction amount"
          },
          "responseTs" : {
            "type" : "string",
            "description" : "total spent time in request processing"
          },
          "providerError" : {
            "type" : "object",
            "description" : "transaction requet error details",
            "properties" : {
              "message" : {
                "type" : "string",
                "description" : "error message mapped by Malga that describes declined reason"
              },
              "declinedCode" : {
                "type" : "string",
                "description" : "error code mapped by plyg based in the declined code returned by provider"
              },
              "retryable" : {
                "type" : "boolean",
                "description" : "declined code can be or not retried"
              },
              "networkDeniedReason" : {
                "type" : "string",
                "description" : "declined code returned as is from the provider, check in the provider's documentation"
              },
              "networkDeniedMessage" : {
                "type" : "string",
                "description" : "declined message returned as is from the provider"
              }
            }
          },
          "providerAuthorization" : {
            "type" : "object",
            "description" : "additional data returned by provider",
            "properties" : {
              "networkAuthorizationCode" : {
                "type" : "string",
                "description" : "authorization code as returned by provider"
              },
              "networkResponseCode" : {
                "type" : "string",
                "description" : "response code as returned by provider"
              }
            }
          },
          "createdAt" : {
            "type" : "string",
            "description" : "Created date of request"
          },
          "updatedAt" : {
            "type" : "string",
            "description" : "Updated date of request"
          }
        }
      },
      "ChargeRequest" : {
        "properties" : {
          "merchantId" : {
            "type" : "string",
            "description" : "merchant identification to be used in transaction and define the routing rule."
          },
          "amount" : {
            "type" : "integer",
            "description" : "transaction amount in cents, example 100 to charge R$ 1.00"
          },
          "currency" : {
            "type" : "string",
            "description" : "currency code to be used in charge, ISO 4217 format (see table of types).",
            "default" : "BRL"
          },
          "statementDescriptor" : {
            "type" : "string",
            "description" : "description to be displayed on the buyer's bank statement"
          },
          "capture" : {
            "type" : "boolean",
            "description" : "whether the transaction should be captured automatically"
          },
          "orderId" : {
            "type" : "string",
            "description" : "Unique identification of order in your side to help future conciliation"
          },
          "description" : {
            "type" : "string",
            "description" : "Short description to help future conciliation"
          },
          "customerId" : {
            "type" : "string",
            "description" : "Customer identification to help future conciliation"
          },
          "paymentMethod" : {
            "description" : "Payment method to be used",
            "oneOf" : [ {
              "$ref" : "#/components/schemas/PaymentMethodCard"
            }, {
              "$ref" : "#/components/schemas/PaymentMethodPix"
            }, {
              "$ref" : "#/components/schemas/PaymentMethodBoleto"
            } ]
          },
          "paymentSource" : {
            "oneOf" : [ {
              "$ref" : "#/components/schemas/SourceTypeCard"
            }, {
              "$ref" : "#/components/schemas/SourceTypeCardOneShot"
            }, {
              "$ref" : "#/components/schemas/SourceTypeToken"
            }, {
              "$ref" : "#/components/schemas/SourceTypeCustomer"
            }, {
              "$ref" : "#/components/schemas/SourceTypeCustomerOneShot"
            } ]
          },
          "fraudAnalysis" : {
            "description" : "Additional parameters for fraud analysis, required by provider's anti-fraud",
            "allOf" : [ {
              "$ref" : "#/components/schemas/FraudAnalysisRequest"
            } ]
          }
        },
        "required" : [ "amount", "merchantId", "paymentMethod", "paymentSource" ]
      },
      "FraudAnalysisRequest" : {
        "properties" : {
          "customer" : {
            "description" : "customer (payeer) data",
            "type" : "object",
            "properties" : {
              "name" : {
                "type" : "string",
                "description" : "customer name"
              },
              "email" : {
                "type" : "string",
                "description" : "customer email"
              },
              "phone" : {
                "type" : "string",
                "description" : "customer phone number"
              },
              "identityType" : {
                "type" : "string",
                "description" : "document type, see table of types"
              },
              "identity" : {
                "type" : "string",
                "description" : "document number"
              },
              "registrationDate" : {
                "type" : "string",
                "description" : "customer registration date"
              },
              "deliveryAddress" : {
                "description" : "Delivery customer address",
                "allOf" : [ {
                  "$ref" : "#/components/schemas/FraudAnalysisAddress"
                } ]
              },
              "billingAddress" : {
                "description" : "Billing customer address",
                "allOf" : [ {
                  "$ref" : "#/components/schemas/FraudAnalysisAddress"
                } ]
              },
              "browser" : {
                "description" : "information about customer browser",
                "allOf" : [ {
                  "$ref" : "#/components/schemas/FraudAnalysisCustomerBrowser"
                } ]
              }
            }
          },
          "cart" : {
            "description" : "Cart of products details",
            "type" : "object",
            "properties" : {
              "items" : {
                "type" : "array",
                "items" : {
                  "type" : "object",
                  "properties" : {
                    "name" : {
                      "type" : "string",
                      "description" : "product name"
                    },
                    "quantity" : {
                      "type" : "integer",
                      "description" : "itens of product purchased"
                    },
                    "sku" : {
                      "type" : "string",
                      "description" : "unique product identification on store"
                    },
                    "unitPrice" : {
                      "type" : "integer",
                      "description" : "unit price of product in cents"
                    },
                    "risk" : {
                      "type" : "string",
                      "enum" : [ "high", "low" ],
                      "description" : "product risk of fraud"
                    },
                    "description" : {
                      "type" : "string",
                      "description" : "product description"
                    },
                    "categoryId" : {
                      "type" : "string",
                      "description" : "category which product belongs to"
                    }
                  }
                }
              }
            }
          },
          "device" : {
            "description" : "Customer device details",
            "type" : "object",
            "properties" : {
              "os" : {
                "type" : "object",
                "properties" : {
                  "type" : {
                    "type" : "string",
                    "description" : "Operational system type"
                  },
                  "version" : {
                    "type" : "string",
                    "description" : "Operational system version"
                  }
                }
              },
              "model" : {
                "type" : "string",
                "description" : "Device model"
              },
              "ramCapacity" : {
                "type" : "integer",
                "description" : "Device ram capacity"
              },
              "diskCapacity" : {
                "type" : "integer",
                "description" : "Device disk capacity"
              },
              "freeDiskSpace" : {
                "type" : "integer",
                "description" : "Device disk space still free"
              },
              "resolution" : {
                "type" : "integer",
                "description" : "Device resolution"
              },
              "vendors" : {
                "type" : "array",
                "items" : {
                  "type" : "object",
                  "properties" : {
                    "name" : {
                      "type" : "string",
                      "description" : "Vendor attribute name"
                    },
                    "value" : {
                      "type" : "string",
                      "description" : "Vendor attribute value"
                    }
                  }
                }
              },
              "vendorAttributes" : {
                "description" : "Device attributes by vendor",
                "type" : "object",
                "properties" : {
                  "flash" : {
                    "type" : "boolean",
                    "description" : "Device has flash"
                  },
                  "phoneCalls" : {
                    "type" : "boolean",
                    "description" : "Device can make phone calls"
                  },
                  "sendSms" : {
                    "type" : "boolean",
                    "description" : "Device can send sms"
                  },
                  "videoCamera" : {
                    "type" : "boolean",
                    "description" : "Device has video camera"
                  },
                  "cpuCount" : {
                    "type" : "integer",
                    "description" : "Device cpu count"
                  },
                  "simulator" : {
                    "type" : "boolean",
                    "description" : "Device has simulator"
                  },
                  "language" : {
                    "type" : "string",
                    "description" : "Device language"
                  },
                  "idiom" : {
                    "type" : "string",
                    "description" : "Device idiom"
                  },
                  "platform" : {
                    "type" : "string",
                    "description" : "System platform"
                  },
                  "name" : {
                    "type" : "string",
                    "description" : "Device name"
                  },
                  "family" : {
                    "type" : "string",
                    "description" : "Device family"
                  },
                  "retinaDisplay" : {
                    "type" : "boolean",
                    "description" : "Device has retina display"
                  },
                  "camera" : {
                    "type" : "boolean",
                    "description" : "Device has camera"
                  },
                  "model" : {
                    "type" : "string",
                    "description" : "Device model"
                  },
                  "frontCamera" : {
                    "type" : "boolean",
                    "description" : "Device has front camera"
                  }
                }
              }
            }
          }
        }
      },
      "FraudAnalysisAddress" : {
        "type" : "object",
        "properties" : {
          "country" : {
            "type" : "string",
            "description" : "formated in ISO 3166-1 alpha-2"
          },
          "state" : {
            "type" : "string",
            "description" : "address state"
          },
          "city" : {
            "type" : "string",
            "description" : "address city"
          },
          "district" : {
            "type" : "string",
            "description" : "address district or neighboor"
          },
          "zipCode" : {
            "type" : "string",
            "description" : "zip code"
          },
          "street" : {
            "type" : "string",
            "description" : "street address"
          },
          "number" : {
            "type" : "string",
            "description" : "street number address"
          },
          "complement" : {
            "type" : "string",
            "description" : "apartament number or address complement"
          }
        }
      },
      "FraudAnalysisMetadata" : {
        "type" : "object",
        "properties" : {
          "customer" : {
            "description" : "customer (payeer) data",
            "type" : "object",
            "properties" : {
              "name" : {
                "type" : "string",
                "description" : "customer name"
              },
              "email" : {
                "type" : "string",
                "description" : "customer email"
              },
              "phone" : {
                "type" : "string",
                "description" : "customer phone number"
              },
              "identityType" : {
                "type" : "string",
                "description" : "document type, see table of types"
              },
              "identity" : {
                "type" : "string",
                "description" : "document number"
              },
              "registrationDate" : {
                "type" : "string",
                "description" : "customer registration date"
              },
              "deliveryAddress" : {
                "description" : "Endereço de entrega",
                "allOf" : [ {
                  "$ref" : "#/components/schemas/FraudAnalysisAddress"
                } ]
              },
              "billingAddress" : {
                "description" : "Endereço de cobrança",
                "allOf" : [ {
                  "$ref" : "#/components/schemas/FraudAnalysisAddress"
                } ]
              }
            }
          },
          "cart" : {
            "description" : "Cart of products details",
            "type" : "object",
            "properties" : {
              "items" : {
                "type" : "array",
                "items" : {
                  "type" : "object",
                  "properties" : {
                    "name" : {
                      "type" : "string",
                      "description" : "product name"
                    },
                    "quantity" : {
                      "type" : "integer",
                      "description" : "itens of product purchased"
                    },
                    "sku" : {
                      "type" : "string",
                      "description" : "unique product identification on store"
                    },
                    "unitPrice" : {
                      "type" : "integer",
                      "description" : "unit price of product in cents"
                    },
                    "risk" : {
                      "type" : "string",
                      "enum" : [ "high", "low" ],
                      "description" : "product risk of fraud"
                    },
                    "description" : {
                      "type" : "string",
                      "description" : "product description"
                    },
                    "categoryId" : {
                      "type" : "string",
                      "description" : "category which product belongs to"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "FraudAnalysisCustomerBrowser" : {
        "type" : "object",
        "properties" : {
          "browserFingerprint" : {
            "type" : "string",
            "description" : "fingerprint id generated by browser"
          },
          "cookiesAccepted" : {
            "type" : "boolean",
            "description" : "indicates if cookies has been accepeted"
          },
          "email" : {
            "type" : "string",
            "description" : "logged email address"
          },
          "hostName" : {
            "type" : "string",
            "description" : "user's computer hostname"
          },
          "ipAddress" : {
            "type" : "string",
            "description" : "user's ip address"
          },
          "type" : {
            "type" : "string",
            "description" : "browser's user-agent"
          }
        }
      },
      "VoidRequest" : {
        "properties" : {
          "amount" : {
            "type" : "integer",
            "description" : "the value to be refunded in cents cannot be greater than the transaction value, example 100 to charge R$ 1.00"
          },
          "delayToCompose" : {
            "type" : "integer",
            "description" : "number of days to compose the refunded value. It is only used in NuPay integrations."
          }
        }
      },
      "UpdateChargeStatusRequest" : {
        "properties" : {
          "status" : {
            "type" : "string",
            "description" : "transaction status",
            "enum" : [ "pending", "pre_authorized", "authorized", "failed", "canceled", "voided", "charged_back", "created", "processed", "capture_pending", "refund_pending" ]
          }
        }
      },
      "CaptureRequest" : {
        "properties" : {
          "amount" : {
            "type" : "integer",
            "description" : "the value to be captured in cents cannot be greater than the transaction value, example 100 to charge R$ 1.00"
          }
        }
      },
      "SourceTypeCard" : {
        "type" : "object",
        "description" : "identificação do merchant id a ser utilizado",
        "properties" : {
          "sourceType" : {
            "type" : "string",
            "description" : "tipo da origem da cobrança, usar `card` para cobrança em cartão tokenizado",
            "enum" : [ "card" ]
          },
          "cardId" : {
            "type" : "string",
            "description" : "Identificador do cartão quando source tipo card (opcional)"
          }
        },
        "required" : [ "sourceType", "cardId" ]
      },
      "SourceTypeToken" : {
        "type" : "object",
        "properties" : {
          "sourceType" : {
            "type" : "string",
            "description" : "tipo da origem da cobrança, usar `token` para cobrança no token gerado",
            "enum" : [ "token" ]
          },
          "tokenId" : {
            "type" : "string",
            "description" : "Identificador do token quando source tipo token (opcional)"
          }
        },
        "required" : [ "sourceType", "tokenId" ]
      },
      "SourceTypeCustomer" : {
        "type" : "object",
        "properties" : {
          "sourceType" : {
            "type" : "string",
            "description" : "tipo da origem da cobrança, usar `customer` para cobrança no cartão default do comprador",
            "enum" : [ "customer" ]
          },
          "customerId" : {
            "type" : "string",
            "description" : "Identificador do cliente quando source tipo customer, debitando o cartão default do comprador"
          }
        },
        "required" : [ "sourceType", "customerId" ]
      },
      "SourceTypeCustomerOneShot" : {
        "type" : "object",
        "properties" : {
          "sourceType" : {
            "type" : "string",
            "description" : "tipo da origem da cobrança, usar `customer` para cobrança no cartão default do comprador",
            "enum" : [ "customer" ]
          },
          "customer" : {
            "type" : "object",
            "properties" : {
              "name" : {
                "type" : "string",
                "description" : "nome do usuario"
              },
              "email" : {
                "type" : "string",
                "description" : "email do usuario"
              },
              "phoneNumber" : {
                "type" : "string",
                "description" : "telefone de contato do usuario"
              },
              "document" : {
                "allOf" : [ {
                  "$ref" : "#/components/schemas/Document"
                } ]
              },
              "address" : {
                "allOf" : [ {
                  "$ref" : "#/components/schemas/Address"
                } ]
              }
            }
          }
        },
        "required" : [ "sourceType", "customerId", "email", "phoneNumber", "document" ]
      },
      "SourceTypeCardOneShot" : {
        "type" : "object",
        "properties" : {
          "sourceType" : {
            "type" : "string",
            "description" : "tipo da origem da cobrança, usar `card` para cobrança direta no cartão",
            "enum" : [ "card" ]
          },
          "card" : {
            "type" : "object",
            "properties" : {
              "cardHolderName" : {
                "type" : "string",
                "description" : "Nome do portador do cartão quando cobrança sem tokenização"
              },
              "cardNumber" : {
                "type" : "string",
                "description" : "Número do cartão quando cobrança sem tokenização"
              },
              "cardCvv" : {
                "type" : "string",
                "description" : "Código de verificação cobrança sem tokenização"
              },
              "cardExpirationDate" : {
                "type" : "string",
                "description" : "Mês e ano de validade no formato MM/YYYY quando cobrança sem tokenização"
              }
            }
          }
        },
        "required" : [ "sourceType", "cardHolderName", "cardNumber", "cardCvv", "cardExpirationDate" ]
      },
      "PaymentMethodBoleto" : {
        "properties" : {
          "paymentType" : {
            "type" : "string",
            "enum" : [ "boleto" ],
            "description" : "Boleto charge, the source must be a valid customer."
          },
          "expiresDate" : {
            "type" : "string",
            "description" : "Boleto due date, ISO-Date, ex 2017-01-31"
          },
          "instructions" : {
            "type" : "string",
            "description" : "Boleto instructions field. Maximum 255 characters. Use \\n for line break"
          },
          "interest" : {
            "type" : "object",
            "description" : "Optional informations of the fees for delay payment",
            "properties" : {
              "days" : {
                "type" : "integer",
                "description" : "Days after the expiration of the boleto when interest must be charged"
              },
              "amount" : {
                "type" : "integer",
                "description" : "Amount in cents of the interest rate that will be charged peer day"
              },
              "percentage" : {
                "type" : "number",
                "description" : "Amount in percentage of the interest rate that will be charged peer month"
              }
            }
          },
          "fine" : {
            "type" : "object",
            "description" : "Optional information of the fine condition for delay payment",
            "properties" : {
              "days" : {
                "type" : "integer",
                "description" : "Days after the boleto expiration when the fine must be charged"
              },
              "amount" : {
                "type" : "integer",
                "description" : "Fine amount in cents"
              },
              "percentage" : {
                "type" : "number",
                "description" : "Fine amount in percentage"
              }
            }
          }
        },
        "required" : [ "paymentType" ]
      },
      "PaymentMethodPixResponse" : {
        "properties" : {
          "paymentType" : {
            "type" : "string",
            "enum" : [ "pix" ],
            "description" : "método da cobrança via PIX, o source deve ser um customer válido."
          },
          "expiresIn" : {
            "type" : "number",
            "description" : "tempo em segundos que define a validade da cobrança."
          },
          "qrCodeData" : {
            "type" : "string",
            "description" : "código copia e cola para o QR code dinâmico gerado, pronto para ser pago."
          },
          "qrCodeImageUrl" : {
            "type" : "string",
            "description" : "link para download da imagem do QR code dinâmico gerado, pronto para ser scaneado e pago."
          }
        },
        "required" : [ "paymentType", "expiresIn", "qrCodeData", "qrCodeImageUrl" ]
      },
      "PaymentMethodBoletoResponse" : {
        "properties" : {
          "paymentType" : {
            "type" : "string",
            "enum" : [ "boleto" ],
            "description" : "método da cobrança via Boleto, o source deve ser um customer válido"
          },
          "expiresDate" : {
            "type" : "string",
            "description" : "data de vencimento do boleto em ISO-Date, ex 2017-01-31"
          },
          "barcodeData" : {
            "type" : "string",
            "description" : "código copia e cola do boleto registrado gerado, pronto para pagamento;"
          },
          "barcodeImageUrl" : {
            "type" : "string",
            "description" : "link para download do do boleto registrado gerado, pronto para pagamento;"
          }
        },
        "required" : [ "paymentType", "expiresDate", "barcodeData", "barcodeImageUrl" ]
      },
      "SessionPaymentMethodPixResponse" : {
        "properties" : {
          "paymentType" : {
            "type" : "string",
            "enum" : [ "pix" ],
            "description" : "método da cobrança via PIX, o source deve ser um customer válido."
          },
          "expiresIn" : {
            "type" : "number",
            "description" : "tempo em segundos que define a validade da cobrança."
          },
          "qrCodeData" : {
            "type" : "string",
            "description" : "código copia e cola para o QR code dinâmico gerado, pronto para ser pago."
          },
          "qrCodeImageUrl" : {
            "type" : "string",
            "description" : "link para download da imagem do QR code dinâmico gerado, pronto para ser scaneado e pago."
          }
        },
        "required" : [ "paymentType", "expiresIn", "qrCodeData", "qrCodeImageUrl" ]
      },
      "SessionPaymentMethodBoletoResponse" : {
        "properties" : {
          "paymentType" : {
            "type" : "string",
            "enum" : [ "boleto" ],
            "description" : "método da cobrança via Boleto, o source deve ser um customer válido"
          },
          "expiresDate" : {
            "type" : "string",
            "description" : "data de vencimento do boleto em ISO-Date, ex 2017-01-31"
          },
          "barcodeData" : {
            "type" : "string",
            "description" : "código copia e cola do boleto registrado gerado, pronto para pagamento;"
          },
          "barcodeImageUrl" : {
            "type" : "string",
            "description" : "link para download do do boleto registrado gerado, pronto para pagamento;"
          }
        },
        "required" : [ "paymentType", "expiresDate", "barcodeData", "barcodeImageUrl" ]
      },
      "SessionSourceTypeCard" : {
        "type" : "object",
        "description" : "identificação do merchant id a ser utilizado",
        "properties" : {
          "sourceType" : {
            "type" : "string",
            "description" : "tipo da origem da cobrança, usar `card` para cobrança em cartão tokenizado",
            "enum" : [ "card" ]
          },
          "cardId" : {
            "type" : "string",
            "description" : "Identificador do cartão quando source tipo card (opcional)"
          }
        },
        "required" : [ "sourceType", "cardId" ]
      },
      "SessionSourceTypeToken" : {
        "type" : "object",
        "properties" : {
          "sourceType" : {
            "type" : "string",
            "description" : "tipo da origem da cobrança, usar `token` para cobrança no token gerado",
            "enum" : [ "token" ]
          },
          "tokenId" : {
            "type" : "string",
            "description" : "Identificador do token quando source tipo token (opcional)"
          }
        },
        "required" : [ "sourceType", "tokenId" ]
      },
      "SessionSourceTypeCustomer" : {
        "type" : "object",
        "properties" : {
          "sourceType" : {
            "type" : "string",
            "description" : "tipo da origem da cobrança, usar `customer` para cobrança no cartão default do comprador",
            "enum" : [ "customer" ]
          },
          "customerId" : {
            "type" : "string",
            "description" : "Identificador do cliente quando source tipo customer, debitando o cartão default do comprador"
          }
        },
        "required" : [ "sourceType", "customerId" ]
      },
      "SessionSourceTypeCustomerOneShot" : {
        "type" : "object",
        "properties" : {
          "sourceType" : {
            "type" : "string",
            "description" : "tipo da origem da cobrança, usar `customer` para cobrança no cartão default do comprador",
            "enum" : [ "customer" ]
          },
          "customer" : {
            "type" : "object",
            "properties" : {
              "name" : {
                "type" : "string",
                "description" : "nome do usuario"
              },
              "email" : {
                "type" : "string",
                "description" : "email do usuario"
              },
              "phoneNumber" : {
                "type" : "string",
                "description" : "telefone de contato do usuario"
              },
              "document" : {
                "allOf" : [ {
                  "$ref" : "#/components/schemas/Document"
                } ]
              },
              "address" : {
                "allOf" : [ {
                  "$ref" : "#/components/schemas/Address"
                } ]
              }
            }
          }
        },
        "required" : [ "sourceType", "customerId", "email", "phoneNumber", "document" ]
      },
      "SessionSourceTypeCardOneShot" : {
        "type" : "object",
        "properties" : {
          "sourceType" : {
            "type" : "string",
            "description" : "tipo da origem da cobrança, usar `card` para cobrança direta no cartão",
            "enum" : [ "card" ]
          },
          "card" : {
            "type" : "object",
            "properties" : {
              "cardHolderName" : {
                "type" : "string",
                "description" : "Nome do portador do cartão quando cobrança sem tokenização"
              },
              "cardNumber" : {
                "type" : "string",
                "description" : "Número do cartão quando cobrança sem tokenização"
              },
              "cardCvv" : {
                "type" : "string",
                "description" : "Código de verificação cobrança sem tokenização"
              },
              "cardExpirationDate" : {
                "type" : "string",
                "description" : "Mês e ano de validade no formato MM/YYYY quando cobrança sem tokenização"
              }
            }
          }
        },
        "required" : [ "sourceType", "cardHolderName", "cardNumber", "cardCvv", "cardExpirationDate" ]
      },
      "SessionPaymentMethodBoleto" : {
        "properties" : {
          "paymentType" : {
            "type" : "string",
            "enum" : [ "boleto" ],
            "description" : "Boleto charge, the source must be a valid customer."
          },
          "expiresDate" : {
            "type" : "string",
            "description" : "Boleto due date, ISO-Date, ex 2017-01-31"
          },
          "instructions" : {
            "type" : "string",
            "description" : "Boleto instructions field. Maximum 255 characters. Use \\n for line break"
          },
          "interest" : {
            "type" : "object",
            "description" : "Optional informations of the fees for delay payment",
            "properties" : {
              "days" : {
                "type" : "integer",
                "description" : "Days after the expiration of the boleto when interest must be charged"
              },
              "amount" : {
                "type" : "integer",
                "description" : "Amount in cents of the interest rate that will be charged peer day"
              },
              "percentage" : {
                "type" : "number",
                "description" : "Amount in percentage of the interest rate that will be charged peer month"
              }
            }
          },
          "fine" : {
            "type" : "object",
            "description" : "Optional information of the fine condition for delay payment",
            "properties" : {
              "days" : {
                "type" : "integer",
                "description" : "Days after the boleto expiration when the fine must be charged"
              },
              "amount" : {
                "type" : "integer",
                "description" : "Fine amount in cents"
              },
              "percentage" : {
                "type" : "number",
                "description" : "Fine amount in percentage"
              }
            }
          }
        },
        "required" : [ "paymentType" ]
      },

      "TokenRequest" : {
        "required" : [ "cardHolderName", "cardNumber", "cardCvv", "cardExpirationDate" ],
        "properties" : {
          "cardHolderName" : {
            "type" : "string",
            "description" : "Nome do portador do cartão"
          },
          "cardNumber" : {
            "type" : "string",
            "description" : "Número do cartão (Sem espaços)"
          },
          "cardCvv" : {
            "type" : "string",
            "description" : "Código de verificação"
          },
          "cardExpirationDate" : {
            "type" : "string",
            "description" : "Mês e ano de validade no formato MM/YYYY"
          }
        }
      },
      "CardRequest" : {
        "required" : [ "tokenId" ],
        "properties" : {
          "tokenId" : {
            "type" : "string",
            "description" : "Identificador do token gerado"
          }
        }
      },
      "CardList" : {
        "properties" : {
          "meta" : {
            "type" : "object",
            "$ref" : "#/components/schemas/MetaPagination"
          },
          "items" : {
            "type" : "array",
            "$ref" : "#/components/schemas/CardResponse"
          }
        }
      },
      "ChargeList" : {
        "properties" : {
          "meta" : {
            "type" : "object",
            "$ref" : "#/components/schemas/MetaPagination"
          },
          "items" : {
            "type" : "array",
            "$ref" : "#/components/schemas/ChargeResponse"
          }
        }
      },
      "CustomerList" : {
        "properties" : {
          "meta" : {
            "type" : "object",
            "$ref" : "#/components/schemas/MetaPagination"
          },
          "items" : {
            "type" : "array",
            "$ref" : "#/components/schemas/CustomerResponse"
          }
        }
      },
      "MetaPagination" : {
        "properties" : {
          "itemCount" : {
            "type" : "integer",
            "description" : "quantidade de itens na página"
          },
          "totalItems" : {
            "type" : "integer",
            "description" : "quantidade total de itens na consulta"
          },
          "itemsPerPage" : {
            "type" : "integer",
            "description" : "quantidade de itens por página"
          },
          "totalPages" : {
            "type" : "integer",
            "description" : "quantidade total de páginas"
          },
          "currentPage" : {
            "type" : "integer",
            "description" : "página atual"
          }
        }
      },
      "CardResponse" : {
        "properties" : {
          "id" : {
            "type" : "string",
            "description" : "ID do cartão"
          },
          "expirationMonth" : {
            "type" : "string",
            "description" : "Data de expiração MM"
          },
          "expirationYear" : {
            "type" : "string",
            "description" : "Data de expiração YYYY"
          },
          "brand" : {
            "type" : "string",
            "enum" : [ "American Express", "Mastercard", "Visa", "Elo", "Discover", "JCB", "Diners" ],
            "description" : "Bandeira"
          },
          "cvvChecked" : {
            "type" : "boolean",
            "description" : "Identifica se o CVV foi verificado"
          },
          "fingerprint" : {
            "type" : "string",
            "description" : "Hash de identificação única do cartão com base nos dados sensíveis"
          },
          "first6digits" : {
            "type" : "string",
            "description" : "Primeiros 6 digitos do cartão"
          },
          "last4digits" : {
            "type" : "string",
            "description" : "Últimos 4 digitos do cartão"
          },
          "status" : {
            "type" : "string",
            "enum" : [ "failed", "active", "pending" ],
            "description" : "Status de validação dos dados cartões, failed (cartão inválido para uso), active (cartão válido para uso), pending (validação do cartão pendente, uso autorizado temporariamente)"
          },
          "createdAt" : {
            "type" : "string",
            "description" : "Data de criação do cartão"
          },
          "updatedAt" : {
            "type" : "string",
            "description" : "Data de atualização do cartão"
          },
          "customer" : {
            "allOf" : [ {
              "$ref" : "#/components/schemas/CustomerResponse"
            } ]
          }
        }
      },
      "AuthRequest" : {
        "properties" : {
          "scope" : {
            "type" : "string",
            "description" : "determina o escopo de endpoints que a chave terá acesso",
            "enum" : [ "tokens", "charges", "cards", "webhooks" ]
          },
          "expires" : {
            "type" : "number",
            "description" : "prazo de validade da chave em segundos a partir da criação, zero para não expirar",
            "default" : 0
          }
        }
      },
      "AuthResponse" : {
        "properties" : {
          "scope" : {
            "type" : "string",
            "description" : "determina o escopo de endpoints que a chave terá acesso",
            "enum" : [ "tokens", "charges", "cards", "webhooks" ]
          },
          "expires" : {
            "type" : "number",
            "description" : "prazo de validade da chave em segundos a partir da criação, zero para não expirar"
          },
          "clientId" : {
            "type" : "string",
            "description" : "identificador do cliente na Malga"
          },
          "publicKey" : {
            "type" : "string",
            "description" : "chave pública criada"
          }
        }
      },
      "ErrorResponse" : {
        "properties" : {
          "error" : {
            "type" : "object",
            "allOf" : [ {
              "$ref" : "#/components/schemas/ErrorItem"
            } ]
          }
        }
      },
      "ErrorItem" : {
        "properties" : {
          "type" : {
            "type" : "string",
            "enum" : [ "api_error", "bad_request", "invalid_request_error", "card_declined" ]
          },
          "declinedCode" : {
            "type" : "string",
            "description" : "Código de retorno da transação em caso de falha na autorização"
          },
          "message" : {
            "type" : "string",
            "description" : "Descrição breve do erro"
          },
          "details" : {
            "type" : "array",
            "description" : "Lista contendo objetos que detalham o erro de validação"
          }
        },
        "required" : [ "type" ]
      },
      "CredentialPagarme" : {
        "properties" : {
          "type" : {
            "type" : "string",
            "enum" : [ "PAGARME" ]
          },
          "apiKey" : {
            "type" : "string",
            "description" : "Credencial de uso da sua conta na Pagarme"
          }
        },
        "required" : [ "type", "apiKey" ]
      },
      "CredentialPagSeguro" : {
        "properties" : {
          "type" : {
            "type" : "string",
            "enum" : [ "PAGSEGURO" ]
          },
          "token" : {
            "type" : "string",
            "description" : "Token de uso na API V4 da pagseguro"
          },
          "email" : {
            "type" : "string",
            "description" : "Email do usuário da conta principal da paseguro"
          }
        },
        "required" : [ "type", "token", "email" ]
      },
      "CredentialCielo" : {
        "properties" : {
          "type" : {
            "type" : "string",
            "enum" : [ "CIELO" ]
          },
          "merchantKey" : {
            "type" : "string",
            "description" : "Credential for using your Cielo account"
          },
          "merchantId" : {
            "type" : "string",
            "description" : "Credential for using your Cielo account"
          }
        },
        "required" : [ "type", "merchantKey", "merchantId" ]
      },
      "CredentialBS2" : {
        "properties" : {
          "type" : {
            "type" : "string",
            "enum" : [ "BS2" ]
          },
          "clientKey" : {
            "type" : "string",
            "description" : "Credencial de uso da sua conta no BS2"
          },
          "clientSecret" : {
            "type" : "string",
            "description" : "Credencial de uso da sua conta no BS2"
          },
          "pixKey" : {
            "type" : "string",
            "description" : "Chave pix da sua conta no BS2"
          }
        },
        "required" : [ "type", "clientKey", "clientSecret", "pixKey" ]
      },
      "CredentialBS2_BOLETO" : {
        "properties" : {
          "type" : {
            "type" : "string",
            "enum" : [ "BS2_BOLETO" ]
          },
          "clientKey" : {
            "type" : "string",
            "description" : "BS2 client key"
          },
          "clientSecret" : {
            "type" : "string",
            "description" : "BS2 client secret"
          },
          "refreshToken" : {
            "type" : "string",
            "description" : "BS2 refresh Token"
          }
        },
        "required" : [ "type", "clientKey", "clientSecret", "refreshToken" ]
      },
      "CredentialBB" : {
        "properties" : {
          "type" : {
            "type" : "string",
            "enum" : [ "BB" ]
          },
          "authBasic" : {
            "type" : "string",
            "description" : "Credencial de uso da sua conta no Banco do Brasil"
          },
          "devAppKey" : {
            "type" : "string",
            "description" : "Credencial de uso da sua conta no Banco do Brasil"
          },
          "pixKey" : {
            "type" : "string",
            "description" : "Chave Pix da da sua conta no Banco do Brasil"
          }
        },
        "required" : [ "type", "authBasic", "devAppKey", "pixKey" ]
      },
      "CredentialBraintree" : {
        "properties" : {
          "type" : {
            "type" : "string",
            "enum" : [ "BRAINTREE" ]
          },
          "merchantId" : {
            "type" : "string",
            "description" : "Merchant Id of your Braintree account"
          },
          "publicKey" : {
            "type" : "string",
            "description" : "Public Key of your Braintree account"
          },
          "privateKey" : {
            "type" : "string",
            "description" : "Private Key of your Braintree account"
          }
        },
        "required" : [ "type", "merchantId", "publicKey", "privateKey" ]
      },
      "CredentialKlap" : {
        "properties" : {
          "type" : {
            "type" : "string",
            "enum" : [ "KLAP" ]
          },
          "apiKey" : {
            "type" : "string",
            "description" : "API key of your Klap account"
          },
          "commerceId" : {
            "type" : "string",
            "description" : "Commerce ID of your Klap account"
          },
          "keyComponent1" : {
            "type" : "string",
            "description" : "Key component 1 of your Klap account"
          },
          "keyComponent2" : {
            "type" : "string",
            "description" : "Key component 2 of your Klap account"
          }
        },
        "required" : [ "type", "apiKey", "CommerceId", "keyComponent1", "keyComponent2" ]
      },
      "CredentialZoop" : {
        "properties" : {
          "type" : {
            "type" : "string",
            "enum" : [ "ZOOP" ]
          },
          "marketplaceId" : {
            "type" : "string",
            "description" : "Identificador do marketplace id na zoop"
          },
          "sellerId" : {
            "type" : "string",
            "description" : "Identificador do seller id na zoop"
          },
          "apiKey" : {
            "type" : "string",
            "description" : "Chave secreta de acesso a api da zoop"
          }
        },
        "required" : [ "marketplaceId", "sellerId", "apiKey" ]
      },
      "CredentialRede" : {
        "properties" : {
          "type" : {
            "type" : "string",
            "enum" : [ "REDE" ]
          },
          "merchantId" : {
            "type" : "string",
            "description" : "Identificador do estabelecimento na rede"
          },
          "apiKey" : {
            "type" : "string",
            "description" : "Chave secreta de acesso a api da rede"
          }
        },
        "required" : [ "merchantId", "apiKey" ]
      },
      "CredentialMercadoPago" : {
        "properties" : {
          "type" : {
            "type" : "string",
            "enum" : [ "MERCADO_PAGO" ]
          },
          "accessToken" : {
            "type" : "string",
            "description" : "API access key"
          }
        },
        "required" : [ "type", "accessToken" ]
      },
      "CredentialStripe" : {
        "properties" : {
          "type" : {
            "type" : "string",
            "enum" : [ "STRIPE" ]
          },
          "secretKey" : {
            "type" : "string",
            "description" : "Chave secreta de acesso a api da stripe"
          }
        },
        "required" : [ "secretKey" ]
      },
      "CredentialClearsale" : {
        "properties" : {
          "type" : {
            "type" : "string",
            "enum" : [ "CLEARSALE" ]
          },
          "name" : {
            "type" : "string",
            "description" : "Name for clearsale API login"
          },
          "password" : {
            "type" : "string",
            "description" : "Secret password for clearsale API login"
          }
        },
        "required" : [ "type", "name", "password" ]
      },
      "ClearsaleOptions" : {
        "properties" : {
          "type" : {
            "type" : "string",
            "enum" : [ "ANTIFRAUD" ]
          },
          "captureOnError" : {
            "type" : "boolean",
            "description" : "Captures the transaction if the antifraud provider returns an error"
          },
          "refundOnError" : {
            "type" : "boolean",
            "description" : "Refunds the transaction if the antifraud provider returns an error"
          }
        },
        "required" : [ "type" ]
      },
      "CredentialNuPay" : {
        "properties" : {
          "type" : {
            "type" : "string",
            "enum" : [ "NUPAY" ]
          },
          "merchantApiToken" : {
            "type" : "string",
            "description" : "NuPay's API Token"
          },
          "merchantApiKey" : {
            "type" : "string",
            "description" : "NuPay's API Key"
          }
        },
        "required" : [ "type", "merchantApiToken", "merchantApiKey" ]
      },
      "NuPayOptions" : {
        "properties" : {
          "type" : {
            "type" : "string",
            "enum" : [ "NUPAY" ]
          },
          "merchantName" : {
            "type" : "string",
            "description" : "Merchant name to be used in NuPay transactions"
          },
          "storeName" : {
            "type" : "string",
            "description" : "Store name to be used in NuPay transactions"
          }
        },
        "required" : [ "type" ]
      },
      "CredentialAdyen" : {
        "properties" : {
          "type" : {
            "type" : "string",
            "enum" : [ "ADYEN" ]
          },
          "apiKey" : {
            "type" : "string",
            "description" : "Adyen API key"
          },
          "liveUrlPrefix" : {
            "type" : "string",
            "description" : "Adyen live URL prefix"
          },
          "webhookHmacKey" : {
            "type" : "string",
            "description" : "HMAC key for webhook validation"
          },
          "merchantAccount" : {
            "type" : "string",
            "description" : "Adyen Merchant Account"
          }
        },
        "required" : [ "type", "apiKey", "liveUrlPrefix", "merchantAccount" ]
      },
      "CredentialGetnet" : {
        "properties" : {
          "type" : {
            "type" : "string",
            "enum" : [ "GETNET" ]
          },
          "clientId" : {
            "type" : "string",
            "description" : "Getnet client ID"
          },
          "clientSecret" : {
            "type" : "string",
            "description" : "Getnet client secret"
          },
          "sellerId" : {
            "type" : "string",
            "description" : "Getnet seller ID"
          }
        },
        "required" : [ "type", "clientId", "clientSecret", "sellerId" ]
      },
      "CredentialBraspag" : {
        "properties" : {
          "type" : {
            "type" : "string",
            "enum" : [ "BRASPAG" ]
          },
          "clientSecret" : {
            "type" : "string",
            "description" : "Credential for using your Braspag account"
          },
          "merchantId" : {
            "type" : "string",
            "description" : "Store identifier at Braspag"
          },
          "merchantKey" : {
            "type" : "string",
            "description" : "Public key for dual authentication at Braspag"
          }
        },
        "required" : [ "type", "clientSecret", "merchantId", "merchantKey" ]
      },
      "ProviderRequest" : {
        "properties" : {
          "name" : {
            "type" : "string",
            "description" : "nome opcional de identificação do provedor"
          },
          "priority" : {
            "type" : "number",
            "description" : "define a prioridade do provedor no roteamento da transação, (usar 1 para o prioritário)"
          },
          "credentials" : {
            "oneOf" : [ {
              "$ref" : "#/components/schemas/CredentialPagSeguro"
            }, {
              "$ref" : "#/components/schemas/CredentialPagarme"
            }, {
              "$ref" : "#/components/schemas/CredentialCielo"
            }, {
              "$ref" : "#/components/schemas/CredentialBS2"
            }, {
              "$ref" : "#/components/schemas/CredentialBS2_BOLETO"
            }, {
              "$ref" : "#/components/schemas/CredentialBB"
            }, {
              "$ref" : "#/components/schemas/CredentialBraintree"
            }, {
              "$ref" : "#/components/schemas/CredentialKlap"
            }, {
              "$ref" : "#/components/schemas/CredentialZoop"
            }, {
              "$ref" : "#/components/schemas/CredentialStripe"
            }, {
              "$ref" : "#/components/schemas/CredentialRede"
            }, {
              "$ref" : "#/components/schemas/CredentialMercadoPago"
            }, {
              "$ref" : "#/components/schemas/CredentialClearsale"
            }, {
              "$ref" : "#/components/schemas/CredentialNuPay"
            }, {
              "$ref" : "#/components/schemas/CredentialAdyen"
            }, {
              "$ref" : "#/components/schemas/CredentialGetnet"
            }, {
              "$ref" : "#/components/schemas/CredentialBraspag"
            } ]
          },
          "options" : {
            "oneOf" : [ {
              "$ref" : "#/components/schemas/ClearsaleOptions"
            }, {
              "$ref" : "#/components/schemas/NuPayOptions"
            } ]
          }
        },
        "required" : [ "name", "priority", "credentials" ]
      },
      "MerchantRequest" : {
        "properties" : {
          "mcc" : {
            "type" : "string",
            "description" : "código de segmento do lojista no adquirente, solicite ao seu provedor caso não saiba qual o seu Merchant Category Code."
          },
          "providers" : {
            "$ref" : "#/components/schemas/ProviderRequest"
          }
        },
        "required" : [ "clientId", "mcc", "status" ]
      },
      "MerchantResponse" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string",
            "description" : "dentificador do merchant"
          },
          "createdAt" : {
            "type" : "string",
            "description" : "data de criação"
          },
          "clientId" : {
            "type" : "string",
            "description" : "identificador do client"
          },
          "mcc" : {
            "type" : "string",
            "description" : "codigo mcc do cadatro do lojista no adquirente"
          },
          "status" : {
            "type" : "string",
            "enum" : [ "active", "deleted", "pending" ],
            "description" : "status do merchant"
          },
          "providers" : {
            "$ref" : "#/components/schemas/ProviderRequest"
          }
        }
      },
      "SplitRules" : {
        "type" : "array",
        "items" : {
          "type": "object",
          "properties" : {
            "sellerId" : {
              "type" : "string",
              "format" : "uuid",
              "description" : "seller id"
            },
            "percentage" : {
              "type" : "number",
              "description" : "percentage of the transaction amount that will be sent to the receiver"
            },
            "amount" : {
              "type" : "number",
              "description" : "amount that will be sent to the receiver"
            },
            "processingFee" : {
              "type" : "boolean",
              "description" : "indicates whether the recipient linked to the rule will be charged transaction fees"
            },
            "liable" : {
              "type" : "boolean",
              "description" : "indicates whether the linked recipient will assume the chargeback risks of the transaction"
            },
            "fares" : {
              "$ref" : "#/components/schemas/SplitRulesFaresSchema",
              "description" : "Informações sobre as taxas que serão cobradas do recebedor - Apenas para sellers com provedor Braspag"
            }
          }
        }
      },
      "MerchantList" : {
        "properties" : {
          "meta" : {
            "type" : "object",
            "$ref" : "#/components/schemas/MetaPagination"
          },
          "items" : {
            "type" : "array",
            "$ref" : "#/components/schemas/MerchantResponse"
          }
        }
      },
      "Address" : {
        "type" : "object",
        "properties" : {
          "country" : {
            "type" : "string",
            "description" : "Padrão ISO 3166-1 alpha-2"
          },
          "state" : {
            "type" : "string",
            "description" : "Estado"
          },
          "city" : {
            "type" : "string",
            "description" : "Cidade"
          },
          "district" : {
            "type" : "string",
            "description" : "Bairro"
          },
          "zipCode" : {
            "type" : "string",
            "description" : "Codigo postal CEP"
          },
          "street" : {
            "type" : "string",
            "description" : "Nome da rua/avenida/travessa"
          },
          "streetNumber" : {
            "type" : "string",
            "description" : "Numero da rua"
          },
          "complement" : {
            "type" : "string",
            "description" : "Complemento caso exista"
          }
        }
      },
      "Document" : {
        "type" : "object",
        "properties" : {
          "type" : {
            "type" : "string",
            "description" : "tipo de documento, consultar tabela de tipos suportados"
          },
          "number" : {
            "type" : "string",
            "description" : "numero do documento formato conforme tipo selecionado"
          },
          "country" : {
            "type" : "string",
            "description" : "pais de emissão do documento, Padrão ISO 3166-1 alpha-2, consultar tabela de tipos suportados",
            "default" : "BR"
          }
        }
      },
      "CustomerResponse" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string",
            "description" : "identificador do customer"
          },
          "createdAt" : {
            "type" : "string",
            "description" : "data de criação"
          },
          "clientId" : {
            "type" : "string",
            "description" : "identificador do client"
          },
          "name" : {
            "type" : "string",
            "description" : "nome do usuario"
          },
          "email" : {
            "type" : "string",
            "description" : "email do usuario"
          },
          "phoneNumber" : {
            "type" : "string",
            "description" : "telefones de contato do usuario"
          },
          "document" : {
            "allOf" : [ {
              "$ref" : "#/components/schemas/Document"
            } ]
          },
          "address" : {
            "allOf" : [ {
              "$ref" : "#/components/schemas/Address"
            } ]
          }
        }
      },
      "CustomerRequest" : {
        "type" : "object",
        "properties" : {
          "name" : {
            "type" : "string",
            "description" : "nome do usuario"
          },
          "email" : {
            "type" : "string",
            "description" : "email do usuario"
          },
          "phoneNumber" : {
            "type" : "string",
            "description" : "telefone de contato do usuario"
          },
          "document" : {
            "allOf" : [ {
              "$ref" : "#/components/schemas/Document"
            } ]
          },
          "address" : {
            "allOf" : [ {
              "$ref" : "#/components/schemas/Address"
            } ]
          }
        },
        "required" : [ "name", "phoneNumber", "email", "document" ]
      },
      "UpdateCustomerRequest" : {
        "type" : "object",
        "properties" : {
          "name" : {
            "type" : "string",
            "description" : "nome do usuario"
          },
          "phoneNumber" : {
            "type" : "string",
            "description" : "telefone de contato do usuario"
          },
          "address" : {
            "allOf" : [ {
              "$ref" : "#/components/schemas/Address"
            } ]
          }
        }
      },
      "LinkCardRequest" : {
        "required" : [ "cardId" ],
        "properties" : {
          "cardId" : {
            "type" : "string",
            "description" : "Identificador do cartão a ser associado"
          }
        }
      },
      "CustomerCardList" : {
        "properties" : {
          "meta" : {
            "type" : "object",
            "$ref" : "#/components/schemas/MetaPagination"
          },
          "items" : {
            "type" : "array",
            "$ref" : "#/components/schemas/CardResponse"
          }
        }
      },
      "WebhookRequest" : {
        "type" : "object",
        "properties" : {
          "event" : {
            "type" : "string",
            "description" : "Evento que deseja receber notificações no seu webhook conforme descrito na seção [Eventos suportados para notificação via webhooks](/docs/webhooks#eventos-suportados-para-notificação-via-webhooks). Deve ser criado um webhook para cada evento, podendo ser utilizado o wildcard `*` no lugar do evento para receber todos os eventos em um único webhook."
          },
          "endpoint" : {
            "type" : "string",
            "description" : "URL do seu sistema que deverá receber as notificações de evento"
          },
          "version" : {
            "type" : "number",
            "description" : "Versão da api da Malga que seu webhook implementa",
            "default" : 1
          },
          "status" : {
            "type" : "boolean",
            "description" : "Identifica se o webhooks está ativo ou não para receber notificações de evento da Malga",
            "default" : true
          }
        },
        "required" : [ "event", "endpoint", "version", "status" ]
      },
      "WebhookResponse" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string",
            "description" : "identificador do webhook"
          },
          "createdAt" : {
            "type" : "string",
            "description" : "data de criação"
          },
          "clientId" : {
            "type" : "string",
            "description" : "identificador do client"
          },
          "event" : {
            "type" : "string",
            "description" : "Tipo do evento que deseja receber notificações no seu webhook"
          },
          "endpoint" : {
            "type" : "string",
            "description" : "URL do seu sistema que deverá receber as notificações de evento"
          },
          "version" : {
            "type" : "number",
            "description" : "Versão da api da Malga que seu webhook implementa",
            "default" : 1
          },
          "status" : {
            "type" : "boolean",
            "description" : "Identifica se o webhooks está ativo ou não para receber notificações de evento da Malga",
            "default" : true
          }
        }
      },
      "WebhookList" : {
        "properties" : {
          "meta" : {
            "type" : "object",
            "$ref" : "#/components/schemas/MetaPagination"
          },
          "items" : {
            "type" : "array",
            "$ref" : "#/components/schemas/WebhookResponse"
          }
        }
      },
      "Event" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string",
            "description" : "identificador único do evento, também enviado no header"
          },
          "createdAt" : {
            "type" : "string",
            "description" : "data de criação do evento"
          },
          "object" : {
            "type" : "string",
            "description" : "Tipo do objeto atualizado"
          },
          "event" : {
            "type" : "string",
            "description" : "Tipo do evento de atualização que ocorreu no objeto atualizado"
          },
          "apiVersion" : {
            "type" : "number",
            "description" : "Versão da api da Malga que seu webhook implementa"
          },
          "data" : {
            "type" : "object",
            "description" : "Dados do objeto alterado com base na definição do schema de cada objeto"
          }
        }
      },
      "ValidationResponse" : {
        "type" : "object",
        "properties" : {
          "detail" : {
            "type" : "object",
            "properties" : {
              "loc" : {
                "type" : "string"
              },
              "msg" : {
                "type" : "string"
              },
              "type" : {
                "type" : "string"
              }
            }
          }
        }
      },
      "ErrorMessageResponse" : {
        "type" : "object",
        "properties" : {
          "detail" : {
            "type" : "string"
          }
        }
      },
      "SplitRulesFaresSchema" : {
        "type" : "object",
        "properties" : {
          "mdr" : {
            "type" : "number",
            "description" : "Indicates the percentage to be deducted from the value of a transaction, defined by product (credit/debit/ticket), brand and installment range"
          },
          "fee" : {
            "type" : "number",
            "description" : "Indicates amount in cents to be charged per captured transaction. It is deducted at the time of “setting up” the financial agenda"
          }
        }
      }
    },
    "examples" : {
      "SessionChargeCardResponse" : {
        "summary" : "Exemplo resposta cobrança por cartão",
        "value" : {
          "id" : "148d5db0-f1c3-439f-902d-f1f268086e1d",
          "clientId" : "cc0b1e41-2936-45c5-947f-93995ffcdc00",
          "merchantId" : "148d5db0-f1c3-439f-902d-f1f268086e1d",
          "description" : "Descrição longa da cobrança",
          "orderId" : "32c68ff7-902c-408b-b464-cf487c7cda97",
          "createdAt" : "2012-06-30 23:59:59 +0000",
          "amount" : 150,
          "originalAmount" : 150,
          "currency" : "BRL",
          "statementDescriptor" : "LOJA JOAO",
          "status" : "pending",
          "paymentMethod" : {
            "paymentType" : "credit",
            "installments" : 1
          },
          "paymentSource" : {
            "sourceType" : "card",
            "cardId" : "148d5db0-f1c3-439f-902d-f1f268086e1d"
          },
          "transactionRequests" : [ {
            "id" : "78601913-a176-4d71-b7e8-abb6fc49a340",
            "idempotencyKey" : "fafe857b176e45d6b12e32fcaf228996",
            "providerId" : "2c3b57d8-ee43-4b19-bc8a-949a88c51df1",
            "providerType" : "STRIPE",
            "transactionId" : "ch_3JYE7MHjGFBGEeiP0lfTD3Ob",
            "amount" : 1500,
            "authorizationNsu" : "1cc8391c-f0d5-4b7a-9fcf-653cea26be13",
            "requestStatus" : "success",
            "requestType" : "authorization",
            "responseTs" : "2633ms",
            "createdAt" : "2021-08-12T16:08:39.536Z",
            "updatedAt" : "2021-08-12T16:08:42.212Z",
            "providerAuthorization" : {
              "networkAuthorizationCode" : "00",
              "networkResponseCode" : ""
            }
          } ]
        }
      },
      "SessionChargePixResponse" : {
        "summary" : "Exemplo resposta cobrança PIX",
        "value" : {
          "id" : "148d5db0-f1c3-439f-902d-f1f268086e1d",
          "clientId" : "cc0b1e41-2936-45c5-947f-93995ffcdc00",
          "merchantId" : "148d5db0-f1c3-439f-902d-f1f268086e1d",
          "description" : "Descrição longa da cobrança",
          "orderId" : "32c68ff7-902c-408b-b464-cf487c7cda97",
          "createdAt" : "2012-06-30 23:59:59 +0000",
          "amount" : 150,
          "originalAmount" : 150,
          "currency" : "BRL",
          "statementDescriptor" : "LOJA JOAO",
          "status" : "pending",
          "paymentMethod" : {
            "paymentType" : "pix",
            "expiresIn" : 3600,
            "qrCodeData" : "00020101021126510014BR.GOV.BCB.PIX0129K89VdiUgWN1B3p0IHrgHkNHg9tX5F52040000530398654040.155802BR5913Customer test600062070503***630431C0",
            "qrCodeImageUrl" : "https://...."
          },
          "paymentSource" : {
            "sourceType" : "customer",
            "customerId" : "1cdcf0c9-eb04-4e43-b9b2-b7a4acdead1f"
          },
          "transactionRequests" : [ {
            "id" : "78601913-a176-4d71-b7e8-abb6fc49a340",
            "idempotencyKey" : "fafe857b176e45d6b12e32fcaf228996",
            "providerId" : "2c3b57d8-ee43-4b19-bc8a-949a88c51df1",
            "providerType" : "STRIPE",
            "transactionId" : "ch_3JYE7MHjGFBGEeiP0lfTD3Ob",
            "amount" : 1500,
            "authorizationNsu" : "1cc8391c-f0d5-4b7a-9fcf-653cea26be13",
            "requestStatus" : "success",
            "requestType" : "authorization",
            "responseTs" : "2633ms",
            "createdAt" : "2021-08-12T16:08:39.536Z",
            "updatedAt" : "2021-08-12T16:08:42.212Z",
            "providerAuthorization" : {
              "networkAuthorizationCode" : "00",
              "networkResponseCode" : ""
            }
          } ]
        }
      },
      "SessionChargeBoletoResponse" : {
        "summary" : "Exemplo resposta cobrança Boleto",
        "value" : {
          "id" : "148d5db0-f1c3-439f-902d-f1f268086e1d",
          "clientId" : "cc0b1e41-2936-45c5-947f-93995ffcdc00",
          "merchantId" : "148d5db0-f1c3-439f-902d-f1f268086e1d",
          "description" : "Descrição longa da cobrança",
          "orderId" : "32c68ff7-902c-408b-b464-cf487c7cda97",
          "createdAt" : "2012-06-30 23:59:59 +0000",
          "amount" : 150,
          "originalAmount" : 150,
          "currency" : "BRL",
          "statementDescriptor" : "LOJA JOAO",
          "status" : "pending",
          "paymentMethod" : {
            "paymentType" : "boleto",
            "expiresDate" : "2021-12-31",
            "barcodeData" : "412343241324321431241341",
            "barcodeImageUrl" : "https://...."
          },
          "paymentSource" : {
            "sourceType" : "customer",
            "customerId" : "1cdcf0c9-eb04-4e43-b9b2-b7a4acdead1f"
          },
          "transactionRequests" : [ {
            "id" : "78601913-a176-4d71-b7e8-abb6fc49a340",
            "idempotencyKey" : "fafe857b176e45d6b12e32fcaf228996",
            "providerId" : "2c3b57d8-ee43-4b19-bc8a-949a88c51df1",
            "providerType" : "STRIPE",
            "transactionId" : "ch_3JYE7MHjGFBGEeiP0lfTD3Ob",
            "amount" : 1500,
            "authorizationNsu" : "1cc8391c-f0d5-4b7a-9fcf-653cea26be13",
            "requestStatus" : "success",
            "requestType" : "authorization",
            "responseTs" : "2633ms",
            "createdAt" : "2021-08-12T16:08:39.536Z",
            "updatedAt" : "2021-08-12T16:08:42.212Z",
            "providerAuthorization" : {
              "networkAuthorizationCode" : "00",
              "networkResponseCode" : ""
            }
          } ]
        }
      },
      "SessionChargePixRequest" : {
        "summary" : "Exemplo cobrança Pix",
        "value" : {
          "paymentMethod" : {
            "paymentType" : "pix",
            "expiresIn" : 3600
          },
          "paymentSource" : {
            "sourceType" : "customer",
            "customer" : {
              "name" : "Customer test",
              "email" : "jose2@gmail.com",
              "document" : {
                "number" : "97055503019",
                "type" : "cpf"
              },
              "phoneNumber" : "21 98889999099"
            }
          }
        }
      },
      "PaySessionBoletoRequest" : {
        "summary" : "Exemplo cobrança Boleto",
        "value" : {
          "paymentMethod" : {
            "paymentType" : "boleto",
            "expiresDate" : "2022-12-31",
            "instructions" : "Instruções para pagamento do boleto",
            "interest" : {
              "days" : 1,
              "amount" : 100,
              "percentage" : 0.2
            },
            "fine" : {
              "days" : 2,
              "amount" : 200,
              "percentage" : 0
            }
          },
          "paymentSource" : {
            "sourceType" : "customer",
            "customer" : {
              "name" : "Customer test",
              "email" : "jose2@gmail.com",
              "document" : {
                "number" : "97055503019",
                "type" : "cpf"
              },
              "phoneNumber" : "21 98889999099"
            }
          }
        }
      },
      "PaySessionCardRequest" : {
        "summary" : "Exemplo cobrança Cartão",
        "value" : {
          "paymentMethod" : {
            "paymentType" : "credit",
            "installments" : 1
          },
          "paymentSource" : {
            "sourceType" : "card",
            "card" : {
              "cardNumber" : "5261424250184574",
              "cardCvv" : "321",
              "cardExpirationDate" : "06/2028",
              "cardHolderName" : "JOAO DA SILVA"
            }
          }
        }
      },
      "UpdateSessionResponse" : {
        "value" : {
          "id" : "c1db83fa-723c-4e1f-9722-bc19d1be6791",
          "isActive" : false
        }
      },
      "CancelSessionResponse" : {
        "value" : {
          "id" : "c1db83fa-723c-4e1f-9722-bc19d1be6791",
          "status" : "canceled"
        }
      },
      "SessionResponse" : {
        "value" : {
          "id" : "c1db83fa-723c-4e1f-9722-bc19d1be6791",
          "name" : "Pedido 1",
          "status" : "created",
          "isActive" : true,
          "clientId" : "39d2d314-5412-431a-b34b-74f9f0fbe7e1",
          "orderId" : "b84b7694-d22f-4083-bee7-c1274b16eb4a",
          "amount" : 100,
          "currency" : "BRL",
          "capture" : true,
          "merchantId" : "9930c8d9-a7a8-4039-9faf-3715ad87baf8",
          "dueDate" : "2022-10-26T19:32:08.000Z",
          "description" : "Pedido Black Friday",
          "statementDescriptor" : "LOJA JOAO",
          "items" : [ {
            "name" : "Item 1",
            "description" : "Item do carrinho",
            "unitPrice" : 1000,
            "quantity" : 1,
            "tangible" : false
          } ],
          "paymentLink" : "https://link.malga.io/c1db83fa-723c-4e1f-9722-bc19d1be6791",
          "paymentMethods" : [ {
            "paymentType" : "pix",
            "expiresIn" : 30
          } ],
          "createdAt" : "2022-10-25T22:49:06.588Z",
          "updatedAt" : "2022-10-25T22:49:06.588Z",
          "publicKey" : "8be71cdf-01dc-4b1a-823a-4c58be6e4cf1"
        }
      },
      "SessionRequest" : {
        "value" : {
          "amount" : 100,
          "isActive" : true,
          "capture" : true,
          "merchantId" : "1b0c6960-702a-4074-95c2-eed2790c16a1",
          "dueDate" : "2022-10-25T09:28:45.000Z",
          "description" : "Promoção Black Friday",
          "statementDescriptor" : "LOJA JOAO",
          "paymentMethods" : [ {
            "paymentType" : "pix",
            "expiresIn" : 30
          } ],
          "items" : [ {
            "name" : "Item 1",
            "description" : "Item do carrinho",
            "unitPrice" : 1000,
            "quantity" : 1,
            "tangible" : false
          } ]
        }
      },
      "Session" : {
        "value" : {
          "id" : "1b0c6960-702a-4074-95c2-eed2790c16a1",
          "name" : "Nome da sessão",
          "status" : "created",
          "isActive" : true,
          "clientId" : "1b0c6960-702a-4074-95c2-eed2790c16a1",
          "orderId" : null,
          "amount" : 100,
          "currency" : "BRL",
          "capture" : true,
          "merchantId" : "69aea152-ba70-49a3-a31c-044ac1651146",
          "dueDate" : "2022-10-25T09:28:45.000Z",
          "description" : "Promoção Black Friday",
          "statementDescriptor" : "LOJA JOAO",
          "paymentMethods" : [ {
            "paymentType" : "credit",
            "installments" : 1
          } ],
          "items" : [ {
            "id" : "78601913-a176-4d71-b7e8-abb6fc49a340",
            "name" : "Item 1",
            "description" : "Descrição do item",
            "unitPrice" : 10000,
            "quantity" : 1,
            "tangible" : false
          } ],
          "createdAt" : "2022-10-25T09:28:45.000Z",
          "updatedAt" : "2022-10-25T09:28:45.000Z",
          "publicKey" : "1b0c6960-702a-4074-95c2-eed2790c16a1"
        }
      },
      "ErrorResponse" : {
        "value" : {
          "error" : {
            "type" : "card_declined",
            "declinedCode" : "invalid_number",
            "message" : "invalid card number"
          }
        }
      },
      "TokenRequest" : {
        "value" : {
          "cardHolderName" : "JOSE DAS NEVES",
          "cardNumber" : "4019598346009339",
          "cardCvv" : "123",
          "cardExpirationDate" : "12/2026"
        }
      },
      "TokenResponse" : {
        "value" : {
          "id" : "82aba896-9e37-45b6-aa90-d510c9050596",
          "clientId" : "cc0b1e41-2936-45c5-947f-93995ffcdc00",
          "createdAt" : "2012-06-30 23:59:59 +0000"
        }
      },
      "AuthRequest" : {
        "value" : {
          "scope" : [ "tokens" ],
          "expires" : 31104000
        }
      },
      "AuthResponse" : {
        "value" : {
          "clientId" : "cc0b1e41-2936-45c5-947f-93995ffcdc00",
          "publicKey" : "<YOUR_PUBLIC_KEY>",
          "scope" : [ "tokens" ],
          "expires" : 31104000,
          "createdAt" : "20200110 00:00:00"
        }
      },
      "CardRequest" : {
        "value" : {
          "tokenId" : "82aba896-9e37-45b6-aa90-d510c9050596"
        }
      },
      "CardResponse" : {
        "value" : {
          "id" : "148d5db0-f1c3-439f-902d-f1f268086e1d",
          "customerId" : "82aba896-9e37-45b6-aa90-d510c9050596",
          "clientId" : "cc0b1e41-2936-45c5-947f-93995ffcdc00",
          "expirationMonth" : "12",
          "expirationYear" : "2026",
          "brand" : "Visa",
          "cvvChecked" : true,
          "fingerprint" : "cbd4a441-c63c-4dee-ac6b-bfa7fa1df818",
          "first6digits" : "401959",
          "last4digits" : "9339",
          "createdAt" : "2012-06-30 23:59:59 +0000",
          "status" : "active"
        }
      },
      "CardList" : {
        "value" : {
          "meta" : {
            "itemCount" : 10,
            "totalItems" : 20,
            "itemsPerPage" : 10,
            "totalPages" : 5,
            "currentPage" : 2
          },
          "items" : [ {
            "id" : "148d5db0-f1c3-439f-902d-f1f268086e1d",
            "customerId" : "82aba896-9e37-45b6-aa90-d510c9050596",
            "clientId" : "cc0b1e41-2936-45c5-947f-93995ffcdc00",
            "expirationMonth" : "12",
            "expirationYear" : "2026",
            "brand" : "Visa",
            "cvvChecked" : true,
            "fingerprint" : "cbd4a441-c63c-4dee-ac6b-bfa7fa1df818",
            "first6digits" : "401959",
            "last4digits" : "9339",
            "createdAt" : "2012-06-30 23:59:59 +0000",
            "status" : "active"
          } ]
        }
      },
      "MetaPagination" : {
        "value" : {
          "itemCount" : 10,
          "totalItems" : 20,
          "itemsPerPage" : 10,
          "totalPages" : 5,
          "currentPage" : 2
        }
      },
      "ChargeCardRequest" : {
        "value" : {
          "merchantId" : "7f8870a2-71c9-4ef0-a531-82000e00b7e1",
          "amount" : 150,
          "currency" : "BRL",
          "statementDescriptor" : "LOJA JOAO",
          "description" : "Descrição longa da cobrança",
          "capture" : false,
          "orderId" : "32c68ff7-902c-408b-b464-cf487c7cda97",
          "paymentMethod" : {
            "paymentType" : "credit",
            "installments" : 1
          },
          "paymentSource" : {
            "sourceType" : "card",
            "cardId" : "148d5db0-f1c3-439f-902d-f1f268086e1d"
          }
        }
      },
      "ChargePixRequest" : {
        "value" : {
          "merchantId" : "7f8870a2-71c9-4ef0-a531-82000e00b7e1",
          "amount" : 150,
          "currency" : "BRL",
          "statementDescriptor" : "LOJA JOAO",
          "description" : "Descrição longa da cobrança",
          "capture" : true,
          "orderId" : "32c68ff7-902c-408b-b464-cf487c7cda97",
          "paymentMethod" : {
            "paymentType" : "pix",
            "expiresIn" : 3600
          },
          "paymentSource" : {
            "sourceType" : "customer",
            "customer" : {
              "name" : "Customer test",
              "email" : "jose2@gmail.com",
              "document" : {
                "number" : "97055503019",
                "type" : "cpf"
              },
              "phoneNumber" : "21 98889999099"
            }
          }
        }
      },
      "ChargeBoletoRequest" : {
        "value" : {
          "merchantId" : "7f8870a2-71c9-4ef0-a531-82000e00b7e1",
          "amount" : 150,
          "currency" : "BRL",
          "statementDescriptor" : "LOJA JOAO",
          "description" : "Descrição longa da cobrança",
          "capture" : true,
          "orderId" : "32c68ff7-902c-408b-b464-cf487c7cda97",
          "paymentMethod" : {
            "paymentType" : "boleto",
            "expiresDate" : "2022-12-31",
            "instructions" : "Instruções para pagamento do boleto",
            "interest" : {
              "days" : 1,
              "amount" : 100,
              "percentage" : 0.2
            },
            "fine" : {
              "days" : 2,
              "amount" : 200,
              "percentage" : 0
            }
          },
          "paymentSource" : {
            "sourceType" : "customer",
            "customer" : {
              "name" : "Customer test",
              "email" : "jose2@gmail.com",
              "document" : {
                "number" : "97055503019",
                "type" : "cpf"
              },
              "phoneNumber" : "21 98889999099"
            }
          }
        }
      },
      "ChargeResponseSplitRequest" : {
        "summary" : "Card and Split billing example",
        "value" : {
          "merchantId" : "7f8870a2-71c9-4ef0-a531-82000e00b7e1",
          "amount" : 150,
          "currency" : "BRL",
          "statementDescriptor" : "LOJA JOAO",
          "description" : "Descrição longa da cobrança",
          "capture" : false,
          "orderId" : "32c68ff7-902c-408b-b464-cf487c7cda97",
          "paymentMethod" : {
            "paymentType" : "credit",
            "installments" : 1
          },
          "paymentSource" : {
            "sourceType" : "card",
            "card" : {
              "cardNumber" : "5261424250184574",
              "cardCvv" : "321",
              "cardExpirationDate" : "06/2028",
              "cardHolderName" : "JOAO DA SILVA"
            }
          },
          "splitRules" : [ {
            "sellerId" : "32c68557-902c-408b-b464-cf487c7cda97",
            "percentage" : 80,
            "liable" : true,
            "processingFee" : true
          } ]
        }
      },
      "ChargeCardResponse" : {
        "value" : {
          "id" : "148d5db0-f1c3-439f-902d-f1f268086e1d",
          "clientId" : "cc0b1e41-2936-45c5-947f-93995ffcdc00",
          "createdAt" : "2012-06-30 23:59:59 +0000",
          "amount" : 150,
          "currency" : "BRL",
          "orderId" : "32c68ff7-902c-408b-b464-cf487c7cda97",
          "statementDescriptor" : "LOJA JOAO",
          "description" : "Descrição longa da cobrança",
          "capture" : false,
          "status" : "pre_authorized",
          "paymentMethod" : {
            "paymentType" : "credit",
            "installments" : 1
          },
          "paymentSource" : {
            "sourceType" : "card",
            "card" : {
              "cardNumber" : "5261424250184574",
              "cardCvv" : "321",
              "cardExpirationDate" : "06/2028",
              "cardHolderName" : "JOAO DA SILVA"
            }
          },
          "transactionRequests" : [ {
            "id" : "78601913-a176-4d71-b7e8-abb6fc49a340",
            "idempotencyKey" : "fafe857b176e45d6b12e32fcaf228996",
            "providerId" : "2c3b57d8-ee43-4b19-bc8a-949a88c51df1",
            "providerType" : "STRIPE",
            "transactionId" : "ch_3JYE7MHjGFBGEeiP0lfTD3Ob",
            "amount" : 1500,
            "authorizationNsu" : "1cc8391c-f0d5-4b7a-9fcf-653cea26be13",
            "requestStatus" : "success",
            "requestType" : "authorization",
            "responseTs" : "2633ms",
            "createdAt" : "2021-08-12T16:08:39.536Z",
            "updatedAt" : "2021-08-12T16:08:42.212Z",
            "providerAuthorization" : {
              "networkAuthorizationCode" : "00",
              "networkResponseCode" : ""
            }
          } ]
        }
      },
      "ChargePixResponse" : {
        "value" : {
          "id" : "148d5db0-f1c3-439f-902d-f1f268086e1d",
          "clientId" : "cc0b1e41-2936-45c5-947f-93995ffcdc00",
          "createdAt" : "2012-06-30 23:59:59 +0000",
          "amount" : 150,
          "currency" : "BRL",
          "statementDescriptor" : "LOJA JOAO",
          "description" : "Descrição longa da cobrança",
          "capture" : true,
          "status" : "pending",
          "orderId" : "32c68ff7-902c-408b-b464-cf487c7cda97",
          "paymentMethod" : {
            "paymentType" : "pix",
            "expiresIn" : 3600,
            "qrCodeData" : "00020101021126510014BR.GOV.BCB.PIX0129K89VdiUgWN1B3p0IHrgHkNHg9tX5F52040000530398654040.155802BR5913Customer test600062070503***630431C0",
            "qrCodeImageUrl" : "https://...."
          },
          "paymentSource" : {
            "sourceType" : "customer",
            "customerId" : "1cdcf0c9-eb04-4e43-b9b2-b7a4acdead1f"
          },
          "transactionRequests" : [ {
            "id" : "78601913-a176-4d71-b7e8-abb6fc49a340",
            "idempotencyKey" : "fafe857b176e45d6b12e32fcaf228996",
            "providerId" : "2c3b57d8-ee43-4b19-bc8a-949a88c51df1",
            "providerType" : "STRIPE",
            "transactionId" : "ch_3JYE7MHjGFBGEeiP0lfTD3Ob",
            "amount" : 1500,
            "authorizationNsu" : "1cc8391c-f0d5-4b7a-9fcf-653cea26be13",
            "requestStatus" : "success",
            "requestType" : "authorization",
            "responseTs" : "2633ms",
            "createdAt" : "2021-08-12T16:08:39.536Z",
            "updatedAt" : "2021-08-12T16:08:42.212Z",
            "providerAuthorization" : {
              "networkAuthorizationCode" : "00",
              "networkResponseCode" : ""
            }
          } ]
        }
      },
      "ChargeBoletoResponse" : {
        "value" : {
          "id" : "148d5db0-f1c3-439f-902d-f1f268086e1d",
          "clientId" : "cc0b1e41-2936-45c5-947f-93995ffcdc00",
          "createdAt" : "2012-06-30 23:59:59 +0000",
          "amount" : 150,
          "currency" : "BRL",
          "statementDescriptor" : "LOJA JOAO",
          "description" : "Descrição longa da cobrança",
          "capture" : true,
          "status" : "pending",
          "paymentMethod" : {
            "paymentType" : "boleto",
            "expiresDate" : "2021-12-31",
            "barcodeData" : "412343241324321431241341",
            "barcodeImageUrl" : "https://...."
          },
          "paymentSource" : {
            "sourceType" : "customer",
            "customerId" : "1cdcf0c9-eb04-4e43-b9b2-b7a4acdead1f"
          },
          "transactionRequests" : [ {
            "id" : "78601913-a176-4d71-b7e8-abb6fc49a340",
            "idempotencyKey" : "fafe857b176e45d6b12e32fcaf228996",
            "providerId" : "2c3b57d8-ee43-4b19-bc8a-949a88c51df1",
            "providerType" : "STRIPE",
            "transactionId" : "ch_3JYE7MHjGFBGEeiP0lfTD3Ob",
            "amount" : 1500,
            "authorizationNsu" : "1cc8391c-f0d5-4b7a-9fcf-653cea26be13",
            "requestStatus" : "success",
            "requestType" : "authorization",
            "responseTs" : "2633ms",
            "createdAt" : "2021-08-12T16:08:39.536Z",
            "updatedAt" : "2021-08-12T16:08:42.212Z",
            "providerAuthorization" : {
              "networkAuthorizationCode" : "00",
              "networkResponseCode" : ""
            }
          } ]
        }
      },
      "ChargeList" : {
        "value" : {
          "meta" : {
            "itemCount" : 10,
            "totalItems" : 20,
            "itemsPerPage" : 10,
            "totalPages" : 5,
            "currentPage" : 2
          },
          "items" : [ {
            "id" : "148d5db0-f1c3-439f-902d-f1f268086e1d",
            "customerId" : "82aba896-9e37-45b6-aa90-d510c9050596",
            "clientId" : "cc0b1e41-2936-45c5-947f-93995ffcdc00",
            "createdAt" : "2012-06-30 23:59:59 +0000",
            "amount" : 150,
            "currency" : "BRL",
            "statementDescriptor" : "LOJA JOAO",
            "description" : "Descrição longa da cobrança",
            "capture" : false,
            "orderId" : "32c68ff7-902c-408b-b464-cf487c7cda97",
            "paymentMethod" : {
              "paymentType" : "credit",
              "installments" : 1
            },
            "paymentSource" : {
              "sourceType" : "card",
              "cardId" : "148d5db0-f1c3-439f-902d-f1f268086e1d"
            },
            "transactionRequests" : [ {
              "id" : "78601913-a176-4d71-b7e8-abb6fc49a340",
              "idempotencyKey" : "fafe857b176e45d6b12e32fcaf228996",
              "providerId" : "2c3b57d8-ee43-4b19-bc8a-949a88c51df1",
              "providerType" : "STRIPE",
              "transactionId" : "ch_3JYE7MHjGFBGEeiP0lfTD3Ob",
              "amount" : 1500,
              "authorizationNsu" : "1cc8391c-f0d5-4b7a-9fcf-653cea26be13",
              "requestStatus" : "success",
              "requestType" : "authorization",
              "responseTs" : "2633ms",
              "createdAt" : "2021-08-12T16:08:39.536Z",
              "updatedAt" : "2021-08-12T16:08:42.212Z",
              "providerAuthorization" : {
                "networkAuthorizationCode" : "00",
                "networkResponseCode" : ""
              }
            } ]
          } ]
        }
      },
      "ChargeResponseSplit" : {
        "summary" : "Exemplo resposta cobrança Cartão e Split",
        "value" : {
          "id" : "148d5db0-f1c3-439f-902d-f1f268086e1d",
          "clientId" : "cc0b1e41-2936-45c5-947f-93995ffcdc00",
          "createdAt" : "2012-06-30 23:59:59 +0000",
          "amount" : 150,
          "currency" : "BRL",
          "orderId" : "32c68ff7-902c-408b-b464-cf487c7cda97",
          "statementDescriptor" : "LOJA JOAO",
          "description" : "Descrição longa da cobrança",
          "capture" : false,
          "status" : "pre_authorized",
          "paymentMethod" : {
            "paymentType" : "credit",
            "installments" : 1
          },
          "paymentSource" : {
            "sourceType" : "card",
            "cardId" : "148d5db0-f1c3-439f-902d-f1f268086e1d"
          },
          "transactionRequests" : [ {
            "id" : "78601913-a176-4d71-b7e8-abb6fc49a340",
            "idempotencyKey" : "fafe857b176e45d6b12e32fcaf228996",
            "providerId" : "2c3b57d8-ee43-4b19-bc8a-949a88c51df1",
            "providerType" : "STRIPE",
            "transactionId" : "ch_3JYE7MHjGFBGEeiP0lfTD3Ob",
            "amount" : 1500,
            "authorizationNsu" : "1cc8391c-f0d5-4b7a-9fcf-653cea26be13",
            "requestStatus" : "success",
            "requestType" : "authorization",
            "responseTs" : "2633ms",
            "createdAt" : "2021-08-12T16:08:39.536Z",
            "updatedAt" : "2021-08-12T16:08:42.212Z",
            "providerAuthorization" : {
              "networkAuthorizationCode" : "00",
              "networkResponseCode" : ""
            }
          } ],
          "splitRules" : [ {
            "sellerId" : "32c68557-902c-408b-b464-cf487c7cda97",
            "percentage" : 80,
            "liable" : true,
            "processingFee" : true
          } ]
        }
      },
      "CustomerResponse" : {
        "value" : {
          "id" : "82aba896-9e37-45b6-aa90-d510c9050596",
          "clientId" : "cc0b1e41-2936-45c5-947f-93995ffcdc00",
          "createdAt" : "2012-06-30 23:59:59 +0000",
          "name" : "Customer test",
          "email" : "jose2@gmail.com",
          "document" : {
            "number" : "97055503019",
            "type" : "cpf",
            "country" : "BR"
          },
          "phoneNumber" : "21 98889999099",
          "address" : {
            "country" : "BR",
            "state" : "Rio de Janeiro",
            "city" : "Rio de Janeiro",
            "district" : "Leblon",
            "zipCode" : "25650011",
            "street" : "Av Geraldo Cardoso",
            "streetNumber" : "205",
            "complement" : "Apto 203"
          }
        }
      },
      "CustomerList" : {
        "value" : {
          "meta" : {
            "itemCount" : 10,
            "totalItems" : 20,
            "itemsPerPage" : 10,
            "totalPages" : 5,
            "currentPage" : 2
          },
          "items" : [ {
            "id" : "82aba896-9e37-45b6-aa90-d510c9050596",
            "clientId" : "cc0b1e41-2936-45c5-947f-93995ffcdc00",
            "createdAt" : "2012-06-30 23:59:59 +0000",
            "name" : "Customer test",
            "email" : "jose2@gmail.com",
            "phoneNumber" : "21 98889999099",
            "document" : {
              "number" : "97055503019",
              "type" : "cpf",
              "country" : "BR"
            },
            "address" : {
              "country" : "BR",
              "state" : "Rio de Janeiro",
              "city" : "Rio de Janeiro",
              "district" : "Leblon",
              "zipCode" : "25650011",
              "street" : "Av Geraldo Cardoso",
              "streetNumber" : "205",
              "complement" : "Apto 203"
            }
          } ]
        }
      },
      "CustomerRequest" : {
        "value" : {
          "name" : "Customer test",
          "email" : "jose2@gmail.com",
          "phoneNumber" : "21 98889999099",
          "document" : {
            "number" : "97055503019",
            "type" : "cpf",
            "country" : "BR"
          },
          "address" : {
            "country" : "BR",
            "state" : "Rio de Janeiro",
            "city" : "Rio de Janeiro",
            "district" : "Leblon",
            "zipCode" : "25650011",
            "street" : "Av Geraldo Cardoso",
            "streetNumber" : "205",
            "complement" : "Apto 203"
          }
        }
      },
      "MerchantResponse" : {
        "value" : {
          "id" : "69aea152-ba70-49a3-a31c-044ac1651146",
          "updatedAt" : "2021-03-12T15:57:20.239Z",
          "createdAt" : "2021-03-12T15:57:20.239Z",
          "clientId" : "523afbe7-36dc-4654-9dba-e7167d0e5e2d",
          "mcc" : "4040",
          "status" : true,
          "providers" : [ {
            "id" : "72cc1ff1-5f6e-4eb2-9cc5-6a3a85525e4b",
            "updatedAt" : "2021-03-12T15:57:20.239Z",
            "createdAt" : "2021-03-12T15:57:20.239Z",
            "name" : "PagSeguro",
            "priority" : 1,
            "credentials" : {
              "type" : "PAGSEGURO",
              "token" : "1B2B32530CA23412AB63843240F5633",
              "email" : "email@gmail.com"
            }
          }, {
            "id" : "2cf5c350-ee26-4557-a47d-9efe1765df51",
            "updatedAt" : "2021-03-12T15:57:20.239Z",
            "createdAt" : "2021-03-12T15:57:20.239Z",
            "deletedAt" : null,
            "idempotencyKey" : null,
            "requestId" : null,
            "name" : "pagarme",
            "priority" : 2,
            "credentials" : {
              "type" : "PAGARME",
              "apiKey" : "ak_test_Kaa8pfXJ3WOUdCsMQiRYuV66rJZLuA"
            }
          } ]
        }
      },
      "MerchantList" : {
        "value" : {
          "meta" : {
            "itemCount" : 10,
            "totalItems" : 20,
            "itemsPerPage" : 10,
            "totalPages" : 5,
            "currentPage" : 2
          },
          "items" : [ {
            "id" : "69aea152-ba70-49a3-a31c-044ac1651146",
            "updatedAt" : "2021-03-12T15:57:20.239Z",
            "createdAt" : "2021-03-12T15:57:20.239Z",
            "clientId" : "523afbe7-36dc-4654-9dba-e7167d0e5e2d",
            "mcc" : "4040",
            "status" : true,
            "providers" : [ {
              "id" : "72cc1ff1-5f6e-4eb2-9cc5-6a3a85525e4b",
              "updatedAt" : "2021-03-12T15:57:20.239Z",
              "createdAt" : "2021-03-12T15:57:20.239Z",
              "name" : "PagSeguro",
              "priority" : 1,
              "credentials" : {
                "type" : "PAGSEGURO",
                "token" : "1B2B32530CA2464F8AB63843240F5633",
                "email" : "email@gmail.com"
              }
            }, {
              "id" : "2cf5c350-ee26-4557-a47d-9efe1765df51",
              "updatedAt" : "2021-03-12T15:57:20.239Z",
              "createdAt" : "2021-03-12T15:57:20.239Z",
              "deletedAt" : null,
              "idempotencyKey" : null,
              "requestId" : null,
              "name" : "pagarme",
              "priority" : 2,
              "credentials" : {
                "type" : "PAGARME",
                "apiKey" : "ak_test_Kaa8pfXJ3WOUdCsMQiRYuV66rJZLuA"
              }
            } ]
          } ]
        }
      },
      "MerchantRequest" : {
        "value" : {
          "mcc" : "4040",
          "status" : true,
          "providers" : [ {
            "name" : "PagSeguro",
            "priority" : 1,
            "credentials" : {
              "type" : "PAGSEGURO",
              "token" : "1B2B32530CA24641324AB63843240F5633",
              "email" : "email@gmail.com"
            }
          }, {
            "name" : "pagarme",
            "priority" : 2,
            "credentials" : {
              "type" : "PAGARME",
              "apiKey" : "ak_test_Kaa8pf3142dCsMQiRYuV66rJZLuA"
            }
          } ]
        }
      },
      "LinkCardRequest" : {
        "value" : {
          "cardId" : "82aba896-9e37-45b6-aa90-d510c9050596"
        }
      },
      "CustomerCardList" : {
        "value" : {
          "meta" : {
            "itemCount" : 10,
            "totalItems" : 20,
            "itemsPerPage" : 10,
            "totalPages" : 5,
            "currentPage" : 2
          },
          "items" : [ {
            "id" : "148d5db0-f1c3-439f-902d-f1f268086e1d",
            "customerId" : "82aba896-9e37-45b6-aa90-d510c9050596",
            "clientId" : "cc0b1e41-2936-45c5-947f-93995ffcdc00",
            "expirationMonth" : "12",
            "expirationYear" : "2026",
            "brand" : "Visa",
            "cvvChecked" : true,
            "fingerprint" : "cbd4a441-c63c-4dee-ac6b-bfa7fa1df818",
            "first6digits" : "401959",
            "last4digits" : "9339",
            "createdAt" : "2012-06-30 23:59:59 +0000",
            "status" : "active"
          } ]
        }
      },
      "WebhookRequest" : {
        "value" : {
          "event" : "transaction.authorized",
          "endpoint" : "https://enuqkxq2lu8be0y.m.pipedream.net",
          "version" : 1,
          "status" : true
        }
      },
      "WebhookResponse" : {
        "value" : {
          "id" : "31c142ad-4c30-4964-ba24-2df0f2bbb745",
          "event" : "transaction.authorized",
          "endpoint" : "https://enuqkxq2lu8be0y.m.pipedream.net",
          "version" : 1,
          "status" : true,
          "clientId" : "cc0b1e41-2936-45c5-947f-93995ffcdc00",
          "createdAt" : "2021-07-06T21:03:36.590Z",
          "updatedAt" : "2021-07-06T21:03:36.590Z"
        }
      },
      "WebhookList" : {
        "value" : {
          "meta" : {
            "itemCount" : 10,
            "totalItems" : 20,
            "itemsPerPage" : 10,
            "totalPages" : 5,
            "currentPage" : 2
          },
          "items" : [ {
            "id" : "31c142ad-4c30-4964-ba24-2df0f2bbb745",
            "event" : "transaction.authorized",
            "endpoint" : "https://enuqkxq2lu8be0y.m.pipedream.net",
            "version" : 1,
            "status" : true,
            "clientId" : "cc0b1e41-2936-45c5-947f-93995ffcdc00",
            "createdAt" : "2021-07-06T21:03:36.590Z",
            "updatedAt" : "2021-07-06T21:03:36.590Z"
          } ]
        }
      },
      "Event" : {
        "value" : {
          "id" : "5616b19e-4d99-4bd3-b415-4990e5cab4f4",
          "apiVersion" : "1",
          "object" : "transaction",
          "event" : "authorized",
          "createdAt" : "2021-07-05T18:56:08.672Z",
          "data" : {
            "id\"" : "242b9be8-cd60-461d-af27-f31e3d6e3fb7",
            "updatedAt\"" : "2021-07-05T18:56:08.247Z",
            "createdAt\"" : "2021-07-05T18:56:08.247Z",
            "amount\"" : 1500,
            "currency" : "BRL",
            "originalAmount\"" : 1500,
            "installments\"" : 1,
            "clientId\"" : "cc0b1e41-2936-45c5-947f-93995ffcdc00",
            "description\"" : null,
            "statementDescriptor\"" : "LOJA JOAO",
            "status\"" : "authorized",
            "capture\"" : true,
            "fee\"" : null,
            "feeAmount\"" : null
          }
        }
      },
      "SplitRules" : {
        "value" : {
          "splitRules" : [ {
            "sellerId" : "32c68557-902c-408b-b464-cf487c7cda97",
            "percentage" : 80,
            "liable" : true,
            "processingFee" : true
          } ]
        }
      }
    }
  }
}