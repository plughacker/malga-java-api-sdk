/*
 * Documentação Malga API
 * # Authentication  Os serviços de API da Malga são protegidos através de chaves de acesso. Você pode gerenciar suas chaves de acesso através do seu dashboard.  É importante armazenar suas chaves de maneira privada e segura uma vez que elas possuem privilégios de alteração na sua conta. Não compartilhe suas chaves, não deixe elas fixadas no seu código e nem armazene elas no seu servidor de controle de versão. Recomendamos utilizar variáveis de ambiente secretas para deixar a chave disponível para sua aplicação.  A Autenticação para todos os chamadas da API é feita através de headers HTTP, sendo necessário informar seu identificador de cliente na Malga e a chave secreta de acesso.  ## X-Client-ID  Identificador única da sua conta na Malga. Deve ser enviado no header obrigatóriamente em todas as requisições feitas a API.  | Security Scheme Type | API Key | |-----------------------|-----------| | Header parameter name | `X-Client-ID` |  ## X-Api-Key  Sua chave de acesso a API. Funciona em par com o client-id devendo ser enviado no header obrigatóriamente em todas as requisições feitas a API.  | Security Scheme Type | API Key | |-----------------------|-----------| | Header parameter name | `X-Api-Key` |  ## Exemplo de requisicão autenticada  ```bash   curl --location --request GET 'https://api.malga.io/v1/' \\     --header 'X-Client-Id: <YOUR_CLIENT_ID>' \\     --header 'X-Api-Key: <YOUR_SECRET_KEY>' ``` 
 *
 * The version of the OpenAPI document: 0.5
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.malga.client.api;

import com.malga.client.ApiException;
import com.malga.client.api.model.*;
import org.junit.jupiter.api.Test;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNotNull;


/**
 * API tests for ChargesApi
 */
public class ChargesApiTest extends BaseApiTest{


    /**
     * Realizar nova cobrança
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void chargePreAuthorizationTest() throws ApiException {

        ChargesApi chargesApi = new ChargesApi(this.getDefaulClientApi());

        ChargeRequest chargeRequest = this.createCardChargeRequest();
        ChargeResponse chargeResponse = chargesApi.createCharge(chargeRequest);

        assertNotNull(chargeResponse.getId());

        assertEquals(1000, chargeResponse.getAmount());
        assertNotNull(chargeResponse.getClientId());
        assertNotNull(chargeResponse.getMerchantId());
        assertEquals("should be statement descriptor", chargeResponse.getStatementDescriptor());

        assertEquals("card", chargeResponse.getPaymentSource().getSourceTypeCard().getSourceType());
        assertNotNull(chargeResponse.getPaymentSource().getSourceTypeCard().getCardId());

        assertEquals(PaymentMethodCard.PaymentTypeEnum.CREDIT, chargeResponse.getPaymentMethod().getPaymentMethodCard().getPaymentType());
        assertEquals(1, chargeResponse.getPaymentMethod().getPaymentMethodCard().getInstallments());

        assertEquals("1234567890", chargeResponse.getOrderId());

        assertEquals(ChargeResponse.StatusEnum.PRE_AUTHORIZED, chargeResponse.getStatus());
    }

    @Test
    public void chargeAuthorizationTest() throws ApiException {

        ChargesApi chargesApi = new ChargesApi(this.getDefaulClientApi());

        ChargeRequest chargeRequest = this.createCardChargeRequest();
        chargeRequest.capture(true);

        ChargeResponse chargeResponse = chargesApi.createCharge(chargeRequest);

        assertNotNull(chargeResponse.getId());

        assertEquals(1000, chargeResponse.getAmount());
        assertEquals(ChargeResponse.StatusEnum.AUTHORIZED, chargeResponse.getStatus());
    }

    @Test
    public void chargeGetByIdTest() throws ApiException {

        ChargesApi chargesApi = new ChargesApi(this.getDefaulClientApi());

        ChargeRequest chargeRequest = this.createCardChargeRequest();
        chargeRequest.capture(true);

        ChargeResponse chargeResponse = chargesApi.createCharge(chargeRequest);

        ChargeResponse chargeResponseById = chargesApi.getChargeByid(chargeResponse.getId());
        assertNotNull(chargeResponseById.getId());

        assertEquals(1000, chargeResponseById.getAmount());
        assertNotNull(chargeResponse.getClientId());
        assertNotNull(chargeResponse.getMerchantId());
        assertEquals("should be statement descriptor", chargeResponseById.getStatementDescriptor());

        assertEquals("card", chargeResponseById.getPaymentSource().getSourceTypeCard().getSourceType());
        assertNotNull(chargeResponseById.getPaymentSource().getSourceTypeCard().getCardId());

        assertEquals(PaymentMethodCard.PaymentTypeEnum.CREDIT, chargeResponseById.getPaymentMethod().getPaymentMethodCard().getPaymentType());
        assertEquals(1, chargeResponseById.getPaymentMethod().getPaymentMethodCard().getInstallments());

        assertEquals("1234567890", chargeResponseById.getOrderId());

        assertEquals(ChargeResponse.StatusEnum.AUTHORIZED, chargeResponseById.getStatus());
    }

    @Test
    public void chargeCaptureTest() throws ApiException {

        ChargesApi chargesApi = new ChargesApi(this.getDefaulClientApi());

        ChargeRequest chargeRequest = this.createCardChargeRequest();

        ChargeResponse chargeResponse = chargesApi.createCharge(chargeRequest);
        assertEquals(ChargeResponse.StatusEnum.PRE_AUTHORIZED, chargeResponse.getStatus());

        ChargeResponse chargeCaptureResponse = chargesApi.captureCharge(chargeResponse.getId(), (new CaptureRequest()).amount(100));
        assertNotNull(chargeCaptureResponse.getId());

        assertEquals(100, chargeCaptureResponse.getAmount());
        assertEquals(1000, chargeCaptureResponse.getOriginalAmount());

        assertEquals(ChargeResponse.StatusEnum.AUTHORIZED, chargeCaptureResponse.getStatus());
    }

    @Test
    public void chargePartialRefundTest() throws ApiException {

        ChargesApi chargesApi = new ChargesApi(this.getDefaulClientApi());

        ChargeRequest chargeRequest = this.createCardChargeRequest();

        ChargeResponse chargeResponse = chargesApi.createCharge(chargeRequest);
        assertEquals(ChargeResponse.StatusEnum.PRE_AUTHORIZED, chargeResponse.getStatus());

        ChargeResponse chargeCaptureResponse = chargesApi.voidCharge(chargeResponse.getId(), (new VoidRequest()).amount(100));
        assertNotNull(chargeCaptureResponse.getId());

        assertEquals(900, chargeCaptureResponse.getAmount());
        assertEquals(1000, chargeCaptureResponse.getOriginalAmount());

        assertEquals(ChargeResponse.StatusEnum.PRE_AUTHORIZED, chargeCaptureResponse.getStatus());
    }

    @Test
    public void chargeFailedTest() throws ApiException {

        ChargesApi chargesApi = new ChargesApi(this.getDefaulClientApi());

        ChargeRequest chargeRequest = this.createCardChargeNotAuthorizedRequest();

        ChargeResponse chargeResponse = chargesApi.createCharge(chargeRequest);
        assertEquals(ChargeResponse.StatusEnum.FAILED, chargeResponse.getStatus());
    }

    @Test
    public void chargePixSuccessTest() throws ApiException {

        ChargesApi chargesApi = new ChargesApi(this.getDefaulClientApi());

        ChargeRequest chargeRequest = this.createPixChargeRequest();

        ChargeResponse chargeResponse = chargesApi.createCharge(chargeRequest);

        assertNotNull(chargeResponse.getId());

        assertEquals(1000, chargeResponse.getAmount());
        assertNotNull(chargeResponse.getClientId());
        assertNotNull(chargeResponse.getMerchantId());
        assertEquals("should be statement descriptor", chargeResponse.getStatementDescriptor());

        assertEquals("customer", chargeResponse.getPaymentSource().getSourceTypeCustomer().getSourceType());
        assertNotNull(chargeResponse.getPaymentSource().getSourceTypeCustomer().getCustomerId());

        assertEquals(PaymentMethodPixResponse.PaymentTypeEnum.PIX, chargeResponse.getPaymentMethod().getPaymentMethodPixResponse().getPaymentType());
        assertNotNull(chargeResponse.getPaymentMethod().getPaymentMethodPixResponse().getQrCodeData());
        assertNotNull(chargeResponse.getPaymentMethod().getPaymentMethodPixResponse().getQrCodeImageUrl());
        assertEquals(3600, chargeResponse.getPaymentMethod().getPaymentMethodPixResponse().getExpiresIn());

        assertEquals("1234567890", chargeResponse.getOrderId());

        assertEquals(ChargeResponse.StatusEnum.PENDING, chargeResponse.getStatus());
    }

    @Test
    public void chargeBoletoSuccessTest() throws ApiException {

        ChargesApi chargesApi = new ChargesApi(this.getDefaulClientApi());

        ChargeRequest chargeRequest = this.createBoletoChargeRequest();

        ChargeResponse chargeResponse = chargesApi.createCharge(chargeRequest);

        assertNotNull(chargeResponse.getId());

        assertEquals(1000, chargeResponse.getAmount());
        assertNotNull(chargeResponse.getClientId());
        assertNotNull(chargeResponse.getMerchantId());
        assertEquals("should be statement descriptor", chargeResponse.getStatementDescriptor());

        assertEquals("customer", chargeResponse.getPaymentSource().getSourceTypeCustomer().getSourceType());
        assertNotNull(chargeResponse.getPaymentSource().getSourceTypeCustomer().getCustomerId());

        assertEquals(PaymentMethodBoletoResponse.PaymentTypeEnum.BOLETO, chargeResponse.getPaymentMethod().getPaymentMethodBoletoResponse().getPaymentType());
        assertNotNull(chargeResponse.getPaymentMethod().getPaymentMethodBoletoResponse().getBarcodeData());
        assertNotNull(chargeResponse.getPaymentMethod().getPaymentMethodBoletoResponse().getBarcodeImageUrl());
        assertEquals("2021-12-31", chargeResponse.getPaymentMethod().getPaymentMethodBoletoResponse().getExpiresDate());

        assertEquals("1234567890", chargeResponse.getOrderId());

        assertEquals(ChargeResponse.StatusEnum.PENDING, chargeResponse.getStatus());
    }

}
