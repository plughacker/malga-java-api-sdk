/*
 * Malga API Documentation
 * # Authentication  Malgaâ€™s API services are protected through access keys. 
 *
 * The version of the OpenAPI document: 0.5
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.malga.client.api;

import io.malga.client.ApiException;
import io.malga.client.ApiResponse;
import io.malga.model.customers.CustomerRequest;
import io.malga.model.customers.CustomerResponse;
import io.malga.model.customers.ErrorResponse;
import io.malga.model.customers.ErrorResponseError;
import io.malga.service.customers.CustomersApi;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;

import java.io.IOException;

import static org.junit.jupiter.api.Assertions.*;

/**
 * API tests for CustomersApi
 */
public class CustomersApiTest extends BaseApiTest{

    /**
     * Create new customer
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createCustomerTest() throws ApiException {
        CustomerRequest customerRequest = this.getCustomerRequest();

        CustomersApi customersApi = new CustomersApi(this.getDefaulClientApi());

        CustomerResponse customerResponse = customersApi.createCustomer(customerRequest, true);

        assertNotNull(customerResponse.getId());
        assertNotNull(customerResponse.getCreatedAt());

        assertEquals("should be customer name", customerResponse.getName());
        assertEquals("97055503019", customerResponse.getDocument().getNumber());
        assertEquals("cpf", customerResponse.getDocument().getType());
        assertEquals("BR", customerResponse.getDocument().getCountry());
        assertEquals("shouldbe@email.com", customerResponse.getEmail());
        assertEquals("21999999999", customerResponse.getPhoneNumber());
        assertEquals("BR", customerResponse.getAddress().getCountry());
        assertEquals("Rio de Janeiro", customerResponse.getAddress().getCity());
        assertEquals("should be complement", customerResponse.getAddress().getComplement());
        assertEquals("Leblon", customerResponse.getAddress().getDistrict());
        assertEquals("RJ", customerResponse.getAddress().getState());
        assertEquals("Rua A", customerResponse.getAddress().getStreet());
        assertEquals("123", customerResponse.getAddress().getStreetNumber());
        assertEquals("12345678", customerResponse.getAddress().getZipCode());
    }

    /**
     * Create new customer
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createCustomerConflictTest() throws IOException {
        CustomerRequest customerRequest = this.getCustomerRequest();

        CustomersApi customersApi = new CustomersApi(this.getDefaulClientApi());

        ApiException exception = assertThrows(ApiException.class, () -> {
            customersApi.createCustomer(customerRequest, false);
        });

        assertEquals(409, exception.getCode());

        ErrorResponse error = ErrorResponse.fromJson(exception.getResponseBody());

        assertEquals("Document number #97055503019 already exists.", error.getError().getMessage());
        assertEquals("409", error.getError().getCode());
        Assertions.assertEquals(ErrorResponseError.TypeEnum.CONFLICT, error.getError().getType());


    }

    /**
     * Delete customer
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteCustomerTest() throws ApiException {
        CustomerRequest customerRequest = this.getCustomerRequest();

        CustomersApi customersApi = new CustomersApi(this.getDefaulClientApi());

        CustomerResponse customerResponse = customersApi.createCustomer(customerRequest, true);
        ApiResponse deteleResponse = customersApi.deleteCustomerWithHttpInfo(customerResponse.getId());
        assertEquals(200, deteleResponse.getStatusCode());
    }

    /**
     * Get customer details
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getCustomerTest() throws ApiException {
        CustomerRequest customerRequest = this.getCustomerRequest();

        CustomersApi customersApi = new CustomersApi(this.getDefaulClientApi());

        CustomerResponse createResponse = customersApi.createCustomer(customerRequest, true);
        CustomerResponse customerResponse = customersApi.getCustomerById(createResponse.getId());

        assertEquals("should be customer name", customerResponse.getName());
        assertEquals("97055503019", customerResponse.getDocument().getNumber());
        assertEquals("cpf", customerResponse.getDocument().getType());
        assertEquals("BR", customerResponse.getDocument().getCountry());
        assertEquals("shouldbe@email.com", customerResponse.getEmail());
        assertEquals("21999999999", customerResponse.getPhoneNumber());
        assertEquals("BR", customerResponse.getAddress().getCountry());
        assertEquals("Rio de Janeiro", customerResponse.getAddress().getCity());
        assertEquals("should be complement", customerResponse.getAddress().getComplement());
        assertEquals("Leblon", customerResponse.getAddress().getDistrict());
        assertEquals("RJ", customerResponse.getAddress().getState());
        assertEquals("Rua A", customerResponse.getAddress().getStreet());
        assertEquals("123", customerResponse.getAddress().getStreetNumber());
        assertEquals("12345678", customerResponse.getAddress().getZipCode());
    }
//
//    /**
//     * List customer cards
//     *
//     * @throws ApiException if the Api call fails
//     */
//    @Test
//    public void getCustomerCardsTest() throws ApiException {
//        String customerId = null;
//        CustomerCardList response = api.getCustomerCards(customerId);
//        // TODO: test validations
//    }
//
//    /**
//     * Add credit card to customers
//     *
//     * @throws ApiException if the Api call fails
//     */
//    @Test
//    public void linkCardTest() throws ApiException {
//        String customerId = null;
//        LinkCardRequest linkCardRequest = null;
//        api.linkCard(customerId, linkCardRequest);
//        // TODO: test validations
//    }

}
