/*
 * Malga API Documentation
 * # Authentication  Malgaâ€™s API services are protected through access keys. 
 *
 * The version of the OpenAPI document: 0.5
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.malga.client.api.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.malga.client.api.model.SplitRulesFaresSchema;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.UUID;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.malga.client.JSON;

/**
 * SplitRulesInner
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-06-22T19:10:47.032351-03:00[America/Sao_Paulo]")
public class SplitRulesInner {
  public static final String SERIALIZED_NAME_SELLER_ID = "sellerId";
  @SerializedName(SERIALIZED_NAME_SELLER_ID)
  private UUID sellerId;

  public static final String SERIALIZED_NAME_PERCENTAGE = "percentage";
  @SerializedName(SERIALIZED_NAME_PERCENTAGE)
  private BigDecimal percentage;

  public static final String SERIALIZED_NAME_AMOUNT = "amount";
  @SerializedName(SERIALIZED_NAME_AMOUNT)
  private BigDecimal amount;

  public static final String SERIALIZED_NAME_PROCESSING_FEE = "processingFee";
  @SerializedName(SERIALIZED_NAME_PROCESSING_FEE)
  private Boolean processingFee;

  public static final String SERIALIZED_NAME_LIABLE = "liable";
  @SerializedName(SERIALIZED_NAME_LIABLE)
  private Boolean liable;

  public static final String SERIALIZED_NAME_FARES = "fares";
  @SerializedName(SERIALIZED_NAME_FARES)
  private SplitRulesFaresSchema fares;

  public SplitRulesInner() {
  }

  public SplitRulesInner sellerId(UUID sellerId) {
    
    this.sellerId = sellerId;
    return this;
  }

   /**
   * seller id
   * @return sellerId
  **/
  @javax.annotation.Nullable

  public UUID getSellerId() {
    return sellerId;
  }


  public void setSellerId(UUID sellerId) {
    this.sellerId = sellerId;
  }


  public SplitRulesInner percentage(BigDecimal percentage) {
    
    this.percentage = percentage;
    return this;
  }

   /**
   * percentage of the transaction amount that will be sent to the receiver
   * @return percentage
  **/
  @javax.annotation.Nullable

  public BigDecimal getPercentage() {
    return percentage;
  }


  public void setPercentage(BigDecimal percentage) {
    this.percentage = percentage;
  }


  public SplitRulesInner amount(BigDecimal amount) {
    
    this.amount = amount;
    return this;
  }

   /**
   * amount that will be sent to the receiver
   * @return amount
  **/
  @javax.annotation.Nullable

  public BigDecimal getAmount() {
    return amount;
  }


  public void setAmount(BigDecimal amount) {
    this.amount = amount;
  }


  public SplitRulesInner processingFee(Boolean processingFee) {
    
    this.processingFee = processingFee;
    return this;
  }

   /**
   * indicates whether the recipient linked to the rule will be charged transaction fees
   * @return processingFee
  **/
  @javax.annotation.Nullable

  public Boolean getProcessingFee() {
    return processingFee;
  }


  public void setProcessingFee(Boolean processingFee) {
    this.processingFee = processingFee;
  }


  public SplitRulesInner liable(Boolean liable) {
    
    this.liable = liable;
    return this;
  }

   /**
   * indicates whether the linked recipient will assume the chargeback risks of the transaction
   * @return liable
  **/
  @javax.annotation.Nullable

  public Boolean getLiable() {
    return liable;
  }


  public void setLiable(Boolean liable) {
    this.liable = liable;
  }


  public SplitRulesInner fares(SplitRulesFaresSchema fares) {
    
    this.fares = fares;
    return this;
  }

   /**
   * Get fares
   * @return fares
  **/
  @javax.annotation.Nullable

  public SplitRulesFaresSchema getFares() {
    return fares;
  }


  public void setFares(SplitRulesFaresSchema fares) {
    this.fares = fares;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the SplitRulesInner instance itself
   */
  public SplitRulesInner putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SplitRulesInner splitRulesInner = (SplitRulesInner) o;
    return Objects.equals(this.sellerId, splitRulesInner.sellerId) &&
        Objects.equals(this.percentage, splitRulesInner.percentage) &&
        Objects.equals(this.amount, splitRulesInner.amount) &&
        Objects.equals(this.processingFee, splitRulesInner.processingFee) &&
        Objects.equals(this.liable, splitRulesInner.liable) &&
        Objects.equals(this.fares, splitRulesInner.fares)&&
        Objects.equals(this.additionalProperties, splitRulesInner.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(sellerId, percentage, amount, processingFee, liable, fares, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SplitRulesInner {\n");
    sb.append("    sellerId: ").append(toIndentedString(sellerId)).append("\n");
    sb.append("    percentage: ").append(toIndentedString(percentage)).append("\n");
    sb.append("    amount: ").append(toIndentedString(amount)).append("\n");
    sb.append("    processingFee: ").append(toIndentedString(processingFee)).append("\n");
    sb.append("    liable: ").append(toIndentedString(liable)).append("\n");
    sb.append("    fares: ").append(toIndentedString(fares)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("sellerId");
    openapiFields.add("percentage");
    openapiFields.add("amount");
    openapiFields.add("processingFee");
    openapiFields.add("liable");
    openapiFields.add("fares");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to SplitRulesInner
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!SplitRulesInner.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SplitRulesInner is not found in the empty JSON string", SplitRulesInner.openapiRequiredFields.toString()));
        }
      }
      if ((jsonObj.get("sellerId") != null && !jsonObj.get("sellerId").isJsonNull()) && !jsonObj.get("sellerId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sellerId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sellerId").toString()));
      }
      // validate the optional field `fares`
      if (jsonObj.get("fares") != null && !jsonObj.get("fares").isJsonNull()) {
        SplitRulesFaresSchema.validateJsonObject(jsonObj.getAsJsonObject("fares"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SplitRulesInner.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SplitRulesInner' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SplitRulesInner> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SplitRulesInner.class));

       return (TypeAdapter<T>) new TypeAdapter<SplitRulesInner>() {
           @Override
           public void write(JsonWriter out, SplitRulesInner value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additional properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public SplitRulesInner read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             SplitRulesInner instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of SplitRulesInner given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of SplitRulesInner
  * @throws IOException if the JSON string is invalid with respect to SplitRulesInner
  */
  public static SplitRulesInner fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SplitRulesInner.class);
  }

 /**
  * Convert an instance of SplitRulesInner to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

