/*
 * Malga API Documentation
 * # Authentication  Malgaâ€™s API services are protected through access keys. 
 *
 * The version of the OpenAPI document: 0.5
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.malga.client.api.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.malga.client.api.model.SessionSourceTypeCard;
import com.malga.client.api.model.SessionSourceTypeCardOneShot;
import com.malga.client.api.model.SessionSourceTypeCustomer;
import com.malga.client.api.model.SessionSourceTypeCustomerOneShot;
import com.malga.client.api.model.SessionSourceTypeToken;
import com.malga.client.api.model.SourceTypeCardOneShotCard;
import com.malga.client.api.model.SourceTypeCustomerOneShotCustomer;
import java.io.IOException;

import javax.ws.rs.core.GenericType;

import java.io.IOException;
import java.lang.reflect.Type;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.ArrayList;
import java.util.Collections;
import java.util.HashSet;
import java.util.HashMap;
import java.util.Map;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.JsonPrimitive;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonSerializationContext;
import com.google.gson.JsonSerializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;

import com.malga.client.JSON;

@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-06-21T00:10:35.774518-03:00[America/Sao_Paulo]")
public class SessionChargeRequestPaymentSource extends AbstractOpenApiSchema {
    private static final Logger log = Logger.getLogger(SessionChargeRequestPaymentSource.class.getName());

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!SessionChargeRequestPaymentSource.class.isAssignableFrom(type.getRawType())) {
                return null; // this class only serializes 'SessionChargeRequestPaymentSource' and its subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<SessionSourceTypeCard> adapterSessionSourceTypeCard = gson.getDelegateAdapter(this, TypeToken.get(SessionSourceTypeCard.class));
            final TypeAdapter<SessionSourceTypeCardOneShot> adapterSessionSourceTypeCardOneShot = gson.getDelegateAdapter(this, TypeToken.get(SessionSourceTypeCardOneShot.class));
            final TypeAdapter<SessionSourceTypeCustomer> adapterSessionSourceTypeCustomer = gson.getDelegateAdapter(this, TypeToken.get(SessionSourceTypeCustomer.class));
            final TypeAdapter<SessionSourceTypeCustomerOneShot> adapterSessionSourceTypeCustomerOneShot = gson.getDelegateAdapter(this, TypeToken.get(SessionSourceTypeCustomerOneShot.class));
            final TypeAdapter<SessionSourceTypeToken> adapterSessionSourceTypeToken = gson.getDelegateAdapter(this, TypeToken.get(SessionSourceTypeToken.class));

            return (TypeAdapter<T>) new TypeAdapter<SessionChargeRequestPaymentSource>() {
                @Override
                public void write(JsonWriter out, SessionChargeRequestPaymentSource value) throws IOException {
                    if (value == null || value.getActualInstance() == null) {
                        elementAdapter.write(out, null);
                        return;
                    }

                    // check if the actual instance is of the type `SessionSourceTypeCard`
                    if (value.getActualInstance() instanceof SessionSourceTypeCard) {
                        JsonObject obj = adapterSessionSourceTypeCard.toJsonTree((SessionSourceTypeCard)value.getActualInstance()).getAsJsonObject();
                        elementAdapter.write(out, obj);
                        return;
                    }

                    // check if the actual instance is of the type `SessionSourceTypeCardOneShot`
                    if (value.getActualInstance() instanceof SessionSourceTypeCardOneShot) {
                        JsonObject obj = adapterSessionSourceTypeCardOneShot.toJsonTree((SessionSourceTypeCardOneShot)value.getActualInstance()).getAsJsonObject();
                        elementAdapter.write(out, obj);
                        return;
                    }

                    // check if the actual instance is of the type `SessionSourceTypeCustomer`
                    if (value.getActualInstance() instanceof SessionSourceTypeCustomer) {
                        JsonObject obj = adapterSessionSourceTypeCustomer.toJsonTree((SessionSourceTypeCustomer)value.getActualInstance()).getAsJsonObject();
                        elementAdapter.write(out, obj);
                        return;
                    }

                    // check if the actual instance is of the type `SessionSourceTypeCustomerOneShot`
                    if (value.getActualInstance() instanceof SessionSourceTypeCustomerOneShot) {
                        JsonObject obj = adapterSessionSourceTypeCustomerOneShot.toJsonTree((SessionSourceTypeCustomerOneShot)value.getActualInstance()).getAsJsonObject();
                        elementAdapter.write(out, obj);
                        return;
                    }

                    // check if the actual instance is of the type `SessionSourceTypeToken`
                    if (value.getActualInstance() instanceof SessionSourceTypeToken) {
                        JsonObject obj = adapterSessionSourceTypeToken.toJsonTree((SessionSourceTypeToken)value.getActualInstance()).getAsJsonObject();
                        elementAdapter.write(out, obj);
                        return;
                    }

                    throw new IOException("Failed to serialize as the type doesn't match oneOf schemas: SessionSourceTypeCard, SessionSourceTypeCardOneShot, SessionSourceTypeCustomer, SessionSourceTypeCustomerOneShot, SessionSourceTypeToken");
                }

                @Override
                public SessionChargeRequestPaymentSource read(JsonReader in) throws IOException {
                    Object deserialized = null;
                    JsonObject jsonObject = elementAdapter.read(in).getAsJsonObject();

                    int match = 0;
                    ArrayList<String> errorMessages = new ArrayList<>();
                    TypeAdapter actualAdapter = elementAdapter;

                    // deserialize SessionSourceTypeCard
                    try {
                        // validate the JSON object to see if any exception is thrown
                        SessionSourceTypeCard.validateJsonObject(jsonObject);
                        actualAdapter = adapterSessionSourceTypeCard;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'SessionSourceTypeCard'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for SessionSourceTypeCard failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'SessionSourceTypeCard'", e);
                    }

                    // deserialize SessionSourceTypeCardOneShot
                    try {
                        // validate the JSON object to see if any exception is thrown
                        SessionSourceTypeCardOneShot.validateJsonObject(jsonObject);
                        actualAdapter = adapterSessionSourceTypeCardOneShot;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'SessionSourceTypeCardOneShot'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for SessionSourceTypeCardOneShot failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'SessionSourceTypeCardOneShot'", e);
                    }

                    // deserialize SessionSourceTypeCustomer
                    try {
                        // validate the JSON object to see if any exception is thrown
                        SessionSourceTypeCustomer.validateJsonObject(jsonObject);
                        actualAdapter = adapterSessionSourceTypeCustomer;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'SessionSourceTypeCustomer'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for SessionSourceTypeCustomer failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'SessionSourceTypeCustomer'", e);
                    }

                    // deserialize SessionSourceTypeCustomerOneShot
                    try {
                        // validate the JSON object to see if any exception is thrown
                        SessionSourceTypeCustomerOneShot.validateJsonObject(jsonObject);
                        actualAdapter = adapterSessionSourceTypeCustomerOneShot;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'SessionSourceTypeCustomerOneShot'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for SessionSourceTypeCustomerOneShot failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'SessionSourceTypeCustomerOneShot'", e);
                    }

                    // deserialize SessionSourceTypeToken
                    try {
                        // validate the JSON object to see if any exception is thrown
                        SessionSourceTypeToken.validateJsonObject(jsonObject);
                        actualAdapter = adapterSessionSourceTypeToken;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'SessionSourceTypeToken'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for SessionSourceTypeToken failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'SessionSourceTypeToken'", e);
                    }

                    if (match == 1) {
                        SessionChargeRequestPaymentSource ret = new SessionChargeRequestPaymentSource();
                        ret.setActualInstance(actualAdapter.fromJsonTree(jsonObject));
                        return ret;
                    }

                    throw new IOException(String.format("Failed deserialization for SessionChargeRequestPaymentSource: %d classes match result, expected 1. Detailed failure message for oneOf schemas: %s. JSON: %s", match, errorMessages, jsonObject.toString()));
                }
            }.nullSafe();
        }
    }

    // store a list of schema names defined in oneOf
    public static final Map<String, GenericType> schemas = new HashMap<String, GenericType>();

    public SessionChargeRequestPaymentSource() {
        super("oneOf", Boolean.FALSE);
    }

    public SessionChargeRequestPaymentSource(SessionSourceTypeCard o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public SessionChargeRequestPaymentSource(SessionSourceTypeCardOneShot o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public SessionChargeRequestPaymentSource(SessionSourceTypeCustomer o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public SessionChargeRequestPaymentSource(SessionSourceTypeCustomerOneShot o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public SessionChargeRequestPaymentSource(SessionSourceTypeToken o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    static {
        schemas.put("SessionSourceTypeCard", new GenericType<SessionSourceTypeCard>() {
        });
        schemas.put("SessionSourceTypeCardOneShot", new GenericType<SessionSourceTypeCardOneShot>() {
        });
        schemas.put("SessionSourceTypeCustomer", new GenericType<SessionSourceTypeCustomer>() {
        });
        schemas.put("SessionSourceTypeCustomerOneShot", new GenericType<SessionSourceTypeCustomerOneShot>() {
        });
        schemas.put("SessionSourceTypeToken", new GenericType<SessionSourceTypeToken>() {
        });
    }

    @Override
    public Map<String, GenericType> getSchemas() {
        return SessionChargeRequestPaymentSource.schemas;
    }

    /**
     * Set the instance that matches the oneOf child schema, check
     * the instance parameter is valid against the oneOf child schemas:
     * SessionSourceTypeCard, SessionSourceTypeCardOneShot, SessionSourceTypeCustomer, SessionSourceTypeCustomerOneShot, SessionSourceTypeToken
     *
     * It could be an instance of the 'oneOf' schemas.
     * The oneOf child schemas may themselves be a composed schema (allOf, anyOf, oneOf).
     */
    @Override
    public void setActualInstance(Object instance) {
        if (instance instanceof SessionSourceTypeCard) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof SessionSourceTypeCardOneShot) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof SessionSourceTypeCustomer) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof SessionSourceTypeCustomerOneShot) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof SessionSourceTypeToken) {
            super.setActualInstance(instance);
            return;
        }

        throw new RuntimeException("Invalid instance type. Must be SessionSourceTypeCard, SessionSourceTypeCardOneShot, SessionSourceTypeCustomer, SessionSourceTypeCustomerOneShot, SessionSourceTypeToken");
    }

    /**
     * Get the actual instance, which can be the following:
     * SessionSourceTypeCard, SessionSourceTypeCardOneShot, SessionSourceTypeCustomer, SessionSourceTypeCustomerOneShot, SessionSourceTypeToken
     *
     * @return The actual instance (SessionSourceTypeCard, SessionSourceTypeCardOneShot, SessionSourceTypeCustomer, SessionSourceTypeCustomerOneShot, SessionSourceTypeToken)
     */
    @Override
    public Object getActualInstance() {
        return super.getActualInstance();
    }

    /**
     * Get the actual instance of `SessionSourceTypeCard`. If the actual instance is not `SessionSourceTypeCard`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `SessionSourceTypeCard`
     * @throws ClassCastException if the instance is not `SessionSourceTypeCard`
     */
    public SessionSourceTypeCard getSessionSourceTypeCard() throws ClassCastException {
        return (SessionSourceTypeCard)super.getActualInstance();
    }

    /**
     * Get the actual instance of `SessionSourceTypeCardOneShot`. If the actual instance is not `SessionSourceTypeCardOneShot`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `SessionSourceTypeCardOneShot`
     * @throws ClassCastException if the instance is not `SessionSourceTypeCardOneShot`
     */
    public SessionSourceTypeCardOneShot getSessionSourceTypeCardOneShot() throws ClassCastException {
        return (SessionSourceTypeCardOneShot)super.getActualInstance();
    }

    /**
     * Get the actual instance of `SessionSourceTypeCustomer`. If the actual instance is not `SessionSourceTypeCustomer`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `SessionSourceTypeCustomer`
     * @throws ClassCastException if the instance is not `SessionSourceTypeCustomer`
     */
    public SessionSourceTypeCustomer getSessionSourceTypeCustomer() throws ClassCastException {
        return (SessionSourceTypeCustomer)super.getActualInstance();
    }

    /**
     * Get the actual instance of `SessionSourceTypeCustomerOneShot`. If the actual instance is not `SessionSourceTypeCustomerOneShot`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `SessionSourceTypeCustomerOneShot`
     * @throws ClassCastException if the instance is not `SessionSourceTypeCustomerOneShot`
     */
    public SessionSourceTypeCustomerOneShot getSessionSourceTypeCustomerOneShot() throws ClassCastException {
        return (SessionSourceTypeCustomerOneShot)super.getActualInstance();
    }

    /**
     * Get the actual instance of `SessionSourceTypeToken`. If the actual instance is not `SessionSourceTypeToken`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `SessionSourceTypeToken`
     * @throws ClassCastException if the instance is not `SessionSourceTypeToken`
     */
    public SessionSourceTypeToken getSessionSourceTypeToken() throws ClassCastException {
        return (SessionSourceTypeToken)super.getActualInstance();
    }


 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to SessionChargeRequestPaymentSource
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
    // validate oneOf schemas one by one
    int validCount = 0;
    ArrayList<String> errorMessages = new ArrayList<>();
    // validate the json string with SessionSourceTypeCard
    try {
      SessionSourceTypeCard.validateJsonObject(jsonObj);
      validCount++;
    } catch (Exception e) {
      errorMessages.add(String.format("Deserialization for SessionSourceTypeCard failed with `%s`.", e.getMessage()));
      // continue to the next one
    }
    // validate the json string with SessionSourceTypeCardOneShot
    try {
      SessionSourceTypeCardOneShot.validateJsonObject(jsonObj);
      validCount++;
    } catch (Exception e) {
      errorMessages.add(String.format("Deserialization for SessionSourceTypeCardOneShot failed with `%s`.", e.getMessage()));
      // continue to the next one
    }
    // validate the json string with SessionSourceTypeCustomer
    try {
      SessionSourceTypeCustomer.validateJsonObject(jsonObj);
      validCount++;
    } catch (Exception e) {
      errorMessages.add(String.format("Deserialization for SessionSourceTypeCustomer failed with `%s`.", e.getMessage()));
      // continue to the next one
    }
    // validate the json string with SessionSourceTypeCustomerOneShot
    try {
      SessionSourceTypeCustomerOneShot.validateJsonObject(jsonObj);
      validCount++;
    } catch (Exception e) {
      errorMessages.add(String.format("Deserialization for SessionSourceTypeCustomerOneShot failed with `%s`.", e.getMessage()));
      // continue to the next one
    }
    // validate the json string with SessionSourceTypeToken
    try {
      SessionSourceTypeToken.validateJsonObject(jsonObj);
      validCount++;
    } catch (Exception e) {
      errorMessages.add(String.format("Deserialization for SessionSourceTypeToken failed with `%s`.", e.getMessage()));
      // continue to the next one
    }
    if (validCount != 1) {
      throw new IOException(String.format("The JSON string is invalid for SessionChargeRequestPaymentSource with oneOf schemas: SessionSourceTypeCard, SessionSourceTypeCardOneShot, SessionSourceTypeCustomer, SessionSourceTypeCustomerOneShot, SessionSourceTypeToken. %d class(es) match the result, expected 1. Detailed failure message for oneOf schemas: %s. JSON: %s", validCount, errorMessages, jsonObj.toString()));
    }
  }

 /**
  * Create an instance of SessionChargeRequestPaymentSource given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of SessionChargeRequestPaymentSource
  * @throws IOException if the JSON string is invalid with respect to SessionChargeRequestPaymentSource
  */
  public static SessionChargeRequestPaymentSource fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SessionChargeRequestPaymentSource.class);
  }

 /**
  * Convert an instance of SessionChargeRequestPaymentSource to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

