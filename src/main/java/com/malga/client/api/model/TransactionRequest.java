/*
 * Malga API Documentation
 * # Authentication  Malgaâ€™s API services are protected through access keys. 
 *
 * The version of the OpenAPI document: 0.5
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.malga.client.api.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.malga.client.api.model.TransactionRequestProviderAuthorization;
import com.malga.client.api.model.TransactionRequestProviderError;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.malga.client.JSON;

/**
 * TransactionRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-06-21T00:10:35.774518-03:00[America/Sao_Paulo]")
public class TransactionRequest {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_PROVIDER_ID = "providerId";
  @SerializedName(SERIALIZED_NAME_PROVIDER_ID)
  private String providerId;

  public static final String SERIALIZED_NAME_PROVIDER_TYPE = "providerType";
  @SerializedName(SERIALIZED_NAME_PROVIDER_TYPE)
  private String providerType;

  public static final String SERIALIZED_NAME_IDEMPOTENCY_KEY = "idempotencyKey";
  @SerializedName(SERIALIZED_NAME_IDEMPOTENCY_KEY)
  private String idempotencyKey;

  public static final String SERIALIZED_NAME_AUTHORIZATION_NSU = "authorizationNsu";
  @SerializedName(SERIALIZED_NAME_AUTHORIZATION_NSU)
  private String authorizationNsu;

  public static final String SERIALIZED_NAME_TRANSACTION_ID = "transactionId";
  @SerializedName(SERIALIZED_NAME_TRANSACTION_ID)
  private String transactionId;

  /**
   * type of request performed on provider
   */
  @JsonAdapter(RequestTypeEnum.Adapter.class)
  public enum RequestTypeEnum {
    PENDING("pending"),
    
    AUTHORIZATION("authorization"),
    
    PRE_AUTHORIZATION("pre_authorization"),
    
    VOID("void"),
    
    CAPTURE("capture"),
    
    PROBE("probe"),
    
    CHARGE_BACK("charge_back"),
    
    ZERO_DOLLAR("zero_dollar"),
    
    ANTI_FRAUD("anti_fraud");

    private String value;

    RequestTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static RequestTypeEnum fromValue(String value) {
      for (RequestTypeEnum b : RequestTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<RequestTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final RequestTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public RequestTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return RequestTypeEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_REQUEST_TYPE = "requestType";
  @SerializedName(SERIALIZED_NAME_REQUEST_TYPE)
  private RequestTypeEnum requestType;

  /**
   * status of request processing
   */
  @JsonAdapter(RequestStatusEnum.Adapter.class)
  public enum RequestStatusEnum {
    RUNNING("running"),
    
    FAILED("failed"),
    
    SUCCESS("success"),
    
    TIMEOUT("timeout"),
    
    INTERNAL_ERROR("internal_error"),
    
    PROCESSING("processing");

    private String value;

    RequestStatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static RequestStatusEnum fromValue(String value) {
      for (RequestStatusEnum b : RequestStatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<RequestStatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final RequestStatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public RequestStatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return RequestStatusEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_REQUEST_STATUS = "requestStatus";
  @SerializedName(SERIALIZED_NAME_REQUEST_STATUS)
  private RequestStatusEnum requestStatus;

  public static final String SERIALIZED_NAME_AMOUNT = "amount";
  @SerializedName(SERIALIZED_NAME_AMOUNT)
  private Integer amount;

  public static final String SERIALIZED_NAME_RESPONSE_TS = "responseTs";
  @SerializedName(SERIALIZED_NAME_RESPONSE_TS)
  private String responseTs;

  public static final String SERIALIZED_NAME_PROVIDER_ERROR = "providerError";
  @SerializedName(SERIALIZED_NAME_PROVIDER_ERROR)
  private TransactionRequestProviderError providerError;

  public static final String SERIALIZED_NAME_PROVIDER_AUTHORIZATION = "providerAuthorization";
  @SerializedName(SERIALIZED_NAME_PROVIDER_AUTHORIZATION)
  private TransactionRequestProviderAuthorization providerAuthorization;

  public static final String SERIALIZED_NAME_CREATED_AT = "createdAt";
  @SerializedName(SERIALIZED_NAME_CREATED_AT)
  private String createdAt;

  public static final String SERIALIZED_NAME_UPDATED_AT = "updatedAt";
  @SerializedName(SERIALIZED_NAME_UPDATED_AT)
  private String updatedAt;

  public TransactionRequest() {
  }

  public TransactionRequest id(String id) {
    
    this.id = id;
    return this;
  }

   /**
   * unique identification of request on the provider
   * @return id
  **/
  @javax.annotation.Nullable

  public String getId() {
    return id;
  }


  public void setId(String id) {
    this.id = id;
  }


  public TransactionRequest providerId(String providerId) {
    
    this.providerId = providerId;
    return this;
  }

   /**
   * provider identification related to your merchant id
   * @return providerId
  **/
  @javax.annotation.Nullable

  public String getProviderId() {
    return providerId;
  }


  public void setProviderId(String providerId) {
    this.providerId = providerId;
  }


  public TransactionRequest providerType(String providerType) {
    
    this.providerType = providerType;
    return this;
  }

   /**
   * provider code, see table of supported providers
   * @return providerType
  **/
  @javax.annotation.Nullable

  public String getProviderType() {
    return providerType;
  }


  public void setProviderType(String providerType) {
    this.providerType = providerType;
  }


  public TransactionRequest idempotencyKey(String idempotencyKey) {
    
    this.idempotencyKey = idempotencyKey;
    return this;
  }

   /**
   * unique identification automatically created by Malga for each request, used to assure idempotency and avoid duplicity, could be used to get transactions in the provider&#39;s API or dashboard.
   * @return idempotencyKey
  **/
  @javax.annotation.Nullable

  public String getIdempotencyKey() {
    return idempotencyKey;
  }


  public void setIdempotencyKey(String idempotencyKey) {
    this.idempotencyKey = idempotencyKey;
  }


  public TransactionRequest authorizationNsu(String authorizationNsu) {
    
    this.authorizationNsu = authorizationNsu;
    return this;
  }

   /**
   * authorization number retunred by provider
   * @return authorizationNsu
   * @deprecated
  **/
  @Deprecated
  @javax.annotation.Nullable

  public String getAuthorizationNsu() {
    return authorizationNsu;
  }


  public void setAuthorizationNsu(String authorizationNsu) {
    this.authorizationNsu = authorizationNsu;
  }


  public TransactionRequest transactionId(String transactionId) {
    
    this.transactionId = transactionId;
    return this;
  }

   /**
   * unique identification of transaction on provider, could be used to get transaction in the provider&#39;s API.
   * @return transactionId
  **/
  @javax.annotation.Nullable

  public String getTransactionId() {
    return transactionId;
  }


  public void setTransactionId(String transactionId) {
    this.transactionId = transactionId;
  }


  public TransactionRequest requestType(RequestTypeEnum requestType) {
    
    this.requestType = requestType;
    return this;
  }

   /**
   * type of request performed on provider
   * @return requestType
  **/
  @javax.annotation.Nullable

  public RequestTypeEnum getRequestType() {
    return requestType;
  }


  public void setRequestType(RequestTypeEnum requestType) {
    this.requestType = requestType;
  }


  public TransactionRequest requestStatus(RequestStatusEnum requestStatus) {
    
    this.requestStatus = requestStatus;
    return this;
  }

   /**
   * status of request processing
   * @return requestStatus
  **/
  @javax.annotation.Nullable

  public RequestStatusEnum getRequestStatus() {
    return requestStatus;
  }


  public void setRequestStatus(RequestStatusEnum requestStatus) {
    this.requestStatus = requestStatus;
  }


  public TransactionRequest amount(Integer amount) {
    
    this.amount = amount;
    return this;
  }

   /**
   * transaction request amount sent to provider, for partial capture/refund the amount could be different from original transaction amount
   * @return amount
  **/
  @javax.annotation.Nullable

  public Integer getAmount() {
    return amount;
  }


  public void setAmount(Integer amount) {
    this.amount = amount;
  }


  public TransactionRequest responseTs(String responseTs) {
    
    this.responseTs = responseTs;
    return this;
  }

   /**
   * total spent time in request processing
   * @return responseTs
  **/
  @javax.annotation.Nullable

  public String getResponseTs() {
    return responseTs;
  }


  public void setResponseTs(String responseTs) {
    this.responseTs = responseTs;
  }


  public TransactionRequest providerError(TransactionRequestProviderError providerError) {
    
    this.providerError = providerError;
    return this;
  }

   /**
   * Get providerError
   * @return providerError
  **/
  @javax.annotation.Nullable

  public TransactionRequestProviderError getProviderError() {
    return providerError;
  }


  public void setProviderError(TransactionRequestProviderError providerError) {
    this.providerError = providerError;
  }


  public TransactionRequest providerAuthorization(TransactionRequestProviderAuthorization providerAuthorization) {
    
    this.providerAuthorization = providerAuthorization;
    return this;
  }

   /**
   * Get providerAuthorization
   * @return providerAuthorization
  **/
  @javax.annotation.Nullable

  public TransactionRequestProviderAuthorization getProviderAuthorization() {
    return providerAuthorization;
  }


  public void setProviderAuthorization(TransactionRequestProviderAuthorization providerAuthorization) {
    this.providerAuthorization = providerAuthorization;
  }


  public TransactionRequest createdAt(String createdAt) {
    
    this.createdAt = createdAt;
    return this;
  }

   /**
   * Created date of request
   * @return createdAt
  **/
  @javax.annotation.Nullable

  public String getCreatedAt() {
    return createdAt;
  }


  public void setCreatedAt(String createdAt) {
    this.createdAt = createdAt;
  }


  public TransactionRequest updatedAt(String updatedAt) {
    
    this.updatedAt = updatedAt;
    return this;
  }

   /**
   * Updated date of request
   * @return updatedAt
  **/
  @javax.annotation.Nullable

  public String getUpdatedAt() {
    return updatedAt;
  }


  public void setUpdatedAt(String updatedAt) {
    this.updatedAt = updatedAt;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the TransactionRequest instance itself
   */
  public TransactionRequest putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TransactionRequest transactionRequest = (TransactionRequest) o;
    return Objects.equals(this.id, transactionRequest.id) &&
        Objects.equals(this.providerId, transactionRequest.providerId) &&
        Objects.equals(this.providerType, transactionRequest.providerType) &&
        Objects.equals(this.idempotencyKey, transactionRequest.idempotencyKey) &&
        Objects.equals(this.authorizationNsu, transactionRequest.authorizationNsu) &&
        Objects.equals(this.transactionId, transactionRequest.transactionId) &&
        Objects.equals(this.requestType, transactionRequest.requestType) &&
        Objects.equals(this.requestStatus, transactionRequest.requestStatus) &&
        Objects.equals(this.amount, transactionRequest.amount) &&
        Objects.equals(this.responseTs, transactionRequest.responseTs) &&
        Objects.equals(this.providerError, transactionRequest.providerError) &&
        Objects.equals(this.providerAuthorization, transactionRequest.providerAuthorization) &&
        Objects.equals(this.createdAt, transactionRequest.createdAt) &&
        Objects.equals(this.updatedAt, transactionRequest.updatedAt)&&
        Objects.equals(this.additionalProperties, transactionRequest.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, providerId, providerType, idempotencyKey, authorizationNsu, transactionId, requestType, requestStatus, amount, responseTs, providerError, providerAuthorization, createdAt, updatedAt, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TransactionRequest {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    providerId: ").append(toIndentedString(providerId)).append("\n");
    sb.append("    providerType: ").append(toIndentedString(providerType)).append("\n");
    sb.append("    idempotencyKey: ").append(toIndentedString(idempotencyKey)).append("\n");
    sb.append("    authorizationNsu: ").append(toIndentedString(authorizationNsu)).append("\n");
    sb.append("    transactionId: ").append(toIndentedString(transactionId)).append("\n");
    sb.append("    requestType: ").append(toIndentedString(requestType)).append("\n");
    sb.append("    requestStatus: ").append(toIndentedString(requestStatus)).append("\n");
    sb.append("    amount: ").append(toIndentedString(amount)).append("\n");
    sb.append("    responseTs: ").append(toIndentedString(responseTs)).append("\n");
    sb.append("    providerError: ").append(toIndentedString(providerError)).append("\n");
    sb.append("    providerAuthorization: ").append(toIndentedString(providerAuthorization)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    updatedAt: ").append(toIndentedString(updatedAt)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("providerId");
    openapiFields.add("providerType");
    openapiFields.add("idempotencyKey");
    openapiFields.add("authorizationNsu");
    openapiFields.add("transactionId");
    openapiFields.add("requestType");
    openapiFields.add("requestStatus");
    openapiFields.add("amount");
    openapiFields.add("responseTs");
    openapiFields.add("providerError");
    openapiFields.add("providerAuthorization");
    openapiFields.add("createdAt");
    openapiFields.add("updatedAt");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to TransactionRequest
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!TransactionRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in TransactionRequest is not found in the empty JSON string", TransactionRequest.openapiRequiredFields.toString()));
        }
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("providerId") != null && !jsonObj.get("providerId").isJsonNull()) && !jsonObj.get("providerId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `providerId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("providerId").toString()));
      }
      if ((jsonObj.get("providerType") != null && !jsonObj.get("providerType").isJsonNull()) && !jsonObj.get("providerType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `providerType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("providerType").toString()));
      }
      if ((jsonObj.get("idempotencyKey") != null && !jsonObj.get("idempotencyKey").isJsonNull()) && !jsonObj.get("idempotencyKey").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `idempotencyKey` to be a primitive type in the JSON string but got `%s`", jsonObj.get("idempotencyKey").toString()));
      }
      if ((jsonObj.get("authorizationNsu") != null && !jsonObj.get("authorizationNsu").isJsonNull()) && !jsonObj.get("authorizationNsu").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `authorizationNsu` to be a primitive type in the JSON string but got `%s`", jsonObj.get("authorizationNsu").toString()));
      }
      if ((jsonObj.get("transactionId") != null && !jsonObj.get("transactionId").isJsonNull()) && !jsonObj.get("transactionId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `transactionId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("transactionId").toString()));
      }
      if ((jsonObj.get("requestType") != null && !jsonObj.get("requestType").isJsonNull()) && !jsonObj.get("requestType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `requestType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("requestType").toString()));
      }
      if ((jsonObj.get("requestStatus") != null && !jsonObj.get("requestStatus").isJsonNull()) && !jsonObj.get("requestStatus").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `requestStatus` to be a primitive type in the JSON string but got `%s`", jsonObj.get("requestStatus").toString()));
      }
      if ((jsonObj.get("responseTs") != null && !jsonObj.get("responseTs").isJsonNull()) && !jsonObj.get("responseTs").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `responseTs` to be a primitive type in the JSON string but got `%s`", jsonObj.get("responseTs").toString()));
      }
      // validate the optional field `providerError`
      if (jsonObj.get("providerError") != null && !jsonObj.get("providerError").isJsonNull()) {
        TransactionRequestProviderError.validateJsonObject(jsonObj.getAsJsonObject("providerError"));
      }
      // validate the optional field `providerAuthorization`
      if (jsonObj.get("providerAuthorization") != null && !jsonObj.get("providerAuthorization").isJsonNull()) {
        TransactionRequestProviderAuthorization.validateJsonObject(jsonObj.getAsJsonObject("providerAuthorization"));
      }
      if ((jsonObj.get("createdAt") != null && !jsonObj.get("createdAt").isJsonNull()) && !jsonObj.get("createdAt").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `createdAt` to be a primitive type in the JSON string but got `%s`", jsonObj.get("createdAt").toString()));
      }
      if ((jsonObj.get("updatedAt") != null && !jsonObj.get("updatedAt").isJsonNull()) && !jsonObj.get("updatedAt").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `updatedAt` to be a primitive type in the JSON string but got `%s`", jsonObj.get("updatedAt").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TransactionRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TransactionRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TransactionRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TransactionRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<TransactionRequest>() {
           @Override
           public void write(JsonWriter out, TransactionRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additional properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public TransactionRequest read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             TransactionRequest instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of TransactionRequest given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of TransactionRequest
  * @throws IOException if the JSON string is invalid with respect to TransactionRequest
  */
  public static TransactionRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TransactionRequest.class);
  }

 /**
  * Convert an instance of TransactionRequest to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

