/*
 * Malga API Documentation
 * # Authentication  Malgaâ€™s API services are protected through access keys. 
 *
 * The version of the OpenAPI document: 0.5
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.malga.client.api.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.malga.client.api.model.CredentialAdyen;
import com.malga.client.api.model.CredentialBB;
import com.malga.client.api.model.CredentialBS2;
import com.malga.client.api.model.CredentialBS2BOLETO;
import com.malga.client.api.model.CredentialBraintree;
import com.malga.client.api.model.CredentialBraspag;
import com.malga.client.api.model.CredentialCielo;
import com.malga.client.api.model.CredentialClearsale;
import com.malga.client.api.model.CredentialGetnet;
import com.malga.client.api.model.CredentialKlap;
import com.malga.client.api.model.CredentialMercadoPago;
import com.malga.client.api.model.CredentialNuPay;
import com.malga.client.api.model.CredentialPagSeguro;
import com.malga.client.api.model.CredentialPagarme;
import com.malga.client.api.model.CredentialRede;
import com.malga.client.api.model.CredentialStripe;
import com.malga.client.api.model.CredentialZoop;
import java.io.IOException;

import javax.ws.rs.core.GenericType;

import java.io.IOException;
import java.lang.reflect.Type;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.ArrayList;
import java.util.Collections;
import java.util.HashSet;
import java.util.HashMap;
import java.util.Map;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.JsonPrimitive;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonSerializationContext;
import com.google.gson.JsonSerializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;

import com.malga.client.JSON;

@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-06-21T00:10:35.774518-03:00[America/Sao_Paulo]")
public class ProviderRequestCredentials extends AbstractOpenApiSchema {
    private static final Logger log = Logger.getLogger(ProviderRequestCredentials.class.getName());

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!ProviderRequestCredentials.class.isAssignableFrom(type.getRawType())) {
                return null; // this class only serializes 'ProviderRequestCredentials' and its subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<CredentialAdyen> adapterCredentialAdyen = gson.getDelegateAdapter(this, TypeToken.get(CredentialAdyen.class));
            final TypeAdapter<CredentialBB> adapterCredentialBB = gson.getDelegateAdapter(this, TypeToken.get(CredentialBB.class));
            final TypeAdapter<CredentialBS2> adapterCredentialBS2 = gson.getDelegateAdapter(this, TypeToken.get(CredentialBS2.class));
            final TypeAdapter<CredentialBS2BOLETO> adapterCredentialBS2BOLETO = gson.getDelegateAdapter(this, TypeToken.get(CredentialBS2BOLETO.class));
            final TypeAdapter<CredentialBraintree> adapterCredentialBraintree = gson.getDelegateAdapter(this, TypeToken.get(CredentialBraintree.class));
            final TypeAdapter<CredentialBraspag> adapterCredentialBraspag = gson.getDelegateAdapter(this, TypeToken.get(CredentialBraspag.class));
            final TypeAdapter<CredentialCielo> adapterCredentialCielo = gson.getDelegateAdapter(this, TypeToken.get(CredentialCielo.class));
            final TypeAdapter<CredentialClearsale> adapterCredentialClearsale = gson.getDelegateAdapter(this, TypeToken.get(CredentialClearsale.class));
            final TypeAdapter<CredentialGetnet> adapterCredentialGetnet = gson.getDelegateAdapter(this, TypeToken.get(CredentialGetnet.class));
            final TypeAdapter<CredentialKlap> adapterCredentialKlap = gson.getDelegateAdapter(this, TypeToken.get(CredentialKlap.class));
            final TypeAdapter<CredentialMercadoPago> adapterCredentialMercadoPago = gson.getDelegateAdapter(this, TypeToken.get(CredentialMercadoPago.class));
            final TypeAdapter<CredentialNuPay> adapterCredentialNuPay = gson.getDelegateAdapter(this, TypeToken.get(CredentialNuPay.class));
            final TypeAdapter<CredentialPagSeguro> adapterCredentialPagSeguro = gson.getDelegateAdapter(this, TypeToken.get(CredentialPagSeguro.class));
            final TypeAdapter<CredentialPagarme> adapterCredentialPagarme = gson.getDelegateAdapter(this, TypeToken.get(CredentialPagarme.class));
            final TypeAdapter<CredentialRede> adapterCredentialRede = gson.getDelegateAdapter(this, TypeToken.get(CredentialRede.class));
            final TypeAdapter<CredentialStripe> adapterCredentialStripe = gson.getDelegateAdapter(this, TypeToken.get(CredentialStripe.class));
            final TypeAdapter<CredentialZoop> adapterCredentialZoop = gson.getDelegateAdapter(this, TypeToken.get(CredentialZoop.class));

            return (TypeAdapter<T>) new TypeAdapter<ProviderRequestCredentials>() {
                @Override
                public void write(JsonWriter out, ProviderRequestCredentials value) throws IOException {
                    if (value == null || value.getActualInstance() == null) {
                        elementAdapter.write(out, null);
                        return;
                    }

                    // check if the actual instance is of the type `CredentialAdyen`
                    if (value.getActualInstance() instanceof CredentialAdyen) {
                        JsonObject obj = adapterCredentialAdyen.toJsonTree((CredentialAdyen)value.getActualInstance()).getAsJsonObject();
                        elementAdapter.write(out, obj);
                        return;
                    }

                    // check if the actual instance is of the type `CredentialBB`
                    if (value.getActualInstance() instanceof CredentialBB) {
                        JsonObject obj = adapterCredentialBB.toJsonTree((CredentialBB)value.getActualInstance()).getAsJsonObject();
                        elementAdapter.write(out, obj);
                        return;
                    }

                    // check if the actual instance is of the type `CredentialBS2`
                    if (value.getActualInstance() instanceof CredentialBS2) {
                        JsonObject obj = adapterCredentialBS2.toJsonTree((CredentialBS2)value.getActualInstance()).getAsJsonObject();
                        elementAdapter.write(out, obj);
                        return;
                    }

                    // check if the actual instance is of the type `CredentialBS2BOLETO`
                    if (value.getActualInstance() instanceof CredentialBS2BOLETO) {
                        JsonObject obj = adapterCredentialBS2BOLETO.toJsonTree((CredentialBS2BOLETO)value.getActualInstance()).getAsJsonObject();
                        elementAdapter.write(out, obj);
                        return;
                    }

                    // check if the actual instance is of the type `CredentialBraintree`
                    if (value.getActualInstance() instanceof CredentialBraintree) {
                        JsonObject obj = adapterCredentialBraintree.toJsonTree((CredentialBraintree)value.getActualInstance()).getAsJsonObject();
                        elementAdapter.write(out, obj);
                        return;
                    }

                    // check if the actual instance is of the type `CredentialBraspag`
                    if (value.getActualInstance() instanceof CredentialBraspag) {
                        JsonObject obj = adapterCredentialBraspag.toJsonTree((CredentialBraspag)value.getActualInstance()).getAsJsonObject();
                        elementAdapter.write(out, obj);
                        return;
                    }

                    // check if the actual instance is of the type `CredentialCielo`
                    if (value.getActualInstance() instanceof CredentialCielo) {
                        JsonObject obj = adapterCredentialCielo.toJsonTree((CredentialCielo)value.getActualInstance()).getAsJsonObject();
                        elementAdapter.write(out, obj);
                        return;
                    }

                    // check if the actual instance is of the type `CredentialClearsale`
                    if (value.getActualInstance() instanceof CredentialClearsale) {
                        JsonObject obj = adapterCredentialClearsale.toJsonTree((CredentialClearsale)value.getActualInstance()).getAsJsonObject();
                        elementAdapter.write(out, obj);
                        return;
                    }

                    // check if the actual instance is of the type `CredentialGetnet`
                    if (value.getActualInstance() instanceof CredentialGetnet) {
                        JsonObject obj = adapterCredentialGetnet.toJsonTree((CredentialGetnet)value.getActualInstance()).getAsJsonObject();
                        elementAdapter.write(out, obj);
                        return;
                    }

                    // check if the actual instance is of the type `CredentialKlap`
                    if (value.getActualInstance() instanceof CredentialKlap) {
                        JsonObject obj = adapterCredentialKlap.toJsonTree((CredentialKlap)value.getActualInstance()).getAsJsonObject();
                        elementAdapter.write(out, obj);
                        return;
                    }

                    // check if the actual instance is of the type `CredentialMercadoPago`
                    if (value.getActualInstance() instanceof CredentialMercadoPago) {
                        JsonObject obj = adapterCredentialMercadoPago.toJsonTree((CredentialMercadoPago)value.getActualInstance()).getAsJsonObject();
                        elementAdapter.write(out, obj);
                        return;
                    }

                    // check if the actual instance is of the type `CredentialNuPay`
                    if (value.getActualInstance() instanceof CredentialNuPay) {
                        JsonObject obj = adapterCredentialNuPay.toJsonTree((CredentialNuPay)value.getActualInstance()).getAsJsonObject();
                        elementAdapter.write(out, obj);
                        return;
                    }

                    // check if the actual instance is of the type `CredentialPagSeguro`
                    if (value.getActualInstance() instanceof CredentialPagSeguro) {
                        JsonObject obj = adapterCredentialPagSeguro.toJsonTree((CredentialPagSeguro)value.getActualInstance()).getAsJsonObject();
                        elementAdapter.write(out, obj);
                        return;
                    }

                    // check if the actual instance is of the type `CredentialPagarme`
                    if (value.getActualInstance() instanceof CredentialPagarme) {
                        JsonObject obj = adapterCredentialPagarme.toJsonTree((CredentialPagarme)value.getActualInstance()).getAsJsonObject();
                        elementAdapter.write(out, obj);
                        return;
                    }

                    // check if the actual instance is of the type `CredentialRede`
                    if (value.getActualInstance() instanceof CredentialRede) {
                        JsonObject obj = adapterCredentialRede.toJsonTree((CredentialRede)value.getActualInstance()).getAsJsonObject();
                        elementAdapter.write(out, obj);
                        return;
                    }

                    // check if the actual instance is of the type `CredentialStripe`
                    if (value.getActualInstance() instanceof CredentialStripe) {
                        JsonObject obj = adapterCredentialStripe.toJsonTree((CredentialStripe)value.getActualInstance()).getAsJsonObject();
                        elementAdapter.write(out, obj);
                        return;
                    }

                    // check if the actual instance is of the type `CredentialZoop`
                    if (value.getActualInstance() instanceof CredentialZoop) {
                        JsonObject obj = adapterCredentialZoop.toJsonTree((CredentialZoop)value.getActualInstance()).getAsJsonObject();
                        elementAdapter.write(out, obj);
                        return;
                    }

                    throw new IOException("Failed to serialize as the type doesn't match oneOf schemas: CredentialAdyen, CredentialBB, CredentialBS2, CredentialBS2BOLETO, CredentialBraintree, CredentialBraspag, CredentialCielo, CredentialClearsale, CredentialGetnet, CredentialKlap, CredentialMercadoPago, CredentialNuPay, CredentialPagSeguro, CredentialPagarme, CredentialRede, CredentialStripe, CredentialZoop");
                }

                @Override
                public ProviderRequestCredentials read(JsonReader in) throws IOException {
                    Object deserialized = null;
                    JsonObject jsonObject = elementAdapter.read(in).getAsJsonObject();

                    int match = 0;
                    ArrayList<String> errorMessages = new ArrayList<>();
                    TypeAdapter actualAdapter = elementAdapter;

                    // deserialize CredentialAdyen
                    try {
                        // validate the JSON object to see if any exception is thrown
                        CredentialAdyen.validateJsonObject(jsonObject);
                        actualAdapter = adapterCredentialAdyen;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'CredentialAdyen'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for CredentialAdyen failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'CredentialAdyen'", e);
                    }

                    // deserialize CredentialBB
                    try {
                        // validate the JSON object to see if any exception is thrown
                        CredentialBB.validateJsonObject(jsonObject);
                        actualAdapter = adapterCredentialBB;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'CredentialBB'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for CredentialBB failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'CredentialBB'", e);
                    }

                    // deserialize CredentialBS2
                    try {
                        // validate the JSON object to see if any exception is thrown
                        CredentialBS2.validateJsonObject(jsonObject);
                        actualAdapter = adapterCredentialBS2;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'CredentialBS2'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for CredentialBS2 failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'CredentialBS2'", e);
                    }

                    // deserialize CredentialBS2BOLETO
                    try {
                        // validate the JSON object to see if any exception is thrown
                        CredentialBS2BOLETO.validateJsonObject(jsonObject);
                        actualAdapter = adapterCredentialBS2BOLETO;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'CredentialBS2BOLETO'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for CredentialBS2BOLETO failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'CredentialBS2BOLETO'", e);
                    }

                    // deserialize CredentialBraintree
                    try {
                        // validate the JSON object to see if any exception is thrown
                        CredentialBraintree.validateJsonObject(jsonObject);
                        actualAdapter = adapterCredentialBraintree;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'CredentialBraintree'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for CredentialBraintree failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'CredentialBraintree'", e);
                    }

                    // deserialize CredentialBraspag
                    try {
                        // validate the JSON object to see if any exception is thrown
                        CredentialBraspag.validateJsonObject(jsonObject);
                        actualAdapter = adapterCredentialBraspag;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'CredentialBraspag'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for CredentialBraspag failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'CredentialBraspag'", e);
                    }

                    // deserialize CredentialCielo
                    try {
                        // validate the JSON object to see if any exception is thrown
                        CredentialCielo.validateJsonObject(jsonObject);
                        actualAdapter = adapterCredentialCielo;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'CredentialCielo'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for CredentialCielo failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'CredentialCielo'", e);
                    }

                    // deserialize CredentialClearsale
                    try {
                        // validate the JSON object to see if any exception is thrown
                        CredentialClearsale.validateJsonObject(jsonObject);
                        actualAdapter = adapterCredentialClearsale;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'CredentialClearsale'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for CredentialClearsale failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'CredentialClearsale'", e);
                    }

                    // deserialize CredentialGetnet
                    try {
                        // validate the JSON object to see if any exception is thrown
                        CredentialGetnet.validateJsonObject(jsonObject);
                        actualAdapter = adapterCredentialGetnet;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'CredentialGetnet'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for CredentialGetnet failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'CredentialGetnet'", e);
                    }

                    // deserialize CredentialKlap
                    try {
                        // validate the JSON object to see if any exception is thrown
                        CredentialKlap.validateJsonObject(jsonObject);
                        actualAdapter = adapterCredentialKlap;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'CredentialKlap'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for CredentialKlap failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'CredentialKlap'", e);
                    }

                    // deserialize CredentialMercadoPago
                    try {
                        // validate the JSON object to see if any exception is thrown
                        CredentialMercadoPago.validateJsonObject(jsonObject);
                        actualAdapter = adapterCredentialMercadoPago;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'CredentialMercadoPago'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for CredentialMercadoPago failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'CredentialMercadoPago'", e);
                    }

                    // deserialize CredentialNuPay
                    try {
                        // validate the JSON object to see if any exception is thrown
                        CredentialNuPay.validateJsonObject(jsonObject);
                        actualAdapter = adapterCredentialNuPay;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'CredentialNuPay'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for CredentialNuPay failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'CredentialNuPay'", e);
                    }

                    // deserialize CredentialPagSeguro
                    try {
                        // validate the JSON object to see if any exception is thrown
                        CredentialPagSeguro.validateJsonObject(jsonObject);
                        actualAdapter = adapterCredentialPagSeguro;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'CredentialPagSeguro'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for CredentialPagSeguro failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'CredentialPagSeguro'", e);
                    }

                    // deserialize CredentialPagarme
                    try {
                        // validate the JSON object to see if any exception is thrown
                        CredentialPagarme.validateJsonObject(jsonObject);
                        actualAdapter = adapterCredentialPagarme;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'CredentialPagarme'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for CredentialPagarme failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'CredentialPagarme'", e);
                    }

                    // deserialize CredentialRede
                    try {
                        // validate the JSON object to see if any exception is thrown
                        CredentialRede.validateJsonObject(jsonObject);
                        actualAdapter = adapterCredentialRede;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'CredentialRede'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for CredentialRede failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'CredentialRede'", e);
                    }

                    // deserialize CredentialStripe
                    try {
                        // validate the JSON object to see if any exception is thrown
                        CredentialStripe.validateJsonObject(jsonObject);
                        actualAdapter = adapterCredentialStripe;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'CredentialStripe'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for CredentialStripe failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'CredentialStripe'", e);
                    }

                    // deserialize CredentialZoop
                    try {
                        // validate the JSON object to see if any exception is thrown
                        CredentialZoop.validateJsonObject(jsonObject);
                        actualAdapter = adapterCredentialZoop;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'CredentialZoop'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for CredentialZoop failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'CredentialZoop'", e);
                    }

                    if (match == 1) {
                        ProviderRequestCredentials ret = new ProviderRequestCredentials();
                        ret.setActualInstance(actualAdapter.fromJsonTree(jsonObject));
                        return ret;
                    }

                    throw new IOException(String.format("Failed deserialization for ProviderRequestCredentials: %d classes match result, expected 1. Detailed failure message for oneOf schemas: %s. JSON: %s", match, errorMessages, jsonObject.toString()));
                }
            }.nullSafe();
        }
    }

    // store a list of schema names defined in oneOf
    public static final Map<String, GenericType> schemas = new HashMap<String, GenericType>();

    public ProviderRequestCredentials() {
        super("oneOf", Boolean.FALSE);
    }

    public ProviderRequestCredentials(CredentialAdyen o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public ProviderRequestCredentials(CredentialBB o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public ProviderRequestCredentials(CredentialBS2 o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public ProviderRequestCredentials(CredentialBS2BOLETO o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public ProviderRequestCredentials(CredentialBraintree o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public ProviderRequestCredentials(CredentialBraspag o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public ProviderRequestCredentials(CredentialCielo o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public ProviderRequestCredentials(CredentialClearsale o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public ProviderRequestCredentials(CredentialGetnet o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public ProviderRequestCredentials(CredentialKlap o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public ProviderRequestCredentials(CredentialMercadoPago o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public ProviderRequestCredentials(CredentialNuPay o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public ProviderRequestCredentials(CredentialPagSeguro o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public ProviderRequestCredentials(CredentialPagarme o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public ProviderRequestCredentials(CredentialRede o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public ProviderRequestCredentials(CredentialStripe o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public ProviderRequestCredentials(CredentialZoop o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    static {
        schemas.put("CredentialAdyen", new GenericType<CredentialAdyen>() {
        });
        schemas.put("CredentialBB", new GenericType<CredentialBB>() {
        });
        schemas.put("CredentialBS2", new GenericType<CredentialBS2>() {
        });
        schemas.put("CredentialBS2BOLETO", new GenericType<CredentialBS2BOLETO>() {
        });
        schemas.put("CredentialBraintree", new GenericType<CredentialBraintree>() {
        });
        schemas.put("CredentialBraspag", new GenericType<CredentialBraspag>() {
        });
        schemas.put("CredentialCielo", new GenericType<CredentialCielo>() {
        });
        schemas.put("CredentialClearsale", new GenericType<CredentialClearsale>() {
        });
        schemas.put("CredentialGetnet", new GenericType<CredentialGetnet>() {
        });
        schemas.put("CredentialKlap", new GenericType<CredentialKlap>() {
        });
        schemas.put("CredentialMercadoPago", new GenericType<CredentialMercadoPago>() {
        });
        schemas.put("CredentialNuPay", new GenericType<CredentialNuPay>() {
        });
        schemas.put("CredentialPagSeguro", new GenericType<CredentialPagSeguro>() {
        });
        schemas.put("CredentialPagarme", new GenericType<CredentialPagarme>() {
        });
        schemas.put("CredentialRede", new GenericType<CredentialRede>() {
        });
        schemas.put("CredentialStripe", new GenericType<CredentialStripe>() {
        });
        schemas.put("CredentialZoop", new GenericType<CredentialZoop>() {
        });
    }

    @Override
    public Map<String, GenericType> getSchemas() {
        return ProviderRequestCredentials.schemas;
    }

    /**
     * Set the instance that matches the oneOf child schema, check
     * the instance parameter is valid against the oneOf child schemas:
     * CredentialAdyen, CredentialBB, CredentialBS2, CredentialBS2BOLETO, CredentialBraintree, CredentialBraspag, CredentialCielo, CredentialClearsale, CredentialGetnet, CredentialKlap, CredentialMercadoPago, CredentialNuPay, CredentialPagSeguro, CredentialPagarme, CredentialRede, CredentialStripe, CredentialZoop
     *
     * It could be an instance of the 'oneOf' schemas.
     * The oneOf child schemas may themselves be a composed schema (allOf, anyOf, oneOf).
     */
    @Override
    public void setActualInstance(Object instance) {
        if (instance instanceof CredentialAdyen) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof CredentialBB) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof CredentialBS2) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof CredentialBS2BOLETO) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof CredentialBraintree) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof CredentialBraspag) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof CredentialCielo) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof CredentialClearsale) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof CredentialGetnet) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof CredentialKlap) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof CredentialMercadoPago) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof CredentialNuPay) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof CredentialPagSeguro) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof CredentialPagarme) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof CredentialRede) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof CredentialStripe) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof CredentialZoop) {
            super.setActualInstance(instance);
            return;
        }

        throw new RuntimeException("Invalid instance type. Must be CredentialAdyen, CredentialBB, CredentialBS2, CredentialBS2BOLETO, CredentialBraintree, CredentialBraspag, CredentialCielo, CredentialClearsale, CredentialGetnet, CredentialKlap, CredentialMercadoPago, CredentialNuPay, CredentialPagSeguro, CredentialPagarme, CredentialRede, CredentialStripe, CredentialZoop");
    }

    /**
     * Get the actual instance, which can be the following:
     * CredentialAdyen, CredentialBB, CredentialBS2, CredentialBS2BOLETO, CredentialBraintree, CredentialBraspag, CredentialCielo, CredentialClearsale, CredentialGetnet, CredentialKlap, CredentialMercadoPago, CredentialNuPay, CredentialPagSeguro, CredentialPagarme, CredentialRede, CredentialStripe, CredentialZoop
     *
     * @return The actual instance (CredentialAdyen, CredentialBB, CredentialBS2, CredentialBS2BOLETO, CredentialBraintree, CredentialBraspag, CredentialCielo, CredentialClearsale, CredentialGetnet, CredentialKlap, CredentialMercadoPago, CredentialNuPay, CredentialPagSeguro, CredentialPagarme, CredentialRede, CredentialStripe, CredentialZoop)
     */
    @Override
    public Object getActualInstance() {
        return super.getActualInstance();
    }

    /**
     * Get the actual instance of `CredentialAdyen`. If the actual instance is not `CredentialAdyen`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `CredentialAdyen`
     * @throws ClassCastException if the instance is not `CredentialAdyen`
     */
    public CredentialAdyen getCredentialAdyen() throws ClassCastException {
        return (CredentialAdyen)super.getActualInstance();
    }

    /**
     * Get the actual instance of `CredentialBB`. If the actual instance is not `CredentialBB`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `CredentialBB`
     * @throws ClassCastException if the instance is not `CredentialBB`
     */
    public CredentialBB getCredentialBB() throws ClassCastException {
        return (CredentialBB)super.getActualInstance();
    }

    /**
     * Get the actual instance of `CredentialBS2`. If the actual instance is not `CredentialBS2`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `CredentialBS2`
     * @throws ClassCastException if the instance is not `CredentialBS2`
     */
    public CredentialBS2 getCredentialBS2() throws ClassCastException {
        return (CredentialBS2)super.getActualInstance();
    }

    /**
     * Get the actual instance of `CredentialBS2BOLETO`. If the actual instance is not `CredentialBS2BOLETO`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `CredentialBS2BOLETO`
     * @throws ClassCastException if the instance is not `CredentialBS2BOLETO`
     */
    public CredentialBS2BOLETO getCredentialBS2BOLETO() throws ClassCastException {
        return (CredentialBS2BOLETO)super.getActualInstance();
    }

    /**
     * Get the actual instance of `CredentialBraintree`. If the actual instance is not `CredentialBraintree`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `CredentialBraintree`
     * @throws ClassCastException if the instance is not `CredentialBraintree`
     */
    public CredentialBraintree getCredentialBraintree() throws ClassCastException {
        return (CredentialBraintree)super.getActualInstance();
    }

    /**
     * Get the actual instance of `CredentialBraspag`. If the actual instance is not `CredentialBraspag`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `CredentialBraspag`
     * @throws ClassCastException if the instance is not `CredentialBraspag`
     */
    public CredentialBraspag getCredentialBraspag() throws ClassCastException {
        return (CredentialBraspag)super.getActualInstance();
    }

    /**
     * Get the actual instance of `CredentialCielo`. If the actual instance is not `CredentialCielo`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `CredentialCielo`
     * @throws ClassCastException if the instance is not `CredentialCielo`
     */
    public CredentialCielo getCredentialCielo() throws ClassCastException {
        return (CredentialCielo)super.getActualInstance();
    }

    /**
     * Get the actual instance of `CredentialClearsale`. If the actual instance is not `CredentialClearsale`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `CredentialClearsale`
     * @throws ClassCastException if the instance is not `CredentialClearsale`
     */
    public CredentialClearsale getCredentialClearsale() throws ClassCastException {
        return (CredentialClearsale)super.getActualInstance();
    }

    /**
     * Get the actual instance of `CredentialGetnet`. If the actual instance is not `CredentialGetnet`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `CredentialGetnet`
     * @throws ClassCastException if the instance is not `CredentialGetnet`
     */
    public CredentialGetnet getCredentialGetnet() throws ClassCastException {
        return (CredentialGetnet)super.getActualInstance();
    }

    /**
     * Get the actual instance of `CredentialKlap`. If the actual instance is not `CredentialKlap`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `CredentialKlap`
     * @throws ClassCastException if the instance is not `CredentialKlap`
     */
    public CredentialKlap getCredentialKlap() throws ClassCastException {
        return (CredentialKlap)super.getActualInstance();
    }

    /**
     * Get the actual instance of `CredentialMercadoPago`. If the actual instance is not `CredentialMercadoPago`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `CredentialMercadoPago`
     * @throws ClassCastException if the instance is not `CredentialMercadoPago`
     */
    public CredentialMercadoPago getCredentialMercadoPago() throws ClassCastException {
        return (CredentialMercadoPago)super.getActualInstance();
    }

    /**
     * Get the actual instance of `CredentialNuPay`. If the actual instance is not `CredentialNuPay`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `CredentialNuPay`
     * @throws ClassCastException if the instance is not `CredentialNuPay`
     */
    public CredentialNuPay getCredentialNuPay() throws ClassCastException {
        return (CredentialNuPay)super.getActualInstance();
    }

    /**
     * Get the actual instance of `CredentialPagSeguro`. If the actual instance is not `CredentialPagSeguro`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `CredentialPagSeguro`
     * @throws ClassCastException if the instance is not `CredentialPagSeguro`
     */
    public CredentialPagSeguro getCredentialPagSeguro() throws ClassCastException {
        return (CredentialPagSeguro)super.getActualInstance();
    }

    /**
     * Get the actual instance of `CredentialPagarme`. If the actual instance is not `CredentialPagarme`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `CredentialPagarme`
     * @throws ClassCastException if the instance is not `CredentialPagarme`
     */
    public CredentialPagarme getCredentialPagarme() throws ClassCastException {
        return (CredentialPagarme)super.getActualInstance();
    }

    /**
     * Get the actual instance of `CredentialRede`. If the actual instance is not `CredentialRede`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `CredentialRede`
     * @throws ClassCastException if the instance is not `CredentialRede`
     */
    public CredentialRede getCredentialRede() throws ClassCastException {
        return (CredentialRede)super.getActualInstance();
    }

    /**
     * Get the actual instance of `CredentialStripe`. If the actual instance is not `CredentialStripe`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `CredentialStripe`
     * @throws ClassCastException if the instance is not `CredentialStripe`
     */
    public CredentialStripe getCredentialStripe() throws ClassCastException {
        return (CredentialStripe)super.getActualInstance();
    }

    /**
     * Get the actual instance of `CredentialZoop`. If the actual instance is not `CredentialZoop`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `CredentialZoop`
     * @throws ClassCastException if the instance is not `CredentialZoop`
     */
    public CredentialZoop getCredentialZoop() throws ClassCastException {
        return (CredentialZoop)super.getActualInstance();
    }


 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to ProviderRequestCredentials
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
    // validate oneOf schemas one by one
    int validCount = 0;
    ArrayList<String> errorMessages = new ArrayList<>();
    // validate the json string with CredentialAdyen
    try {
      CredentialAdyen.validateJsonObject(jsonObj);
      validCount++;
    } catch (Exception e) {
      errorMessages.add(String.format("Deserialization for CredentialAdyen failed with `%s`.", e.getMessage()));
      // continue to the next one
    }
    // validate the json string with CredentialBB
    try {
      CredentialBB.validateJsonObject(jsonObj);
      validCount++;
    } catch (Exception e) {
      errorMessages.add(String.format("Deserialization for CredentialBB failed with `%s`.", e.getMessage()));
      // continue to the next one
    }
    // validate the json string with CredentialBS2
    try {
      CredentialBS2.validateJsonObject(jsonObj);
      validCount++;
    } catch (Exception e) {
      errorMessages.add(String.format("Deserialization for CredentialBS2 failed with `%s`.", e.getMessage()));
      // continue to the next one
    }
    // validate the json string with CredentialBS2BOLETO
    try {
      CredentialBS2BOLETO.validateJsonObject(jsonObj);
      validCount++;
    } catch (Exception e) {
      errorMessages.add(String.format("Deserialization for CredentialBS2BOLETO failed with `%s`.", e.getMessage()));
      // continue to the next one
    }
    // validate the json string with CredentialBraintree
    try {
      CredentialBraintree.validateJsonObject(jsonObj);
      validCount++;
    } catch (Exception e) {
      errorMessages.add(String.format("Deserialization for CredentialBraintree failed with `%s`.", e.getMessage()));
      // continue to the next one
    }
    // validate the json string with CredentialBraspag
    try {
      CredentialBraspag.validateJsonObject(jsonObj);
      validCount++;
    } catch (Exception e) {
      errorMessages.add(String.format("Deserialization for CredentialBraspag failed with `%s`.", e.getMessage()));
      // continue to the next one
    }
    // validate the json string with CredentialCielo
    try {
      CredentialCielo.validateJsonObject(jsonObj);
      validCount++;
    } catch (Exception e) {
      errorMessages.add(String.format("Deserialization for CredentialCielo failed with `%s`.", e.getMessage()));
      // continue to the next one
    }
    // validate the json string with CredentialClearsale
    try {
      CredentialClearsale.validateJsonObject(jsonObj);
      validCount++;
    } catch (Exception e) {
      errorMessages.add(String.format("Deserialization for CredentialClearsale failed with `%s`.", e.getMessage()));
      // continue to the next one
    }
    // validate the json string with CredentialGetnet
    try {
      CredentialGetnet.validateJsonObject(jsonObj);
      validCount++;
    } catch (Exception e) {
      errorMessages.add(String.format("Deserialization for CredentialGetnet failed with `%s`.", e.getMessage()));
      // continue to the next one
    }
    // validate the json string with CredentialKlap
    try {
      CredentialKlap.validateJsonObject(jsonObj);
      validCount++;
    } catch (Exception e) {
      errorMessages.add(String.format("Deserialization for CredentialKlap failed with `%s`.", e.getMessage()));
      // continue to the next one
    }
    // validate the json string with CredentialMercadoPago
    try {
      CredentialMercadoPago.validateJsonObject(jsonObj);
      validCount++;
    } catch (Exception e) {
      errorMessages.add(String.format("Deserialization for CredentialMercadoPago failed with `%s`.", e.getMessage()));
      // continue to the next one
    }
    // validate the json string with CredentialNuPay
    try {
      CredentialNuPay.validateJsonObject(jsonObj);
      validCount++;
    } catch (Exception e) {
      errorMessages.add(String.format("Deserialization for CredentialNuPay failed with `%s`.", e.getMessage()));
      // continue to the next one
    }
    // validate the json string with CredentialPagSeguro
    try {
      CredentialPagSeguro.validateJsonObject(jsonObj);
      validCount++;
    } catch (Exception e) {
      errorMessages.add(String.format("Deserialization for CredentialPagSeguro failed with `%s`.", e.getMessage()));
      // continue to the next one
    }
    // validate the json string with CredentialPagarme
    try {
      CredentialPagarme.validateJsonObject(jsonObj);
      validCount++;
    } catch (Exception e) {
      errorMessages.add(String.format("Deserialization for CredentialPagarme failed with `%s`.", e.getMessage()));
      // continue to the next one
    }
    // validate the json string with CredentialRede
    try {
      CredentialRede.validateJsonObject(jsonObj);
      validCount++;
    } catch (Exception e) {
      errorMessages.add(String.format("Deserialization for CredentialRede failed with `%s`.", e.getMessage()));
      // continue to the next one
    }
    // validate the json string with CredentialStripe
    try {
      CredentialStripe.validateJsonObject(jsonObj);
      validCount++;
    } catch (Exception e) {
      errorMessages.add(String.format("Deserialization for CredentialStripe failed with `%s`.", e.getMessage()));
      // continue to the next one
    }
    // validate the json string with CredentialZoop
    try {
      CredentialZoop.validateJsonObject(jsonObj);
      validCount++;
    } catch (Exception e) {
      errorMessages.add(String.format("Deserialization for CredentialZoop failed with `%s`.", e.getMessage()));
      // continue to the next one
    }
    if (validCount != 1) {
      throw new IOException(String.format("The JSON string is invalid for ProviderRequestCredentials with oneOf schemas: CredentialAdyen, CredentialBB, CredentialBS2, CredentialBS2BOLETO, CredentialBraintree, CredentialBraspag, CredentialCielo, CredentialClearsale, CredentialGetnet, CredentialKlap, CredentialMercadoPago, CredentialNuPay, CredentialPagSeguro, CredentialPagarme, CredentialRede, CredentialStripe, CredentialZoop. %d class(es) match the result, expected 1. Detailed failure message for oneOf schemas: %s. JSON: %s", validCount, errorMessages, jsonObj.toString()));
    }
  }

 /**
  * Create an instance of ProviderRequestCredentials given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ProviderRequestCredentials
  * @throws IOException if the JSON string is invalid with respect to ProviderRequestCredentials
  */
  public static ProviderRequestCredentials fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ProviderRequestCredentials.class);
  }

 /**
  * Convert an instance of ProviderRequestCredentials to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

