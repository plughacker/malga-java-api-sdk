/*
 * ClientToken
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.malga.service.clienttoken;

import io.malga.client.ApiCallback;
import io.malga.client.ApiClient;
import io.malga.client.ApiException;
import io.malga.client.ApiResponse;
import io.malga.client.Configuration;
import io.malga.client.Pair;
import io.malga.client.ProgressRequestBody;
import io.malga.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.malga.model.clienttoken.AuthRequest;
import io.malga.model.clienttoken.AuthResponse;
import io.malga.model.clienttoken.ErrorResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class ClientTokenApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ClientTokenApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ClientTokenApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for createClientToken
     * @param authRequest Creat authentication token (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public okhttp3.Call createClientTokenCall(AuthRequest authRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        String localVarPostBody = authRequest.toJson();

        // create path and map variables
        String localVarPath = "/v1/auth";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "X-Client-ID", "X-Api-Key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createClientTokenValidateBeforeCall(AuthRequest authRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'authRequest' is set
        if (authRequest == null) {
            throw new ApiException("Missing the required parameter 'authRequest' when calling createClientToken(Async)");
        }

        return createClientTokenCall(authRequest, _callback);

    }

    /**
     * Create public key for client-side integration
     * 
     * @param authRequest Creat authentication token (required)
     * @return AuthResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AuthResponse createClientToken(AuthRequest authRequest) throws ApiException {
        ApiResponse<AuthResponse> localVarResp = createClientTokenWithHttpInfo(authRequest);
        return localVarResp.getData();
    }

    /**
     * Create public key for client-side integration
     * 
     * @param authRequest Creat authentication token (required)
     * @return ApiResponse&lt;AuthResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AuthResponse> createClientTokenWithHttpInfo(AuthRequest authRequest) throws ApiException {
        okhttp3.Call localVarCall = createClientTokenValidateBeforeCall(authRequest, null);
        Type localVarReturnType = new TypeToken<AuthResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType, AuthResponse.getGson());
    }

    /**
     * Create public key for client-side integration (asynchronously)
     * 
     * @param authRequest Creat authentication token (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public okhttp3.Call createClientTokenAsync(AuthRequest authRequest, final ApiCallback<AuthResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = createClientTokenValidateBeforeCall(authRequest, _callback);
        Type localVarReturnType = new TypeToken<AuthResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback, AuthResponse.getGson());
        return localVarCall;
    }
}
