/*
 * Customers
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.5
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.malga.service.customers;

import io.malga.client.ApiCallback;
import io.malga.client.ApiClient;
import io.malga.client.ApiException;
import io.malga.client.ApiResponse;
import io.malga.client.Configuration;
import io.malga.client.Pair;
import io.malga.client.ProgressRequestBody;
import io.malga.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.malga.model.customers.CustomerCardList;
import io.malga.model.customers.CustomerList;
import io.malga.model.customers.CustomerRequest;
import io.malga.model.customers.CustomerResponse;
import io.malga.model.customers.ErrorResponse;
import io.malga.model.customers.LinkCardRequest;
import io.malga.model.customers.UpdateCustomerRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class CustomersApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public CustomersApi() {
        this(Configuration.getDefaultApiClient());
    }

    public CustomersApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for createCustomer
     * @param customerRequest  (required)
     * @param force Force customer create avoiding confit when document number already exists (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public okhttp3.Call createCustomerCall(CustomerRequest customerRequest, Boolean force, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        String localVarPostBody = customerRequest.toJson();

        // create path and map variables
        String localVarPath = "/v1/customers";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (force != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("force", force));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "X-Client-ID", "X-Api-Key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createCustomerValidateBeforeCall(CustomerRequest customerRequest, Boolean force, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'customerRequest' is set
        if (customerRequest == null) {
            throw new ApiException("Missing the required parameter 'customerRequest' when calling createCustomer(Async)");
        }

        return createCustomerCall(customerRequest, force, _callback);

    }

    /**
     * Create new customer
     * 
     * @param customerRequest  (required)
     * @param force Force customer create avoiding confit when document number already exists (optional)
     * @return CustomerResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CustomerResponse createCustomer(CustomerRequest customerRequest, Boolean force) throws ApiException {
        ApiResponse<CustomerResponse> localVarResp = createCustomerWithHttpInfo(customerRequest, force);
        return localVarResp.getData();
    }

    /**
     * Create new customer
     * 
     * @param customerRequest  (required)
     * @param force Force customer create avoiding confit when document number already exists (optional)
     * @return ApiResponse&lt;CustomerResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CustomerResponse> createCustomerWithHttpInfo(CustomerRequest customerRequest, Boolean force) throws ApiException {
        okhttp3.Call localVarCall = createCustomerValidateBeforeCall(customerRequest, force, null);
        Type localVarReturnType = new TypeToken<CustomerResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType, CustomerResponse.getGson());
    }

    /**
     * Create new customer (asynchronously)
     * 
     * @param customerRequest  (required)
     * @param force Force customer create avoiding confit when document number already exists (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public okhttp3.Call createCustomerAsync(CustomerRequest customerRequest, Boolean force, final ApiCallback<CustomerResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = createCustomerValidateBeforeCall(customerRequest, force, _callback);
        Type localVarReturnType = new TypeToken<CustomerResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback, CustomerResponse.getGson());
        return localVarCall;
    }
    /**
     * Build call for deleteCustomer
     * @param id Custome ID (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public okhttp3.Call deleteCustomerCall(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        String localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/customers/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "X-Client-ID", "X-Api-Key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteCustomerValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling deleteCustomer(Async)");
        }

        return deleteCustomerCall(id, _callback);

    }

    /**
     * Delete customer
     * 
     * @param id Custome ID (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteCustomer(String id) throws ApiException {
        deleteCustomerWithHttpInfo(id);
    }

    /**
     * Delete customer
     * 
     * @param id Custome ID (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteCustomerWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = deleteCustomerValidateBeforeCall(id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete customer (asynchronously)
     * 
     * @param id Custome ID (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public okhttp3.Call deleteCustomerAsync(String id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteCustomerValidateBeforeCall(id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getCustomerById
     * @param id Customer ID (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public okhttp3.Call getCustomerByIdCall(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        String localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/customers/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "X-Client-ID", "X-Api-Key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCustomerByIdValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getCustomerById(Async)");
        }

        return getCustomerByIdCall(id, _callback);

    }

    /**
     * Get customer details
     * 
     * @param id Customer ID (required)
     * @return CustomerResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CustomerResponse getCustomerById(String id) throws ApiException {
        ApiResponse<CustomerResponse> localVarResp = getCustomerByIdWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * Get customer details
     * 
     * @param id Customer ID (required)
     * @return ApiResponse&lt;CustomerResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CustomerResponse> getCustomerByIdWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = getCustomerByIdValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<CustomerResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType, CustomerResponse.getGson());
    }

    /**
     * Get customer details (asynchronously)
     * 
     * @param id Customer ID (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public okhttp3.Call getCustomerByIdAsync(String id, final ApiCallback<CustomerResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getCustomerByIdValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<CustomerResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback, CustomerResponse.getGson());
        return localVarCall;
    }
    /**
     * Build call for getCustomerCards
     * @param customerId Customer ID (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public okhttp3.Call getCustomerCardsCall(String customerId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        String localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/customers/{customer_id}/cards"
            .replace("{" + "customer_id" + "}", localVarApiClient.escapeString(customerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "X-Client-ID", "X-Api-Key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCustomerCardsValidateBeforeCall(String customerId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'customerId' is set
        if (customerId == null) {
            throw new ApiException("Missing the required parameter 'customerId' when calling getCustomerCards(Async)");
        }

        return getCustomerCardsCall(customerId, _callback);

    }

    /**
     * List customer cards
     * 
     * @param customerId Customer ID (required)
     * @return CustomerCardList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CustomerCardList getCustomerCards(String customerId) throws ApiException {
        ApiResponse<CustomerCardList> localVarResp = getCustomerCardsWithHttpInfo(customerId);
        return localVarResp.getData();
    }

    /**
     * List customer cards
     * 
     * @param customerId Customer ID (required)
     * @return ApiResponse&lt;CustomerCardList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CustomerCardList> getCustomerCardsWithHttpInfo(String customerId) throws ApiException {
        okhttp3.Call localVarCall = getCustomerCardsValidateBeforeCall(customerId, null);
        Type localVarReturnType = new TypeToken<CustomerCardList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType, CustomerCardList.getGson());
    }

    /**
     * List customer cards (asynchronously)
     * 
     * @param customerId Customer ID (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public okhttp3.Call getCustomerCardsAsync(String customerId, final ApiCallback<CustomerCardList> _callback) throws ApiException {

        okhttp3.Call localVarCall = getCustomerCardsValidateBeforeCall(customerId, _callback);
        Type localVarReturnType = new TypeToken<CustomerCardList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback, CustomerCardList.getGson());
        return localVarCall;
    }
    /**
     * Build call for getCustomers
     * @param page page number (optional)
     * @param limit total itens per page (optional)
     * @param sort ordering of items (optional)
     * @param id customer identifier (optional)
     * @param documentType document type (optional)
     * @param documentNumber document number (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public okhttp3.Call getCustomersCall(String page, String limit, String sort, String id, String documentType, String documentNumber, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        String localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/customers";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        if (id != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id", id));
        }

        if (documentType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("document.type", documentType));
        }

        if (documentNumber != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("document.number", documentNumber));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "X-Client-ID", "X-Api-Key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCustomersValidateBeforeCall(String page, String limit, String sort, String id, String documentType, String documentNumber, final ApiCallback _callback) throws ApiException {
        return getCustomersCall(page, limit, sort, id, documentType, documentNumber, _callback);

    }

    /**
     * List customers
     * 
     * @param page page number (optional)
     * @param limit total itens per page (optional)
     * @param sort ordering of items (optional)
     * @param id customer identifier (optional)
     * @param documentType document type (optional)
     * @param documentNumber document number (optional)
     * @return CustomerList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CustomerList getCustomers(String page, String limit, String sort, String id, String documentType, String documentNumber) throws ApiException {
        ApiResponse<CustomerList> localVarResp = getCustomersWithHttpInfo(page, limit, sort, id, documentType, documentNumber);
        return localVarResp.getData();
    }

    /**
     * List customers
     * 
     * @param page page number (optional)
     * @param limit total itens per page (optional)
     * @param sort ordering of items (optional)
     * @param id customer identifier (optional)
     * @param documentType document type (optional)
     * @param documentNumber document number (optional)
     * @return ApiResponse&lt;CustomerList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CustomerList> getCustomersWithHttpInfo(String page, String limit, String sort, String id, String documentType, String documentNumber) throws ApiException {
        okhttp3.Call localVarCall = getCustomersValidateBeforeCall(page, limit, sort, id, documentType, documentNumber, null);
        Type localVarReturnType = new TypeToken<CustomerList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType, CustomerList.getGson());
    }

    /**
     * List customers (asynchronously)
     * 
     * @param page page number (optional)
     * @param limit total itens per page (optional)
     * @param sort ordering of items (optional)
     * @param id customer identifier (optional)
     * @param documentType document type (optional)
     * @param documentNumber document number (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public okhttp3.Call getCustomersAsync(String page, String limit, String sort, String id, String documentType, String documentNumber, final ApiCallback<CustomerList> _callback) throws ApiException {

        okhttp3.Call localVarCall = getCustomersValidateBeforeCall(page, limit, sort, id, documentType, documentNumber, _callback);
        Type localVarReturnType = new TypeToken<CustomerList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback, CustomerList.getGson());
        return localVarCall;
    }
    /**
     * Build call for linkCard
     * @param customerId Customer ID (required)
     * @param linkCardRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public okhttp3.Call linkCardCall(String customerId, LinkCardRequest linkCardRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        String localVarPostBody = linkCardRequest.toJson();

        // create path and map variables
        String localVarPath = "/v1/customers/{customer_id}/cards"
            .replace("{" + "customer_id" + "}", localVarApiClient.escapeString(customerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "X-Client-ID", "X-Api-Key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call linkCardValidateBeforeCall(String customerId, LinkCardRequest linkCardRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'customerId' is set
        if (customerId == null) {
            throw new ApiException("Missing the required parameter 'customerId' when calling linkCard(Async)");
        }

        // verify the required parameter 'linkCardRequest' is set
        if (linkCardRequest == null) {
            throw new ApiException("Missing the required parameter 'linkCardRequest' when calling linkCard(Async)");
        }

        return linkCardCall(customerId, linkCardRequest, _callback);

    }

    /**
     * Add credit card to customers
     * 
     * @param customerId Customer ID (required)
     * @param linkCardRequest  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void linkCard(String customerId, LinkCardRequest linkCardRequest) throws ApiException {
        linkCardWithHttpInfo(customerId, linkCardRequest);
    }

    /**
     * Add credit card to customers
     * 
     * @param customerId Customer ID (required)
     * @param linkCardRequest  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> linkCardWithHttpInfo(String customerId, LinkCardRequest linkCardRequest) throws ApiException {
        okhttp3.Call localVarCall = linkCardValidateBeforeCall(customerId, linkCardRequest, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Add credit card to customers (asynchronously)
     * 
     * @param customerId Customer ID (required)
     * @param linkCardRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public okhttp3.Call linkCardAsync(String customerId, LinkCardRequest linkCardRequest, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = linkCardValidateBeforeCall(customerId, linkCardRequest, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateCustomer
     * @param id Customer ID (required)
     * @param updateCustomerRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public okhttp3.Call updateCustomerCall(String id, UpdateCustomerRequest updateCustomerRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        String localVarPostBody = updateCustomerRequest.toJson();

        // create path and map variables
        String localVarPath = "/v1/customers/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "X-Client-ID", "X-Api-Key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateCustomerValidateBeforeCall(String id, UpdateCustomerRequest updateCustomerRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling updateCustomer(Async)");
        }

        // verify the required parameter 'updateCustomerRequest' is set
        if (updateCustomerRequest == null) {
            throw new ApiException("Missing the required parameter 'updateCustomerRequest' when calling updateCustomer(Async)");
        }

        return updateCustomerCall(id, updateCustomerRequest, _callback);

    }

    /**
     * Update customer
     * 
     * @param id Customer ID (required)
     * @param updateCustomerRequest  (required)
     * @return CustomerResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CustomerResponse updateCustomer(String id, UpdateCustomerRequest updateCustomerRequest) throws ApiException {
        ApiResponse<CustomerResponse> localVarResp = updateCustomerWithHttpInfo(id, updateCustomerRequest);
        return localVarResp.getData();
    }

    /**
     * Update customer
     * 
     * @param id Customer ID (required)
     * @param updateCustomerRequest  (required)
     * @return ApiResponse&lt;CustomerResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CustomerResponse> updateCustomerWithHttpInfo(String id, UpdateCustomerRequest updateCustomerRequest) throws ApiException {
        okhttp3.Call localVarCall = updateCustomerValidateBeforeCall(id, updateCustomerRequest, null);
        Type localVarReturnType = new TypeToken<CustomerResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType, CustomerResponse.getGson());
    }

    /**
     * Update customer (asynchronously)
     * 
     * @param id Customer ID (required)
     * @param updateCustomerRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public okhttp3.Call updateCustomerAsync(String id, UpdateCustomerRequest updateCustomerRequest, final ApiCallback<CustomerResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateCustomerValidateBeforeCall(id, updateCustomerRequest, _callback);
        Type localVarReturnType = new TypeToken<CustomerResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback, CustomerResponse.getGson());
        return localVarCall;
    }
}
