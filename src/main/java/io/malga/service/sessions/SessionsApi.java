/*
 * Sessions
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.malga.service.sessions;

import com.google.gson.reflect.TypeToken;
import io.malga.client.*;
import io.malga.model.sessions.*;

import java.lang.reflect.Type;
import java.util.*;

public class SessionsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public SessionsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public SessionsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for cancelSession
     * @param id Session ID (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public okhttp3.Call cancelSessionCall(UUID id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        String localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/sessions/{id}/cancel"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "X-Client-ID", "X-Api-Key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call cancelSessionValidateBeforeCall(UUID id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling cancelSession(Async)");
        }

        return cancelSessionCall(id, _callback);

    }

    /**
     * Cancel session
     * 
     * @param id Session ID (required)
     * @return CancelSessionResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CancelSessionResponse cancelSession(UUID id) throws ApiException {
        ApiResponse<CancelSessionResponse> localVarResp = cancelSessionWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * Cancel session
     * 
     * @param id Session ID (required)
     * @return ApiResponse&lt;CancelSessionResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CancelSessionResponse> cancelSessionWithHttpInfo(UUID id) throws ApiException {
        okhttp3.Call localVarCall = cancelSessionValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<CancelSessionResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType, CancelSessionResponse.getGson());
    }

    /**
     * Cancel session (asynchronously)
     * 
     * @param id Session ID (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public okhttp3.Call cancelSessionAsync(UUID id, final ApiCallback<CancelSessionResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = cancelSessionValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<CancelSessionResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback, CancelSessionResponse.getGson());
        return localVarCall;
    }
    /**
     * Build call for createSession
     * @param sessionRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public okhttp3.Call createSessionCall(SessionRequest sessionRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        String localVarPostBody = sessionRequest.toJson();

        // create path and map variables
        String localVarPath = "/v1/sessions";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "X-Client-ID", "X-Api-Key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createSessionValidateBeforeCall(SessionRequest sessionRequest, final ApiCallback _callback) throws ApiException {
        return createSessionCall(sessionRequest, _callback);

    }

    /**
     * Create new session
     * 
     * @param sessionRequest  (optional)
     * @return SessionResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SessionResponse createSession(SessionRequest sessionRequest) throws ApiException {
        ApiResponse<SessionResponse> localVarResp = createSessionWithHttpInfo(sessionRequest);
        return localVarResp.getData();
    }

    /**
     * Create new session
     * 
     * @param sessionRequest  (optional)
     * @return ApiResponse&lt;SessionResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SessionResponse> createSessionWithHttpInfo(SessionRequest sessionRequest) throws ApiException {
        okhttp3.Call localVarCall = createSessionValidateBeforeCall(sessionRequest, null);
        Type localVarReturnType = new TypeToken<SessionResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType, SessionResponse.getGson());
    }

    /**
     * Create new session (asynchronously)
     * 
     * @param sessionRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public okhttp3.Call createSessionAsync(SessionRequest sessionRequest, final ApiCallback<SessionResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = createSessionValidateBeforeCall(sessionRequest, _callback);
        Type localVarReturnType = new TypeToken<SessionResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback, SessionResponse.getGson());
        return localVarCall;
    }
    /**
     * Build call for getSessionById
     * @param id Session ID (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public okhttp3.Call getSessionByIdCall(UUID id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        String localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/sessions/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "X-Client-ID", "X-Api-Key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getSessionByIdValidateBeforeCall(UUID id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getSessionById(Async)");
        }

        return getSessionByIdCall(id, _callback);

    }

    /**
     * Get session details
     * 
     * @param id Session ID (required)
     * @return SessionResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SessionResponse getSessionById(UUID id) throws ApiException {
        ApiResponse<SessionResponse> localVarResp = getSessionByIdWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * Get session details
     * 
     * @param id Session ID (required)
     * @return ApiResponse&lt;SessionResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SessionResponse> getSessionByIdWithHttpInfo(UUID id) throws ApiException {
        okhttp3.Call localVarCall = getSessionByIdValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<SessionResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType, SessionResponse.getGson());
    }

    /**
     * Get session details (asynchronously)
     * 
     * @param id Session ID (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public okhttp3.Call getSessionByIdAsync(UUID id, final ApiCallback<SessionResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getSessionByIdValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<SessionResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback, SessionResponse.getGson());
        return localVarCall;
    }
    /**
     * Build call for getSessionHistory
     * @param id Session ID (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public okhttp3.Call getSessionHistoryCall(UUID id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        String localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/sessions/{id}/history"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "X-Client-ID", "X-Api-Key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getSessionHistoryValidateBeforeCall(UUID id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getSessionHistory(Async)");
        }

        return getSessionHistoryCall(id, _callback);

    }

    /**
     * Recover session history
     * 
     * @param id Session ID (required)
     * @return List&lt;SessionHistoryItem&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<SessionHistoryItem> getSessionHistory(UUID id) throws ApiException {
        ApiResponse<List<SessionHistoryItem>> localVarResp = getSessionHistoryWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * Recover session history
     * 
     * @param id Session ID (required)
     * @return ApiResponse&lt;List&lt;SessionHistoryItem&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<SessionHistoryItem>> getSessionHistoryWithHttpInfo(UUID id) throws ApiException {
        okhttp3.Call localVarCall = getSessionHistoryValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<List<SessionHistoryItem>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType, SessionHistoryItem.getGson());
    }

    /**
     * Recover session history (asynchronously)
     * 
     * @param id Session ID (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public okhttp3.Call getSessionHistoryAsync(UUID id, final ApiCallback<List<SessionHistoryItem>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getSessionHistoryValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<List<SessionHistoryItem>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback, SessionHistoryItem.getGson());
        return localVarCall;
    }
    /**
     * Build call for getSessionWithSettings
     * @param id Session ID (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public okhttp3.Call getSessionWithSettingsCall(UUID id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        String localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/sessions/{id}/link"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "X-Client-ID", "X-Api-Key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getSessionWithSettingsValidateBeforeCall(UUID id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getSessionWithSettings(Async)");
        }

        return getSessionWithSettingsCall(id, _callback);

    }

    /**
     * Recover session with company settings
     * 
     * @param id Session ID (required)
     * @return SessionSettingsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SessionSettingsResponse getSessionWithSettings(UUID id) throws ApiException {
        ApiResponse<SessionSettingsResponse> localVarResp = getSessionWithSettingsWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * Recover session with company settings
     * 
     * @param id Session ID (required)
     * @return ApiResponse&lt;SessionSettingsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SessionSettingsResponse> getSessionWithSettingsWithHttpInfo(UUID id) throws ApiException {
        okhttp3.Call localVarCall = getSessionWithSettingsValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<SessionSettingsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType, SessionSettingsResponse.getGson());
    }

    /**
     * Recover session with company settings (asynchronously)
     * 
     * @param id Session ID (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public okhttp3.Call getSessionWithSettingsAsync(UUID id, final ApiCallback<SessionSettingsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getSessionWithSettingsValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<SessionSettingsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback, SessionSettingsResponse.getGson());
        return localVarCall;
    }
    /**
     * Build call for paySession
     * @param id Session ID (required)
     * @param sessionChargeRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public okhttp3.Call paySessionCall(UUID id, SessionChargeRequest sessionChargeRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        String localVarPostBody = sessionChargeRequest.toJson();

        // create path and map variables
        String localVarPath = "/v1/sessions/{id}/charge"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "X-Client-ID", "X-Api-Key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call paySessionValidateBeforeCall(UUID id, SessionChargeRequest sessionChargeRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling paySession(Async)");
        }

        return paySessionCall(id, sessionChargeRequest, _callback);

    }

    /**
     * Pay session
     * 
     * @param id Session ID (required)
     * @param sessionChargeRequest  (optional)
     * @return SessionChargeResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SessionChargeResponse paySession(UUID id, SessionChargeRequest sessionChargeRequest) throws ApiException {
        ApiResponse<SessionChargeResponse> localVarResp = paySessionWithHttpInfo(id, sessionChargeRequest);
        return localVarResp.getData();
    }

    /**
     * Pay session
     * 
     * @param id Session ID (required)
     * @param sessionChargeRequest  (optional)
     * @return ApiResponse&lt;SessionChargeResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SessionChargeResponse> paySessionWithHttpInfo(UUID id, SessionChargeRequest sessionChargeRequest) throws ApiException {
        okhttp3.Call localVarCall = paySessionValidateBeforeCall(id, sessionChargeRequest, null);
        Type localVarReturnType = new TypeToken<SessionChargeResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType, SessionChargeResponse.getGson());
    }

    /**
     * Pay session (asynchronously)
     * 
     * @param id Session ID (required)
     * @param sessionChargeRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public okhttp3.Call paySessionAsync(UUID id, SessionChargeRequest sessionChargeRequest, final ApiCallback<SessionChargeResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = paySessionValidateBeforeCall(id, sessionChargeRequest, _callback);
        Type localVarReturnType = new TypeToken<SessionChargeResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback, SessionChargeResponse.getGson());
        return localVarCall;
    }
    /**
     * Build call for updateSession
     * @param id Session ID (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public okhttp3.Call updateSessionCall(UUID id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        String localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/sessions/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "X-Client-ID", "X-Api-Key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateSessionValidateBeforeCall(UUID id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling updateSession(Async)");
        }

        return updateSessionCall(id, _callback);

    }

    /**
     * Update session status
     * 
     * @param id Session ID (required)
     * @return SessionResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SessionResponse updateSession(UUID id) throws ApiException {
        ApiResponse<SessionResponse> localVarResp = updateSessionWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * Update session status
     * 
     * @param id Session ID (required)
     * @return ApiResponse&lt;SessionResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SessionResponse> updateSessionWithHttpInfo(UUID id) throws ApiException {
        okhttp3.Call localVarCall = updateSessionValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<SessionResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType, SessionResponse.getGson());
    }

    /**
     * Update session status (asynchronously)
     * 
     * @param id Session ID (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public okhttp3.Call updateSessionAsync(UUID id, final ApiCallback<SessionResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateSessionValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<SessionResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback, SessionResponse.getGson());
        return localVarCall;
    }
}
