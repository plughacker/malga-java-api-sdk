/*
 * Sessions
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.malga.model.sessions;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.net.URI;
import java.util.UUID;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import io.malga.model.sessions.JSON;

/**
 * UserSettings
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-06-30T13:45:52.037616-03:00[America/Sao_Paulo]")
public class UserSettings {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private UUID id;

  public static final String SERIALIZED_NAME_EMAIL = "email";
  @SerializedName(SERIALIZED_NAME_EMAIL)
  private String email;

  public static final String SERIALIZED_NAME_PHONE = "phone";
  @SerializedName(SERIALIZED_NAME_PHONE)
  private String phone;

  public static final String SERIALIZED_NAME_STATEMENT_DESCRIPTION = "statementDescription";
  @SerializedName(SERIALIZED_NAME_STATEMENT_DESCRIPTION)
  private String statementDescription;

  public static final String SERIALIZED_NAME_LOGO = "logo";
  @SerializedName(SERIALIZED_NAME_LOGO)
  private URI logo;

  public static final String SERIALIZED_NAME_MAIN_COLOR = "mainColor";
  @SerializedName(SERIALIZED_NAME_MAIN_COLOR)
  private String mainColor;

  public static final String SERIALIZED_NAME_SECONDARY_COLOR = "secondaryColor";
  @SerializedName(SERIALIZED_NAME_SECONDARY_COLOR)
  private String secondaryColor;

  public static final String SERIALIZED_NAME_ATTENTION_COLOR = "attentionColor";
  @SerializedName(SERIALIZED_NAME_ATTENTION_COLOR)
  private String attentionColor;

  public static final String SERIALIZED_NAME_ERROR_COLOR = "errorColor";
  @SerializedName(SERIALIZED_NAME_ERROR_COLOR)
  private String errorColor;

  public static final String SERIALIZED_NAME_SUCCESS_COLOR = "successColor";
  @SerializedName(SERIALIZED_NAME_SUCCESS_COLOR)
  private String successColor;

  public static final String SERIALIZED_NAME_BACKGROUND_COLOR = "backgroundColor";
  @SerializedName(SERIALIZED_NAME_BACKGROUND_COLOR)
  private String backgroundColor;

  public static final String SERIALIZED_NAME_COMPANY_NAME = "companyName";
  @SerializedName(SERIALIZED_NAME_COMPANY_NAME)
  private String companyName;

  public static final String SERIALIZED_NAME_CLIENT_ID = "clientId";
  @SerializedName(SERIALIZED_NAME_CLIENT_ID)
  private String clientId;

  public static final String SERIALIZED_NAME_DOCUMENT_NUMBER = "documentNumber";
  @SerializedName(SERIALIZED_NAME_DOCUMENT_NUMBER)
  private String documentNumber;

  public static final String SERIALIZED_NAME_LANGUAGE = "language";
  @SerializedName(SERIALIZED_NAME_LANGUAGE)
  private String language;

  public UserSettings() {
  }

  public UserSettings id(UUID id) {
    
    this.id = id;
    return this;
  }

   /**
   * Company settings ID
   * @return id
  **/
  @javax.annotation.Nullable

  public UUID getId() {
    return id;
  }


  public void setId(UUID id) {
    this.id = id;
  }


  public UserSettings email(String email) {
    
    this.email = email;
    return this;
  }

   /**
   * Company e-mail
   * @return email
  **/
  @javax.annotation.Nullable

  public String getEmail() {
    return email;
  }


  public void setEmail(String email) {
    this.email = email;
  }


  public UserSettings phone(String phone) {
    
    this.phone = phone;
    return this;
  }

   /**
   * Company phone
   * @return phone
  **/
  @javax.annotation.Nullable

  public String getPhone() {
    return phone;
  }


  public void setPhone(String phone) {
    this.phone = phone;
  }


  public UserSettings statementDescription(String statementDescription) {
    
    this.statementDescription = statementDescription;
    return this;
  }

   /**
   * Description to be displayed on buyer&#39;s invoice
   * @return statementDescription
  **/
  @javax.annotation.Nullable

  public String getStatementDescription() {
    return statementDescription;
  }


  public void setStatementDescription(String statementDescription) {
    this.statementDescription = statementDescription;
  }


  public UserSettings logo(URI logo) {
    
    this.logo = logo;
    return this;
  }

   /**
   * Company logo URL
   * @return logo
  **/
  @javax.annotation.Nullable

  public URI getLogo() {
    return logo;
  }


  public void setLogo(URI logo) {
    this.logo = logo;
  }


  public UserSettings mainColor(String mainColor) {
    
    this.mainColor = mainColor;
    return this;
  }

   /**
   * Main color
   * @return mainColor
  **/
  @javax.annotation.Nullable

  public String getMainColor() {
    return mainColor;
  }


  public void setMainColor(String mainColor) {
    this.mainColor = mainColor;
  }


  public UserSettings secondaryColor(String secondaryColor) {
    
    this.secondaryColor = secondaryColor;
    return this;
  }

   /**
   * Secondary color
   * @return secondaryColor
  **/
  @javax.annotation.Nullable

  public String getSecondaryColor() {
    return secondaryColor;
  }


  public void setSecondaryColor(String secondaryColor) {
    this.secondaryColor = secondaryColor;
  }


  public UserSettings attentionColor(String attentionColor) {
    
    this.attentionColor = attentionColor;
    return this;
  }

   /**
   * Attention color
   * @return attentionColor
  **/
  @javax.annotation.Nullable

  public String getAttentionColor() {
    return attentionColor;
  }


  public void setAttentionColor(String attentionColor) {
    this.attentionColor = attentionColor;
  }


  public UserSettings errorColor(String errorColor) {
    
    this.errorColor = errorColor;
    return this;
  }

   /**
   * Error message color
   * @return errorColor
  **/
  @javax.annotation.Nullable

  public String getErrorColor() {
    return errorColor;
  }


  public void setErrorColor(String errorColor) {
    this.errorColor = errorColor;
  }


  public UserSettings successColor(String successColor) {
    
    this.successColor = successColor;
    return this;
  }

   /**
   * Success message color
   * @return successColor
  **/
  @javax.annotation.Nullable

  public String getSuccessColor() {
    return successColor;
  }


  public void setSuccessColor(String successColor) {
    this.successColor = successColor;
  }


  public UserSettings backgroundColor(String backgroundColor) {
    
    this.backgroundColor = backgroundColor;
    return this;
  }

   /**
   * Background color
   * @return backgroundColor
  **/
  @javax.annotation.Nullable

  public String getBackgroundColor() {
    return backgroundColor;
  }


  public void setBackgroundColor(String backgroundColor) {
    this.backgroundColor = backgroundColor;
  }


  public UserSettings companyName(String companyName) {
    
    this.companyName = companyName;
    return this;
  }

   /**
   * Company name
   * @return companyName
  **/
  @javax.annotation.Nullable

  public String getCompanyName() {
    return companyName;
  }


  public void setCompanyName(String companyName) {
    this.companyName = companyName;
  }


  public UserSettings clientId(String clientId) {
    
    this.clientId = clientId;
    return this;
  }

   /**
   * Client identification on Malga
   * @return clientId
  **/
  @javax.annotation.Nullable

  public String getClientId() {
    return clientId;
  }


  public void setClientId(String clientId) {
    this.clientId = clientId;
  }


  public UserSettings documentNumber(String documentNumber) {
    
    this.documentNumber = documentNumber;
    return this;
  }

   /**
   * Document number registered on company account
   * @return documentNumber
  **/
  @javax.annotation.Nullable

  public String getDocumentNumber() {
    return documentNumber;
  }


  public void setDocumentNumber(String documentNumber) {
    this.documentNumber = documentNumber;
  }


  public UserSettings language(String language) {
    
    this.language = language;
    return this;
  }

   /**
   * Default company language
   * @return language
  **/
  @javax.annotation.Nullable

  public String getLanguage() {
    return language;
  }


  public void setLanguage(String language) {
    this.language = language;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the UserSettings instance itself
   */
  public UserSettings putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UserSettings userSettings = (UserSettings) o;
    return Objects.equals(this.id, userSettings.id) &&
        Objects.equals(this.email, userSettings.email) &&
        Objects.equals(this.phone, userSettings.phone) &&
        Objects.equals(this.statementDescription, userSettings.statementDescription) &&
        Objects.equals(this.logo, userSettings.logo) &&
        Objects.equals(this.mainColor, userSettings.mainColor) &&
        Objects.equals(this.secondaryColor, userSettings.secondaryColor) &&
        Objects.equals(this.attentionColor, userSettings.attentionColor) &&
        Objects.equals(this.errorColor, userSettings.errorColor) &&
        Objects.equals(this.successColor, userSettings.successColor) &&
        Objects.equals(this.backgroundColor, userSettings.backgroundColor) &&
        Objects.equals(this.companyName, userSettings.companyName) &&
        Objects.equals(this.clientId, userSettings.clientId) &&
        Objects.equals(this.documentNumber, userSettings.documentNumber) &&
        Objects.equals(this.language, userSettings.language)&&
        Objects.equals(this.additionalProperties, userSettings.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, email, phone, statementDescription, logo, mainColor, secondaryColor, attentionColor, errorColor, successColor, backgroundColor, companyName, clientId, documentNumber, language, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UserSettings {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    email: ").append(toIndentedString(email)).append("\n");
    sb.append("    phone: ").append(toIndentedString(phone)).append("\n");
    sb.append("    statementDescription: ").append(toIndentedString(statementDescription)).append("\n");
    sb.append("    logo: ").append(toIndentedString(logo)).append("\n");
    sb.append("    mainColor: ").append(toIndentedString(mainColor)).append("\n");
    sb.append("    secondaryColor: ").append(toIndentedString(secondaryColor)).append("\n");
    sb.append("    attentionColor: ").append(toIndentedString(attentionColor)).append("\n");
    sb.append("    errorColor: ").append(toIndentedString(errorColor)).append("\n");
    sb.append("    successColor: ").append(toIndentedString(successColor)).append("\n");
    sb.append("    backgroundColor: ").append(toIndentedString(backgroundColor)).append("\n");
    sb.append("    companyName: ").append(toIndentedString(companyName)).append("\n");
    sb.append("    clientId: ").append(toIndentedString(clientId)).append("\n");
    sb.append("    documentNumber: ").append(toIndentedString(documentNumber)).append("\n");
    sb.append("    language: ").append(toIndentedString(language)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("email");
    openapiFields.add("phone");
    openapiFields.add("statementDescription");
    openapiFields.add("logo");
    openapiFields.add("mainColor");
    openapiFields.add("secondaryColor");
    openapiFields.add("attentionColor");
    openapiFields.add("errorColor");
    openapiFields.add("successColor");
    openapiFields.add("backgroundColor");
    openapiFields.add("companyName");
    openapiFields.add("clientId");
    openapiFields.add("documentNumber");
    openapiFields.add("language");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to UserSettings
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!UserSettings.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in UserSettings is not found in the empty JSON string", UserSettings.openapiRequiredFields.toString()));
        }
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("email") != null && !jsonObj.get("email").isJsonNull()) && !jsonObj.get("email").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `email` to be a primitive type in the JSON string but got `%s`", jsonObj.get("email").toString()));
      }
      if ((jsonObj.get("phone") != null && !jsonObj.get("phone").isJsonNull()) && !jsonObj.get("phone").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `phone` to be a primitive type in the JSON string but got `%s`", jsonObj.get("phone").toString()));
      }
      if ((jsonObj.get("statementDescription") != null && !jsonObj.get("statementDescription").isJsonNull()) && !jsonObj.get("statementDescription").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `statementDescription` to be a primitive type in the JSON string but got `%s`", jsonObj.get("statementDescription").toString()));
      }
      if ((jsonObj.get("logo") != null && !jsonObj.get("logo").isJsonNull()) && !jsonObj.get("logo").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `logo` to be a primitive type in the JSON string but got `%s`", jsonObj.get("logo").toString()));
      }
      if ((jsonObj.get("mainColor") != null && !jsonObj.get("mainColor").isJsonNull()) && !jsonObj.get("mainColor").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `mainColor` to be a primitive type in the JSON string but got `%s`", jsonObj.get("mainColor").toString()));
      }
      if ((jsonObj.get("secondaryColor") != null && !jsonObj.get("secondaryColor").isJsonNull()) && !jsonObj.get("secondaryColor").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `secondaryColor` to be a primitive type in the JSON string but got `%s`", jsonObj.get("secondaryColor").toString()));
      }
      if ((jsonObj.get("attentionColor") != null && !jsonObj.get("attentionColor").isJsonNull()) && !jsonObj.get("attentionColor").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `attentionColor` to be a primitive type in the JSON string but got `%s`", jsonObj.get("attentionColor").toString()));
      }
      if ((jsonObj.get("errorColor") != null && !jsonObj.get("errorColor").isJsonNull()) && !jsonObj.get("errorColor").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `errorColor` to be a primitive type in the JSON string but got `%s`", jsonObj.get("errorColor").toString()));
      }
      if ((jsonObj.get("successColor") != null && !jsonObj.get("successColor").isJsonNull()) && !jsonObj.get("successColor").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `successColor` to be a primitive type in the JSON string but got `%s`", jsonObj.get("successColor").toString()));
      }
      if ((jsonObj.get("backgroundColor") != null && !jsonObj.get("backgroundColor").isJsonNull()) && !jsonObj.get("backgroundColor").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `backgroundColor` to be a primitive type in the JSON string but got `%s`", jsonObj.get("backgroundColor").toString()));
      }
      if ((jsonObj.get("companyName") != null && !jsonObj.get("companyName").isJsonNull()) && !jsonObj.get("companyName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `companyName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("companyName").toString()));
      }
      if ((jsonObj.get("clientId") != null && !jsonObj.get("clientId").isJsonNull()) && !jsonObj.get("clientId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `clientId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("clientId").toString()));
      }
      if ((jsonObj.get("documentNumber") != null && !jsonObj.get("documentNumber").isJsonNull()) && !jsonObj.get("documentNumber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `documentNumber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("documentNumber").toString()));
      }
      if ((jsonObj.get("language") != null && !jsonObj.get("language").isJsonNull()) && !jsonObj.get("language").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `language` to be a primitive type in the JSON string but got `%s`", jsonObj.get("language").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!UserSettings.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'UserSettings' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<UserSettings> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(UserSettings.class));

       return (TypeAdapter<T>) new TypeAdapter<UserSettings>() {
           @Override
           public void write(JsonWriter out, UserSettings value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additional properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public UserSettings read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             UserSettings instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of UserSettings given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of UserSettings
  * @throws IOException if the JSON string is invalid with respect to UserSettings
  */
  public static UserSettings fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, UserSettings.class);
  }

  public static Gson getGson() {
    return JSON.getGson();
  }

/** * Convert an instance of UserSettings to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

